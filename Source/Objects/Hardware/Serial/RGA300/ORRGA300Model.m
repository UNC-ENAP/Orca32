//--------------------------------------------------------
// ORRGA300Model
// Created by Mark  A. Howe on Tues Jan 4, 2012
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2012 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark •••Imported Files

#import "ORRGA300Model.h"
#import "ORSerialPort.h"
#import "ORSerialPortAdditions.h"
#import "ORDataTypeAssigner.h"
#import "ORDataPacket.h"
#import "ORTimeRate.h"
#import "ORSafeQueue.h"

#pragma mark •••External Strings
NSString* ORRGA300ModelElectronMultiOptionChanged	= @"ORRGA300ModelElectronMultiOptionChanged";
NSString* ORRGA300ModelMeasuredIonCurrentChanged	= @"ORRGA300ModelMeasuredIonCurrentChanged";
NSString* ORRGA300ModelNumberAnalogScansChanged		= @"ORRGA300ModelNumberAnalogScansChanged";
NSString* ORRGA300ModelStepsPerAmuChanged			= @"ORRGA300ModelStepsPerAmuChanged";
NSString* ORRGA300ModelSingleMassChanged			= @"ORRGA300ModelSingleMassChanged";
NSString* ORRGA300ModelInitialMassChanged			= @"ORRGA300ModelInitialMassChanged";
NSString* ORRGA300ModelFinalMassChanged				= @"ORRGA300ModelFinalMassChanged";
NSString* ORRGA300ModelHistoScanPointsChanged		= @"ORRGA300ModelHistoScanPointsChanged";
NSString* ORRGA300ModelAnalogScanPointsChanged		= @"ORRGA300ModelAnalogScanPointsChanged";
NSString* ORRGA300ModelNoiseFloorSettingChanged		= @"ORRGA300ModelNoiseFloorSettingChanged";
NSString* ORRGA300ModelElecMultHVBiasChanged		= @"ORRGA300ModelElecMultHVBiasChanged";
NSString* ORRGA300ModelIonizerFocusPlateVoltageChanged = @"ORRGA300ModelIonizerFocusPlateVoltageChanged";
NSString* ORRGA300ModelIonizerIonEnergyChanged		= @"ORRGA300ModelIonizerIonEnergyChanged";
NSString* ORRGA300ModelIonizerEmissionCurrentChanged = @"ORRGA300ModelIonizerEmissionCurrentChanged";
NSString* ORRGA300ModelIonizerElectronEnergyChanged = @"ORRGA300ModelIonizerElectronEnergyChanged";
NSString* ORRGA300ModelIonizerDegassTimeChanged		= @"ORRGA300ModelIonizerDegassTimeChanged";
NSString* ORRGA300ModelRs232ErrWordChanged			= @"ORRGA300ModelRs232ErrWordChanged";
NSString* ORRGA300ModelFilErrWordChanged			= @"ORRGA300ModelFilErrWordChanged";
NSString* ORRGA300ModelCemErrWordChanged			= @"ORRGA300ModelCemErrWordChanged";
NSString* ORRGA300ModelQmfErrWordChanged			= @"ORRGA300ModelQmfErrWordChanged";
NSString* ORRGA300ModelDetErrWordChanged			= @"ORRGA300ModelDetErrWordChanged";
NSString* ORRGA300ModelPsErrWordChanged				= @"ORRGA300ModelPsErrWordChanged";
NSString* ORRGA300ModelStatusWordChanged			= @"ORRGA300ModelStatusWordChanged";
NSString* ORRGA300ModelSerialNumberChanged			= @"ORRGA300ModelSerialNumberChanged";
NSString* ORRGA300ModelFirmwareVersionChanged		= @"ORRGA300ModelFirmwareVersionChanged";
NSString* ORRGA300ModelModelNumberChanged			= @"ORRGA300ModelModelNumberChanged";

NSString* ORRGA300ModelPollTimeChanged		= @"ORRGA300ModelPollTimeChanged";
NSString* ORRGA300ModelSerialPortChanged	= @"ORRGA300ModelSerialPortChanged";
NSString* ORRGA300ModelPortNameChanged		= @"ORRGA300ModelPortNameChanged";
NSString* ORRGA300ModelPortStateChanged		= @"ORRGA300ModelPortStateChanged";
NSString* ORRGA300Lock						= @"ORRGA300Lock";

@interface ORRGA300Model (private)
- (int) limitInt:(int)aValue min:(int)aMin max:(int)aMax;
- (float) limitFloat:(float)aValue min:(float)aMin max:(float)aMax;
- (void) processOneCommandFromQueue;
- (void) enqueCmdString:(NSString*)aString;
- (void) processReceivedString:(NSString*)aCommand;
- (void) clearAlarms;
- (void) pollHW;
- (void) processIDResponse:(NSString*)aString;
- (void) processStatusWord:(NSString*)aString;
- (void) setFirmwareVersion:(float)aFirmwareVersion;
- (void) setSerialNumber:(int)aSerialNumber;
- (void) setModelNumber:(int)aModelNumber;
- (void) setHistoScanPoints:(int)aHistoScanPoints;
- (void) setAnalogScanPoints:(int)aAnalogScanPoints;
- (void) setElectronMultiOption:(BOOL)aElectronMultiOption;
@end

@implementation ORRGA300Model

- (void) dealloc
{
    [NSObject cancelPreviousPerformRequestsWithTarget:self];
	[cmdQueue release];
	[lastRequest release];
	[inComingData release];
	
	[super dealloc];
}

- (void)sleep
{
    [super sleep];
    	
}

- (void) setUpImage
{
	[self setImage:[NSImage imageNamed:@"RGA300.tif"]];
}

- (void) makeMainController
{
	[self linkToController:@"ORRGA300Controller"];
}

#pragma mark •••Accessors

- (BOOL) electronMultiOption
{
    return electronMultiOption;
}


- (int) measuredIonCurrent
{
    return measuredIonCurrent;
}

- (void) setMeasuredIonCurrent:(int)aMeasuredIonCurrent
{
    measuredIonCurrent = aMeasuredIonCurrent;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelMeasuredIonCurrentChanged object:self];
}

- (int) numberAnalogScans
{
    return numberAnalogScans;
}

- (void) setNumberAnalogScans:(int)aNumberAnalogScans
{
	aNumberAnalogScans = [self limitInt:aNumberAnalogScans min:1 max:255];
    [[[self undoManager] prepareWithInvocationTarget:self] setNumberAnalogScans:numberAnalogScans];
    numberAnalogScans = aNumberAnalogScans;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelNumberAnalogScansChanged object:self];
}

- (int) stepsPerAmu
{
    return stepsPerAmu;
}

- (void) setStepsPerAmu:(int)aStepsPerAmu
{
	aStepsPerAmu = [self limitInt:aStepsPerAmu min:10 max:25];
    [[[self undoManager] prepareWithInvocationTarget:self] setStepsPerAmu:stepsPerAmu];
    stepsPerAmu = aStepsPerAmu;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelStepsPerAmuChanged object:self];
}

- (int) singleMass
{
    return singleMass;
}

- (void) setSingleMass:(int)aSingleMass
{
	aSingleMass = [self limitInt:aSingleMass min:1 max:MAX(1,[self modelNumber])];
    [[[self undoManager] prepareWithInvocationTarget:self] setSingleMass:singleMass];
    singleMass = aSingleMass;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelSingleMassChanged object:self];
}

- (int) initialMass
{
    return initialMass;
}

- (void) setInitialMass:(int)aInitialMass
{
    [[[self undoManager] prepareWithInvocationTarget:self] setInitialMass:initialMass];
    initialMass = aInitialMass;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelInitialMassChanged object:self];
}

- (int) finalMass
{
    return finalMass;
}

- (void) setFinalMass:(int)aFinalMass
{
    [[[self undoManager] prepareWithInvocationTarget:self] setFinalMass:finalMass];
    finalMass = aFinalMass;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelFinalMassChanged object:self];
}

- (int) histoScanPoints
{
    return histoScanPoints;
}


- (int) analogScanPoints
{
    return analogScanPoints;
}


- (int) noiseFloorSetting
{
    return noiseFloorSetting;
}

- (void) setNoiseFloorSetting:(int)aNoiseFloorSetting
{
 	aNoiseFloorSetting = [self limitInt:aNoiseFloorSetting min:0 max:7];
    [[[self undoManager] prepareWithInvocationTarget:self] setNoiseFloorSetting:noiseFloorSetting];
    noiseFloorSetting = aNoiseFloorSetting;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelNoiseFloorSettingChanged object:self];
}

- (int) elecMultHVBias
{
    return elecMultHVBias;
}

- (void) setElecMultHVBias:(int)aElecMultHVBias
{
 	aElecMultHVBias = [self limitInt:aElecMultHVBias min:0 max:2490];
    [[[self undoManager] prepareWithInvocationTarget:self] setElecMultHVBias:elecMultHVBias];
    elecMultHVBias = aElecMultHVBias;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelElecMultHVBiasChanged object:self];
}

- (int) ionizerFocusPlateVoltage
{
    return ionizerFocusPlateVoltage;
}

- (void) setIonizerFocusPlateVoltage:(int)aIonizerFocusPlateVoltage
{
 	aIonizerFocusPlateVoltage = [self limitInt:aIonizerFocusPlateVoltage min:0 max:150];
    [[[self undoManager] prepareWithInvocationTarget:self] setIonizerFocusPlateVoltage:ionizerFocusPlateVoltage];
    ionizerFocusPlateVoltage = aIonizerFocusPlateVoltage;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelIonizerFocusPlateVoltageChanged object:self];
}

- (int) ionizerIonEnergy
{
    return ionizerIonEnergy;
}

- (void) setIonizerIonEnergy:(int)aIonizerIonEnergy
{
 	aIonizerIonEnergy = [self limitInt:aIonizerIonEnergy min:0 max:1];
    [[[self undoManager] prepareWithInvocationTarget:self] setIonizerIonEnergy:ionizerIonEnergy];
    ionizerIonEnergy = aIonizerIonEnergy;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelIonizerIonEnergyChanged object:self];
}

- (int) ionizerEmissionCurrent
{
    return ionizerEmissionCurrent;
}

- (void) setIonizerEmissionCurrent:(int)aIonizerEmissionCurrent
{
 	aIonizerEmissionCurrent = [self limitFloat:aIonizerEmissionCurrent min:0.00 max:3.50];
    [[[self undoManager] prepareWithInvocationTarget:self] setIonizerEmissionCurrent:ionizerEmissionCurrent];
    
    ionizerEmissionCurrent = aIonizerEmissionCurrent;

    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelIonizerEmissionCurrentChanged object:self];
}

- (int) ionizerElectronEnergy
{
    return ionizerElectronEnergy;
}

- (void) setIonizerElectronEnergy:(int)aIonizerElectronEnergy
{
 	aIonizerElectronEnergy = [self limitInt:aIonizerElectronEnergy min:25 max:105];
    [[[self undoManager] prepareWithInvocationTarget:self] setIonizerElectronEnergy:ionizerElectronEnergy];
    ionizerElectronEnergy = aIonizerElectronEnergy;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelIonizerElectronEnergyChanged object:self];
}

- (int) ionizerDegassTime
{
    return ionizerDegassTime;
}

- (void) setIonizerDegassTime:(int)aIonizerDegassTime
{
 	aIonizerDegassTime = [self limitInt:aIonizerDegassTime min:0 max:20];
    [[[self undoManager] prepareWithInvocationTarget:self] setIonizerDegassTime:ionizerDegassTime];
    ionizerDegassTime = aIonizerDegassTime;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelIonizerDegassTimeChanged object:self];
}

- (int) rs232ErrWord
{
    return rs232ErrWord;
}

- (void) setRs232ErrWord:(int)aRs232ErrWord
{
    rs232ErrWord = aRs232ErrWord;

    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelRs232ErrWordChanged object:self];
}

- (int) filErrWord
{
    return filErrWord;
}

- (void) setFilErrWord:(int)aFilErrWord
{
    filErrWord = aFilErrWord;

    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelFilErrWordChanged object:self];
}

- (int) cemErrWord
{
    return cemErrWord;
}

- (void) setCemErrWord:(int)aCemErrWord
{
    cemErrWord = aCemErrWord;

    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelCemErrWordChanged object:self];
}

- (int) qmfErrWord
{
    return qmfErrWord;
}

- (void) setQmfErrWord:(int)aQmfErrWord
{
    qmfErrWord = aQmfErrWord;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelQmfErrWordChanged object:self];
}

- (int) detErrWord
{
    return detErrWord;
}

- (void) setDetErrWord:(int)aDetErrWord
{
    detErrWord = aDetErrWord;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelDetErrWordChanged object:self];
}

- (int) psErrWord
{
    return psErrWord;
}

- (void) setPsErrWord:(int)aPsErrWord
{
    psErrWord = aPsErrWord;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelPsErrWordChanged object:self];
}

- (int) statusWord
{
    return statusWord;
}

- (void) setStatusWord:(int)aStatusWord
{
    statusWord = aStatusWord;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelStatusWordChanged object:self];
}

- (int) serialNumber
{
    return serialNumber;
}


- (float) firmwareVersion
{
    return firmwareVersion;
}

- (int) modelNumber
{
    return modelNumber;
}

- (int) pollTime
{
    return pollTime;
}

- (void) setPollTime:(int)aPollTime
{
    [[[self undoManager] prepareWithInvocationTarget:self] setPollTime:pollTime];
    pollTime = aPollTime;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelPollTimeChanged object:self];
	
	if(pollTime){
		[self performSelector:@selector(pollHW) withObject:nil afterDelay:pollTime];
	}
	else {
		[NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(pollHW) object:nil];
	}
}


- (ORTimeRate*)timeRate
{
	return timeRate;
}


- (NSString*) lastRequest
{
	return lastRequest;
}

- (void) setLastRequest:(NSString*)aCmdString
{
	//some commands do not have a response
	if([aCmdString hasPrefix:@"DG0"]) return;
	else if([aCmdString hasPrefix:@"HS0"]) return;
	else if([aCmdString hasPrefix:@"MR0"]) return;
	else if([aCmdString hasPrefix:@"SC0"]) return;
	
	[lastRequest autorelease];
	lastRequest = [aCmdString copy];    
}

- (void) openPort:(BOOL)state
{
    if(state) {
        [serialPort open];
		[serialPort setSpeed:28800];
		[serialPort setParityNone];
		[serialPort setStopBits2:NO];
		[serialPort setDataBits:8];
		[serialPort commitChanges];
		[serialPort setDelegate:self];
    }
    else {
		[serialPort close];
		[self clearAlarms];
	}
    portWasOpen = [serialPort isOpen];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORSerialPortModelPortStateChanged object:self];
	if([serialPort isOpen]){
		[self sendInitComm];
		[self sendIDRequest];
	}
}

#pragma mark •••Archival
- (id) initWithCoder:(NSCoder*)decoder
{
	self = [super initWithCoder:decoder];
	[[self undoManager] disableUndoRegistration];
	[self setNumberAnalogScans:			[decoder decodeIntForKey:@"numberAnalogScans"]];
	[self setStepsPerAmu:				[decoder decodeIntForKey:@"stepsPerAmu"]];
	[self setSingleMass:				[decoder decodeIntForKey:@"singleMass"]];
	[self setInitialMass:				[decoder decodeIntForKey:@"initialMass"]];
	[self setFinalMass:					[decoder decodeIntForKey:@"finalMass"]];
	[self setNoiseFloorSetting:			[decoder decodeIntForKey:@"noiseFloorSetting"]];
	[self setElecMultHVBias:			[decoder decodeIntForKey:@"ElecMultHVBias"]];
	[self setIonizerFocusPlateVoltage:	[decoder decodeIntForKey:@"ionizerFocusPlateVoltage"]];
	[self setIonizerIonEnergy:			[decoder decodeIntForKey:@"ionizerIonEnergy"]];
	[self setIonizerEmissionCurrent:	[decoder decodeIntForKey:@"ionizerEmissionCurrent"]];
	[self setIonizerElectronEnergy:		[decoder decodeIntForKey:@"ionizerElectronEnergy"]];
	[self setIonizerDegassTime:			[decoder decodeIntForKey:@"ionizerDegassTime"]];
	[self setPollTime:					[decoder decodeIntForKey:	@"pollTime"]];
	[[self undoManager] enableUndoRegistration];
	
	return self;
}

- (void) encodeWithCoder:(NSCoder*)encoder
{
    [super encodeWithCoder:encoder];
    [encoder encodeInt:numberAnalogScans	forKey:@"numberAnalogScans"];
    [encoder encodeInt:stepsPerAmu			forKey:@"stepsPerAmu"];
    [encoder encodeInt:singleMass			forKey:@"singleMass"];
    [encoder encodeInt:initialMass			forKey:@"initialMass"];
    [encoder encodeInt:finalMass			forKey:@"finalMass"];
    [encoder encodeInt:noiseFloorSetting	forKey:@"noiseFloorSetting"];
    [encoder encodeInt:ionizerElectronEnergy forKey:@"ionizerElectronEnergy"];
    [encoder encodeInt:ionizerDegassTime	forKey:@"ionizerDegassTime"];
    [encoder encodeInt:pollTime				forKey: @"pollTime"];
    [encoder encodeInt:elecMultHVBias			forKey:@"ElecMultHVBias"];
    [encoder encodeInt:ionizerFocusPlateVoltage forKey:@"ionizerFocusPlateVoltage"];
    [encoder encodeInt:ionizerIonEnergy			forKey:@"ionizerIonEnergy"];
    [encoder encodeInt:ionizerEmissionCurrent	forKey:@"ionizerEmissionCurrent"];
}

#pragma mark •••HW Methods
- (void) initUnit
{
}


- (void) updateAll
{
	[self sendErrQuery];
}


#pragma mark •••Commands
- (void) sendIDRequest				{ [self enqueCmdString:@"ID?"]; }
- (void) sendInitComm				{ [self enqueCmdString:@"IN0"]; }	//Init communications and check HW
- (void) sendReset					{ [self enqueCmdString:@"IN1"]; }	//Reset to factory settings
- (void) sendStandBy				{ [self enqueCmdString:@"IN2"]; } //activate standby mode
- (void) sendErrQuery				{ [self enqueCmdString:@"ER?"]; } //returns status byte
- (void) sendRS232ErrQuery			{ [self enqueCmdString:@"EC?"]; } 
- (void) sendDetErrQuery			{ [self enqueCmdString:@"ED?"]; } 
- (void) sendFilamentErrQuery		{ [self enqueCmdString:@"EF?"]; } 
- (void) sendEMErrQuery				{ [self enqueCmdString:@"EM?"]; } 
- (void) sendPowerErrQuery			{ [self enqueCmdString:@"EP?"]; } 
- (void) sendQMFErrQuery			{ [self enqueCmdString:@"EQ?"]; } 
- (void) sendCalibrateAll			{ [self enqueCmdString:@"CA"]; } 
- (void) sendElecMultiOptionQuery	{ [self enqueCmdString:@"MO?"]; } 
- (void) sendNoiseFloorQuery		{ [self enqueCmdString:@"NF?"]; } 
- (void) sendAnalogScanPointsQuery	{ [self enqueCmdString:@"AP?"]; } 
- (void) sendHistoScanPointsQuery	{ [self enqueCmdString:@"HP?"]; } 
- (void) sendStepsPerAmuQuery		{ [self enqueCmdString:@"SA?"]; } 

- (void) sendCalibrateElectrometerIVResponse { [self enqueCmdString:@"CL"]; } 

- (void) sendNoiseFloorSetting 
{
	[self enqueCmdString:[NSString stringWithFormat:@"NF%d",noiseFloorSetting]];
}

- (void) sendIonizerElectronEnergy 
{
	[self enqueCmdString:[NSString stringWithFormat:@"EE%d",ionizerElectronEnergy]];
}

- (void) sendElecMultiHVBias 
{
	if(electronMultiOption){
		[self enqueCmdString:[NSString stringWithFormat:@"HV%d",elecMultHVBias]];
	}
}

- (void) sendIonizerEmissionCurrent 
{
	[self enqueCmdString:[NSString stringWithFormat:@"EE%d",ionizerEmissionCurrent]];
}

- (void) sendIonizerIonEnergy 
{
	[self enqueCmdString:[NSString stringWithFormat:@"IE%d",ionizerIonEnergy]];
}

- (void) sendIonizerFocusPlateVoltage 
{
	[self enqueCmdString:[NSString stringWithFormat:@"VF%d",ionizerFocusPlateVoltage]];
}

- (void) sendInitialMass 
{
	[self enqueCmdString:[NSString stringWithFormat:@"MI%d",initialMass]];
}

- (void) sendFinalMass 
{
	[self enqueCmdString:[NSString stringWithFormat:@"MF%d",finalMass]];
}

- (void) startDegassing
{
	if(ionizerDegassTime>0){
		[self enqueCmdString:[NSString stringWithFormat:@"DG%d",ionizerDegassTime]];
	}
	else {
	}
}

- (void) stopDegassing
{
}

- (void) startHistogramScan:(int)n
{
	n = [self limitInt:n min:0 max:255];
	[self enqueCmdString:[NSString stringWithFormat:@"HS%d",n]];
}

- (void) startSingleMassMeasurement	
{ 
	[self enqueCmdString:[NSString stringWithFormat:@"MR%d",[self singleMass]]];
} 

- (void) stopSingleMassMeasurement	
{ 
	[self enqueCmdString:@"MR0\r"];
} 

- (void) startAnalogScan
{ 
	[self enqueCmdString:[NSString stringWithFormat:@"AS%d",[self numberAnalogScans]]];
} 

- (void) stopAnalogScan	
{ 
	[self enqueCmdString:@"AS0"];
} 

- (void) syncWithHW
{
	[self enqueCmdString:@"EE?"];
	[self enqueCmdString:@"FL?"];
	[self enqueCmdString:@"IE?"];
	[self enqueCmdString:@"VF?"];
	[self enqueCmdString:@"HV?"];
	[self enqueCmdString:@"MO?"];
	[self enqueCmdString:@"NF?"];
	[self enqueCmdString:@"AP?"];
	[self enqueCmdString:@"HP?"];
	[self enqueCmdString:@"MF?"];
	[self enqueCmdString:@"MI?"];
	[self enqueCmdString:@"SA?"];
}

#pragma mark •••Data Records
- (unsigned long) dataId { return dataId; }
- (void) setDataId: (unsigned long) DataId
{
    dataId = DataId;
}
- (void) setDataIds:(id)assigner
{
    dataId = [assigner assignDataIds:kLongForm];
}

- (void) syncDataIdsWith:(id)anotherRGA300
{
    [self setDataId:[anotherRGA300 dataId]];
}

- (void) appendDataDescription:(ORDataPacket*)aDataPacket userInfo:(id)userInfo
{
    //----------------------------------------------------------------------------------------
    // first add our description to the data description
    [aDataPacket addDataDescriptionItem:[self dataRecordDescription] forKey:@"RGA300Model"];
}

- (NSDictionary*) dataRecordDescription
{
    NSMutableDictionary* dataDictionary = [NSMutableDictionary dictionary];
    NSDictionary* aDictionary = [NSDictionary dictionaryWithObjectsAndKeys:
        @"ORRGA300DecoderForAdc",			@"decoder",
        [NSNumber numberWithLong:dataId],   @"dataId",
        [NSNumber numberWithBool:NO],       @"variable",
        [NSNumber numberWithLong:8],        @"length",
        nil];
    [dataDictionary setObject:aDictionary forKey:@"Adcs"];
    
    return dataDictionary;
}

- (void) dataReceived:(NSNotification*)note
{
	if(!lastRequest)return;
	
    if([[note userInfo] objectForKey:@"serialPort"] == serialPort){
		if(!inComingData)inComingData = [[NSMutableData data] retain];
		[inComingData appendData:[[note userInfo] objectForKey:@"data"]];
		
		char* p = (char*)[inComingData bytes];
		int i;
		int numCharsProcessed=0;
		NSMutableData* cmd =  [NSMutableData dataWithCapacity:64];
		for(i=0;i<[inComingData length];i++){
			[cmd appendBytes:p length:1];
			if(*p == '\r'){
				NSString* s = [[[NSString alloc] initWithData:cmd encoding:NSASCIIStringEncoding] autorelease];
				numCharsProcessed += [cmd length];
				[cmd setLength:0];
				[self processReceivedString:s];
			}
			p++;
		}
		if(numCharsProcessed){
			[inComingData replaceBytesInRange:NSMakeRange(0,numCharsProcessed) withBytes:nil length:0];
		}
	}
}
@end

@implementation ORRGA300Model (private)
- (int) limitInt:(int)aValue min:(int)aMin max:(int)aMax
{
	if(aValue<aMin)		 aValue=aMin;
	else if(aValue>aMax) aValue = aMax;
	return aValue;
}

- (float) limitFloat:(float)aValue min:(float)aMin max:(float)aMax
{
	if(aValue<aMin)		 aValue=aMin;
	else if(aValue>aMax) aValue = aMax;
	return aValue;
}

- (void) clearAlarms
{
}

- (void) processOneCommandFromQueue
{
	if([cmdQueue count] == 0) return;
	NSString* cmdString = [cmdQueue dequeue];
	[self setLastRequest:cmdString];
	[serialPort writeDataInBackground:[cmdString dataUsingEncoding:NSASCIIStringEncoding]];
}

- (void) enqueCmdString:(NSString*)aString
{
	if([serialPort isOpen]){
		if(!cmdQueue) cmdQueue = [[ORSafeQueue alloc] init];
		if(![aString hasSuffix:@"\r"])aString = [aString stringByAppendingString:@"\r"];
		[cmdQueue enqueue:aString];
		if(!lastRequest)[self processOneCommandFromQueue];
	}
}

- (void) processReceivedString:(NSString*)aString
{		
	NSLog(@"%@:  %@\n",lastRequest,aString);

	if(lastRequest) {
		if([lastRequest hasPrefix:@"ID?"])		[self processIDResponse:aString];
		else if([lastRequest hasPrefix:@"ER?"])	[self processStatusWord:aString];
		else if([lastRequest hasPrefix:@"EC?"])	[self setRs232ErrWord:	[aString intValue]];
		else if([lastRequest hasPrefix:@"ED?"])	[self setDetErrWord:	[aString intValue]];
		else if([lastRequest hasPrefix:@"EF?"])	[self setFilErrWord:	[aString intValue]];
		else if([lastRequest hasPrefix:@"EM?"])	[self setCemErrWord:	[aString intValue]];
		else if([lastRequest hasPrefix:@"EP?"])	[self setPsErrWord:		[aString intValue]];
		else if([lastRequest hasPrefix:@"EQ?"])	[self setQmfErrWord:	[aString intValue]];
		else if([lastRequest hasPrefix:@"AP?"]) [self setAnalogScanPoints:	[aString intValue]];
		else if([lastRequest hasPrefix:@"HP?"]) [self setHistoScanPoints:	[aString intValue]];
		else if([lastRequest hasPrefix:@"DG?"]) [self setIonizerDegassTime:	[aString intValue]];
		else if([lastRequest hasPrefix:@"EE?"]) [self setIonizerElectronEnergy:	[aString intValue]];
		else if([lastRequest hasPrefix:@"FL?"]) [self setIonizerEmissionCurrent:[aString intValue]];
		else if([lastRequest hasPrefix:@"IE?"]) [self setIonizerIonEnergy:[aString intValue]];
		else if([lastRequest hasPrefix:@"VF?"]) [self setIonizerFocusPlateVoltage:[aString intValue]];
		else if([lastRequest hasPrefix:@"HV?"]) [self setElecMultHVBias:[aString intValue]];
		else if([lastRequest hasPrefix:@"NF?"]) [self setNoiseFloorSetting:[aString intValue]];
		else if([lastRequest hasPrefix:@"AP?"]) [self setAnalogScanPoints:[aString intValue]];
		else if([lastRequest hasPrefix:@"HP?"]) [self setHistoScanPoints:[aString intValue]];
		else if([lastRequest hasPrefix:@"MF?"]) [self setFinalMass:[aString intValue]];
		else if([lastRequest hasPrefix:@"MI?"]) [self setInitialMass:[aString intValue]];
		else if([lastRequest hasPrefix:@"SA?"]) [self setStepsPerAmu:[aString intValue]];
		else if([lastRequest hasPrefix:@"TP?"]) [self setMeasuredIonCurrent:[aString intValue]];
		
		else if([lastRequest rangeOfString:@"?"].location == NSNotFound)	[self processStatusWord:aString];

		
		[self setLastRequest:nil];			 //clear the last request
	}

	[self processOneCommandFromQueue];	 //do the next command in the queue
}



- (void) pollHW
{
	[self updateAll];
	[self performSelector:@selector(pollHW) withObject:nil afterDelay:pollTime];
}

- (void) processIDResponse:(NSString*)aString
{
	if([aString length]>=23 && [aString hasPrefix:@"SRSRGA"]){
		[self setModelNumber:	 [[aString substringWithRange:NSMakeRange(6,3)]  intValue]];
		[self setFirmwareVersion:[[aString substringWithRange:NSMakeRange(13,4)] floatValue]];
		[self setSerialNumber:	 [[aString substringWithRange:NSMakeRange(19,5)] intValue]];
	}
}

- (void) processStatusWord:(NSString*)aString
{
	[self setStatusWord:[aString intValue]];
	//have to check the bits to see if we need more info
	if(statusWord & kRGACommStatusMask)			 [self sendRS232ErrQuery];
	if(statusWord & kRGAFilamentStatusMask)		 [self sendFilamentErrQuery];
	if(statusWord & kRGAElectronMultiStatusMask) [self sendDetErrQuery];
	if(statusWord & kRGAQMFStatusMask)			 [self sendQMFErrQuery];
	if(statusWord & kRGAElectrometerStatusMask)	 [self sendDetErrQuery];
	if(statusWord & kRGA24VStatusMask)			 [self sendPowerErrQuery];
}

- (void) setElectronMultiOption:(BOOL)aElectronMultiOption
{
    electronMultiOption = aElectronMultiOption;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelElectronMultiOptionChanged object:self];
}

- (void) setSerialNumber:(int)aSerialNumber
{
    serialNumber = aSerialNumber;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelSerialNumberChanged object:self];
}

- (void) setModelNumber:(int)aModelNumber
{
    modelNumber = aModelNumber;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelModelNumberChanged object:self];
}

- (void) setFirmwareVersion:(float)aFirmwareVersion
{
    firmwareVersion = aFirmwareVersion;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelFirmwareVersionChanged object:self];
}

- (void) setHistoScanPoints:(int)aHistoScanPoints
{	
    histoScanPoints = aHistoScanPoints;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelHistoScanPointsChanged object:self];
}

- (void) setAnalogScanPoints:(int)aAnalogScanPoints
{
    analogScanPoints = aAnalogScanPoints;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelAnalogScanPointsChanged object:self];
}

@end