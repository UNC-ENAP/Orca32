//--------------------------------------------------------
// ORRGA300Model
// Created by Mark  A. Howe on Tues Jan 4, 2012
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2012 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark •••Imported Files

#import "ORRGA300Model.h"
#import "ORSerialPort.h"
#import "ORSerialPortAdditions.h"
#import "ORSafeQueue.h"

#pragma mark •••External Strings
NSString* ORRGA300ModelScanDataChanged				= @"ORRGA300ModelScanDataChanged";
NSString* ORRGA300ModelScanNumberChanged			= @"ORRGA300ModelScanNumberChanged";
NSString* ORRGA300ModelScanProgressChanged			= @"ORRGA300ModelScanProgressChanged";
NSString* ORRGA300ModelCurrentActivityChanged		= @"ORRGA300ModelCurrentActivityChanged";
NSString* ORRGA300ModelOpModeChanged				= @"ORRGA300ModelOpModeChanged";
NSString* ORRGA300ModelElecMultGainRBChanged		= @"ORRGA300ModelElecMultGainRBChanged";
NSString* ORRGA300ModelElecMultHVBiasRBChanged		= @"ORRGA300ModelElecMultHVBiasRBChanged";
NSString* ORRGA300ModelNoiseFloorSettingRBChanged	= @"ORRGA300ModelNoiseFloorSettingRBChanged";
NSString* ORRGA300ModelIonizerFocusPlateVoltageRBChanged = @"ORRGA300ModelIonizerFocusPlateVoltageRBChanged";
NSString* ORRGA300ModelIonizerIonEnergyRBChanged		 = @"ORRGA300ModelIonizerIonEnergyRBChanged";
NSString* ORRGA300ModelIonizerElectronEnergyRBChanged	 = @"ORRGA300ModelIonizerElectronEnergyRBChanged";
NSString* ORRGA300ModelIonizerFilamentCurrentRBChanged	 = @"ORRGA300ModelIonizerFilamentCurrentRBChanged";
NSString* ORRGA300ModelElecMultGainChanged			= @"ORRGA300ModelElecMultGainChanged";
NSString* ORRGA300ModelElectronMultiOptionChanged	= @"ORRGA300ModelElectronMultiOptionChanged";
NSString* ORRGA300ModelMeasuredIonCurrentChanged	= @"ORRGA300ModelMeasuredIonCurrentChanged";
NSString* ORRGA300ModelNumberScansChanged			= @"ORRGA300ModelNumberScansChanged";
NSString* ORRGA300ModelStepsPerAmuChanged			= @"ORRGA300ModelStepsPerAmuChanged";
NSString* ORRGA300ModelSingleMassChanged			= @"ORRGA300ModelSingleMassChanged";
NSString* ORRGA300ModelInitialMassChanged			= @"ORRGA300ModelInitialMassChanged";
NSString* ORRGA300ModelFinalMassChanged				= @"ORRGA300ModelFinalMassChanged";
NSString* ORRGA300ModelHistoScanPointsChanged		= @"ORRGA300ModelHistoScanPointsChanged";
NSString* ORRGA300ModelAnalogScanPointsChanged		= @"ORRGA300ModelAnalogScanPointsChanged";
NSString* ORRGA300ModelNoiseFloorSettingChanged		= @"ORRGA300ModelNoiseFloorSettingChanged";
NSString* ORRGA300ModelElecMultHVBiasChanged		= @"ORRGA300ModelElecMultHVBiasChanged";
NSString* ORRGA300ModelIonizerFocusPlateVoltageChanged = @"ORRGA300ModelIonizerFocusPlateVoltageChanged";
NSString* ORRGA300ModelIonizerIonEnergyChanged		= @"ORRGA300ModelIonizerIonEnergyChanged";
NSString* ORRGA300ModelIonizerEmissionCurrentChanged = @"ORRGA300ModelIonizerEmissionCurrentChanged";
NSString* ORRGA300ModelIonizerElectronEnergyChanged = @"ORRGA300ModelIonizerElectronEnergyChanged";
NSString* ORRGA300ModelIonizerDegassTimeChanged		= @"ORRGA300ModelIonizerDegassTimeChanged";
NSString* ORRGA300ModelRs232ErrWordChanged			= @"ORRGA300ModelRs232ErrWordChanged";
NSString* ORRGA300ModelFilErrWordChanged			= @"ORRGA300ModelFilErrWordChanged";
NSString* ORRGA300ModelCemErrWordChanged			= @"ORRGA300ModelCemErrWordChanged";
NSString* ORRGA300ModelQmfErrWordChanged			= @"ORRGA300ModelQmfErrWordChanged";
NSString* ORRGA300ModelDetErrWordChanged			= @"ORRGA300ModelDetErrWordChanged";
NSString* ORRGA300ModelPsErrWordChanged				= @"ORRGA300ModelPsErrWordChanged";
NSString* ORRGA300ModelStatusWordChanged			= @"ORRGA300ModelStatusWordChanged";
NSString* ORRGA300ModelSerialNumberChanged			= @"ORRGA300ModelSerialNumberChanged";
NSString* ORRGA300ModelFirmwareVersionChanged		= @"ORRGA300ModelFirmwareVersionChanged";
NSString* ORRGA300ModelModelNumberChanged			= @"ORRGA300ModelModelNumberChanged";
NSString* ORRGA300ModelAmuAdded						= @"ORRGA300ModelAmuAdded";
NSString* ORRGA300ModelAmuRemoved					= @"ORRGA300ModelAmuRemoved";
NSString* ORRGA300ModelCurrentAmuIndexChanged		= @"ORRGA300ModelCurrentAmuIndexChanged";
NSString* ORRGA300ModelUseIonizerDefaultsChanged	= @"ORRGA300ModelUseIonizerDefaultsChanged";
NSString* ORRGA300ModelUseDetectorDefaultsChanged	= @"ORRGA300ModelUseDetectorDefaultsChanged";

NSString* ORRGA300ModelSerialPortChanged			= @"ORRGA300ModelSerialPortChanged";
NSString* ORRGA300ModelPortNameChanged				= @"ORRGA300ModelPortNameChanged";
NSString* ORRGA300ModelPortStateChanged				= @"ORRGA300ModelPortStateChanged";
NSString* ORRGA300Lock								= @"ORRGA300Lock";

@interface ORRGA300Model (private)
- (NSString*) lastRequest;
- (void) setLastRequest:(NSString*)aCmdString;
- (void) send:(NSString*)aCmd withInt:(int)aValue;
- (int) limitInt:(int)aValue min:(int)aMin max:(int)aMax;
- (float) limitFloat:(float)aValue min:(float)aMin max:(float)aMax;
- (BOOL) expectResponseFrom:(NSString*)aCmdString;
- (void) processOneCommandFromQueue;
- (void) enqueCmdString:(NSString*)aString;
- (void) processReceivedString:(NSString*)aCommand;
- (void) setRs232ErrWord:(int)aRs232ErrWord;
- (void) setFilErrWord:(int)aFilErrWord;
- (void) setCemErrWord:(int)aCemErrWord;
- (void) setQmfErrWord:(int)aQmfErrWord;
- (void) setDetErrWord:(int)aDetErrWord;
- (void) setPsErrWord:(int)aPsErrWord;
- (void) setStatusWord:(int)aStatusWord;
- (void) processIDResponse:(NSString*)aString;
- (void) processStatusWord:(NSString*)aString;
- (void) setFirmwareVersion:(float)aFirmwareVersion;
- (void) setSerialNumber:(int)aSerialNumber;
- (void) setModelNumber:(int)aModelNumber;
- (void) setHistoScanPoints:(int)aHistoScanPoints;
- (void) setAnalogScanPoints:(int)aAnalogScanPoints;
- (void) setElectronMultiOption:(BOOL)aElectronMultiOption;
- (void) setIonizerFocusPlateVoltageRB:(int)aIonizerFocusPlateVoltageRB;
- (void) setIonizerIonEnergyRB:(int)aIonizerIonEnergyRB;
- (void) setIonizerElectronEnergyRB:(int)aIonizerElectronEnergyRB;
- (void) setIonizerFilamentCurrentRB:(float)aIonizerFilamentCurrentRB;
- (void) setElecMultGainRB:(float)aElecMultGainRB;
- (void) setElecMultHVBiasRB:(int)aElecMultHVBiasRB;
- (void) setNoiseFloorSettingRB:(int)aNoiseFloorSettingRB;
- (void) setMeasuredIonCurrent:(int)aMeasuredIonCurrent;
- (void) startAnalogScan;
- (void) stopAnalogScan;
- (void) startHistogramScan;
- (void) stopHistogramScan;
- (void) startSingleMassMeasurement;
- (void) continueSingleMassMeasurement;
- (void) stopSingleMassMeasurement;
- (void) setCurrentActivity:(int)aCurrentActivity;
- (void) setCurrentAmuIndex:(int)aValue;
- (void) setScanData:(NSData*)aScanData;
- (void) addTableData:(NSData*)data;
@end

@implementation ORRGA300Model
- (void) dealloc
{
    [scanData release];
    [NSObject cancelPreviousPerformRequestsWithTarget:self];
	[cmdQueue release];
	[lastRequest release];
	[inComingData release];
	[scanData release];
	[amus release];
	[amuTableData release];
	[super dealloc];
}

- (void)sleep
{
    [super sleep];
}

- (void) setUpImage
{
	[self setImage:[NSImage imageNamed:@"RGA300.tif"]];
}

- (void) makeMainController
{
	[self linkToController:@"ORRGA300Controller"];
}

#pragma mark •••Accessors
- (int)		currentAmuIndex { return currentAmuIndex; }

- (NSData*) scanData
{
    return scanData;
}

- (int) scanNumber
{
    return scanNumber;
}

- (void) setScanNumber:(int)aScanNumber
{
	if(aScanNumber>numberScans)aScanNumber=0;
    scanNumber = aScanNumber;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelScanNumberChanged object:self];
}

- (float) scanProgress
{
    return scanProgress;
}

- (void) setScanProgress:(float)aScanProgress
{
    scanProgress = aScanProgress;

    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelScanProgressChanged object:self];
}

- (int) currentActivity
{
    return currentActivity;
}

- (int) opMode
{
    return opMode;
}

- (void) setOpMode:(int)aOpMode
{
    [[[self undoManager] prepareWithInvocationTarget:self] setOpMode:opMode];
    opMode = aOpMode;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelOpModeChanged object:self];
}

- (int)		rs232ErrWord				{ return rs232ErrWord; }
- (int)		filErrWord					{ return filErrWord; }
- (int)		cemErrWord					{ return cemErrWord; }
- (int)		qmfErrWord					{ return qmfErrWord; }
- (int)		detErrWord					{ return detErrWord; }
- (int)		psErrWord					{ return psErrWord; }
- (int)		statusWord					{ return statusWord; }
- (int)		serialNumber				{ return serialNumber; }
- (float)	firmwareVersion				{ return firmwareVersion; }
- (int)		modelNumber					{ return modelNumber; }
- (float)	elecMultGainRB				{ return elecMultGainRB; }
- (int)		elecMultHVBiasRB			{ return elecMultHVBiasRB; }
- (int)		noiseFloorSettingRB			{ return noiseFloorSettingRB; }
- (int)		ionizerFocusPlateVoltageRB	{ return ionizerFocusPlateVoltageRB; }
- (int)		ionizerIonEnergyRB			{ return ionizerIonEnergyRB; }
- (int)		ionizerElectronEnergyRB		{ return ionizerElectronEnergyRB; }
- (float)	ionizerFilamentCurrentRB	{ return ionizerFilamentCurrentRB; }
- (float)	elecMultGain				{ return elecMultGain; }
- (BOOL)	electronMultiOption			{ return electronMultiOption; }
- (int)		measuredIonCurrent			{ return measuredIonCurrent; }
- (int)		histoScanPoints				{ return histoScanPoints;   }
- (int)		analogScanPoints			{ return analogScanPoints;  }
- (int)		noiseFloorSetting			{ return noiseFloorSetting; }

- (void) setElecMultGain:(float)aElecMultGain
{
    [[[self undoManager] prepareWithInvocationTarget:self] setElecMultGain:elecMultGain];
    elecMultGain = [self limitFloat:aElecMultGain min:0 max:2000.];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelElecMultGainChanged object:self];
}

- (int) numberScans
{
    return numberScans;
}

- (void) setNumberScans:(int)aNumberScans
{
    [[[self undoManager] prepareWithInvocationTarget:self] setNumberScans:numberScans];
    numberScans = [self limitInt:aNumberScans min:1 max:255];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelNumberScansChanged object:self];
}

- (int) stepsPerAmu
{
    return stepsPerAmu;
}

- (void) setStepsPerAmu:(int)aStepsPerAmu
{
    [[[self undoManager] prepareWithInvocationTarget:self] setStepsPerAmu:stepsPerAmu];
    stepsPerAmu = [self limitInt:aStepsPerAmu min:10 max:25];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelStepsPerAmuChanged object:self];
}

- (int) initialMass
{
    return initialMass;
}

- (void) setInitialMass:(int)aInitialMass
{
    [[[self undoManager] prepareWithInvocationTarget:self] setInitialMass:initialMass];
    initialMass = aInitialMass;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelInitialMassChanged object:self];
}

- (int) finalMass
{
    return finalMass;
}

- (void) setFinalMass:(int)aFinalMass
{
    [[[self undoManager] prepareWithInvocationTarget:self] setFinalMass:finalMass];
    finalMass = aFinalMass;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelFinalMassChanged object:self];
}

- (void) setNoiseFloorSetting:(int)aNoiseFloorSetting
{
    [[[self undoManager] prepareWithInvocationTarget:self] setNoiseFloorSetting:noiseFloorSetting];
    noiseFloorSetting = [self limitInt:aNoiseFloorSetting min:0 max:7];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelNoiseFloorSettingChanged object:self];
}

- (int) elecMultHVBias
{
    return elecMultHVBias;
}

- (void) setElecMultHVBias:(int)aElecMultHVBias
{
    [[[self undoManager] prepareWithInvocationTarget:self] setElecMultHVBias:elecMultHVBias];
    elecMultHVBias = [self limitInt:aElecMultHVBias min:0 max:2490];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelElecMultHVBiasChanged object:self];
}

- (int) ionizerFocusPlateVoltage
{
    return ionizerFocusPlateVoltage;
}

- (void) setIonizerFocusPlateVoltage:(int)aIonizerFocusPlateVoltage
{
    [[[self undoManager] prepareWithInvocationTarget:self] setIonizerFocusPlateVoltage:ionizerFocusPlateVoltage];
    ionizerFocusPlateVoltage = [self limitInt:aIonizerFocusPlateVoltage min:0 max:150];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelIonizerFocusPlateVoltageChanged object:self];
}

- (int) ionizerIonEnergy
{
    return ionizerIonEnergy;
}

- (void) setIonizerIonEnergy:(int)aIonizerIonEnergy
{
    [[[self undoManager] prepareWithInvocationTarget:self] setIonizerIonEnergy:ionizerIonEnergy];
    ionizerIonEnergy = [self limitInt:aIonizerIonEnergy min:0 max:1];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelIonizerIonEnergyChanged object:self];
}

- (float) ionizerEmissionCurrent
{
    return ionizerEmissionCurrent;
}

- (void) setIonizerEmissionCurrent:(float)aIonizerEmissionCurrent
{
    [[[self undoManager] prepareWithInvocationTarget:self] setIonizerEmissionCurrent:ionizerEmissionCurrent];
    ionizerEmissionCurrent = [self limitFloat:aIonizerEmissionCurrent min:0.00 max:3.50];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelIonizerEmissionCurrentChanged object:self];
}

- (int) ionizerElectronEnergy
{
    return ionizerElectronEnergy;
}

- (void) setIonizerElectronEnergy:(int)aIonizerElectronEnergy
{
    [[[self undoManager] prepareWithInvocationTarget:self] setIonizerElectronEnergy:ionizerElectronEnergy];
    ionizerElectronEnergy = [self limitInt:aIonizerElectronEnergy min:25 max:105];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelIonizerElectronEnergyChanged object:self];
}

- (int) ionizerDegassTime
{
    return ionizerDegassTime;
}

- (void) setIonizerDegassTime:(int)aIonizerDegassTime
{
    [[[self undoManager] prepareWithInvocationTarget:self] setIonizerDegassTime:ionizerDegassTime];
    ionizerDegassTime = [self limitInt:aIonizerDegassTime min:0 max:20];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelIonizerDegassTimeChanged object:self];
}

- (BOOL)    useIonizerDefaults
{
    return useIonizerDefaults;
}

- (void)    setUseIonizerDefaults:(BOOL)aState
{
    [[[self undoManager] prepareWithInvocationTarget:self] setUseIonizerDefaults:useIonizerDefaults];
    useIonizerDefaults = aState;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelUseIonizerDefaultsChanged object:self];
    
}

- (BOOL)    useDetectorDefaults
{
    return useDetectorDefaults;
}

- (void)    setUseDetectorDefaults:(BOOL)aState
{
    [[[self undoManager] prepareWithInvocationTarget:self] setUseDetectorDefaults:useDetectorDefaults];
    useDetectorDefaults = aState;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelUseDetectorDefaultsChanged object:self];
    
}



- (void) openPort:(BOOL)state
{
    if(state) {
        [serialPort open];
		[serialPort setSpeed:28800];
		[serialPort setParityNone];
		[serialPort setStopBits2:NO];
		[serialPort setDataBits:8];
		[serialPort commitChanges];
		[serialPort setDelegate:self];
    }
    else {
		[serialPort close];
	}
    portWasOpen = [serialPort isOpen];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORSerialPortModelPortStateChanged object:self];
	if([serialPort isOpen]){
		[self sendInitComm];
		[self sendIDRequest];
		[self queryAll];
	}
}

#pragma mark •••Archival
- (id) initWithCoder:(NSCoder*)decoder
{
	self = [super initWithCoder:decoder];
	[[self undoManager] disableUndoRegistration];
	[self setOpMode:					[decoder decodeIntForKey:@"opMode"]];
	[self setElecMultGain:				[decoder decodeFloatForKey:@"elecMultGain"]];
	[self setNumberScans:				[decoder decodeIntForKey:@"numberScans"]];
	[self setStepsPerAmu:				[decoder decodeIntForKey:@"stepsPerAmu"]];
	[self setInitialMass:				[decoder decodeIntForKey:@"initialMass"]];
	[self setFinalMass:					[decoder decodeIntForKey:@"finalMass"]];
	[self setNoiseFloorSetting:			[decoder decodeIntForKey:@"noiseFloorSetting"]];
	[self setElecMultHVBias:			[decoder decodeIntForKey:@"ElecMultHVBias"]];
	[self setIonizerFocusPlateVoltage:	[decoder decodeIntForKey:@"ionizerFocusPlateVoltage"]];
	[self setIonizerIonEnergy:			[decoder decodeIntForKey:@"ionizerIonEnergy"]];
	[self setIonizerEmissionCurrent:	[decoder decodeFloatForKey:@"ionizerEmissionCurrent1"]];
	[self setIonizerElectronEnergy:		[decoder decodeIntForKey:@"ionizerElectronEnergy"]];
	[self setIonizerDegassTime:			[decoder decodeIntForKey:@"ionizerDegassTime"]];
	amus = [[decoder decodeObjectForKey:@"amus"] retain];
	[[self undoManager] enableUndoRegistration];
	
	return self;
}

- (void) encodeWithCoder:(NSCoder*)encoder
{
    [super encodeWithCoder:encoder];
    [encoder encodeInt:opMode				forKey:@"opMode"];
    [encoder encodeFloat:elecMultGain		forKey:@"elecMultGain"];
    [encoder encodeInt:numberScans			forKey:@"numberScans"];
    [encoder encodeInt:stepsPerAmu			forKey:@"stepsPerAmu"];
    [encoder encodeInt:initialMass			forKey:@"initialMass"];
    [encoder encodeInt:finalMass			forKey:@"finalMass"];
    [encoder encodeInt:noiseFloorSetting	forKey:@"noiseFloorSetting"];
    [encoder encodeInt:ionizerElectronEnergy forKey:@"ionizerElectronEnergy"];
    [encoder encodeInt:ionizerDegassTime	forKey:@"ionizerDegassTime"];
    [encoder encodeInt:elecMultHVBias			forKey:@"ElecMultHVBias"];
    [encoder encodeInt:ionizerFocusPlateVoltage forKey:@"ionizerFocusPlateVoltage"];
    [encoder encodeInt:ionizerIonEnergy			forKey:@"ionizerIonEnergy"];
    [encoder encodeFloat:ionizerEmissionCurrent	forKey:@"ionizerEmissionCurrent1"];
    [encoder encodeObject:amus					forKey:@"amus"];
}

#pragma mark •••Commands
- (void) sendIDRequest				{ [self enqueCmdString:@"ID?"]; }
- (void) sendInitComm				{ [self enqueCmdString:@"IN0"]; }	//Init communications and check HW
- (void) sendReset	
{  
	//Reset to factory settings
	[self setLastRequest:nil];
	[cmdQueue removeAllObjects];
	[self enqueCmdString:@"IN1"]; 
	[self queryAll]; 
}
- (void) sendStandBy				{ [self enqueCmdString:@"IN2"]; }  //activate standby mode
- (void) sendErrQuery				{ [self enqueCmdString:@"ER?"]; }  //returns status byte
- (void) sendRS232ErrQuery			{ [self enqueCmdString:@"EC?"]; } 
- (void) sendDetErrQuery			{ [self enqueCmdString:@"ED?"]; } 
- (void) sendFilamentErrQuery		{ [self enqueCmdString:@"EF?"]; } 
- (void) sendEMErrQuery				{ [self enqueCmdString:@"EM?"]; } 
- (void) sendPowerErrQuery			{ [self enqueCmdString:@"EP?"]; } 
- (void) sendQMFErrQuery			{ [self enqueCmdString:@"EQ?"]; } 
- (void) sendCalibrateAll			{ [self enqueCmdString:@"CA"];  } 
- (void) sendElecMultiOptionQuery	{ [self enqueCmdString:@"MO?"]; } 
- (void) sendNoiseFloorQuery		{ [self enqueCmdString:@"NF?"]; } 
- (void) sendAnalogScanPointsQuery	{ [self enqueCmdString:@"AP?"]; } 
- (void) sendHistoScanPointsQuery	{ [self enqueCmdString:@"HP?"]; } 
- (void) sendStepsPerAmuQuery		{ [self enqueCmdString:@"SA?"]; } 
- (void) sendElecMultGainQuery		{ [self enqueCmdString:@"MG?"]; } 

- (void) sendNoiseFloorSetting		 { [self send:@"NF" withInt:noiseFloorSetting];		}
- (void) sendIonizerElectronEnergy	 { [self send:@"EE" withInt:ionizerElectronEnergy]; }
- (void) sendIonizerIonEnergy		 { [self send:@"IE" withInt:ionizerIonEnergy];		}
- (void) sendIonizerFocusPlateVoltage{ [self send:@"VF" withInt:ionizerFocusPlateVoltage]; }
- (void) sendInitialMass			 { [self send:@"MI" withInt:initialMass];			}
- (void) sendFinalMass				 { [self send:@"MF" withInt:finalMass];				}
- (void) sendStepsPerAmu			 { [self send:@"SA" withInt:stepsPerAmu];			}

- (void) sendCalibrateElectrometerIVResponse { [self enqueCmdString:@"CL"]; } 

- (void) sendElecMultiGain
{
	[self enqueCmdString:[NSString stringWithFormat:@"MG%.4f",elecMultGain]];
}

- (void) startDegassing
{
	if(ionizerDegassTime>0){
		[self enqueCmdString:[NSString stringWithFormat:@"DG%d",ionizerDegassTime]];
	}
	else {
	}
}

- (void) stopDegassing
{
}

- (void) startMeasurement
{
	[self setScanNumber:1];
	[self setScanProgress:0];
	switch(opMode){
		case kRGAAnalogMode:	[self startAnalogScan];				break;
		case kRGATableMode:		[self startSingleMassMeasurement]; break;
		case kRGAHistogramMode: [self startHistogramScan];			break;
	}	
}

- (void) stopMeasurement
{
	[self setScanNumber:0];
	[self setScanProgress:0];

	switch(opMode){
		case kRGAAnalogMode:	[self stopAnalogScan];				break;
		case kRGATableMode:		[self stopSingleMassMeasurement];  break;
		case kRGAHistogramMode: [self stopHistogramScan];			break;
	}
}


- (void) queryAll
{
	[self enqueCmdString:@"EE?"];
	[self enqueCmdString:@"FL?"];
	[self enqueCmdString:@"IE?"];
	[self enqueCmdString:@"VF?"];
	[self enqueCmdString:@"HV?"];
	[self enqueCmdString:@"MO?"];
	[self enqueCmdString:@"NF?"];
	[self enqueCmdString:@"AP?"];
	[self enqueCmdString:@"HP?"];
	[self enqueCmdString:@"MG?"];
}

- (void) syncWithHW
{
	[self setIonizerElectronEnergy:		ionizerElectronEnergyRB];
	[self setIonizerEmissionCurrent:	ionizerFilamentCurrentRB];
	[self setIonizerIonEnergy:			ionizerIonEnergyRB];
	[self setIonizerFocusPlateVoltage:	ionizerFocusPlateVoltageRB];
	[self setNoiseFloorSetting:			noiseFloorSettingRB];
	[self setElecMultHVBias:			elecMultHVBiasRB];
	[self setElecMultGain:				elecMultGainRB];
}	

- (void) turnDetectorOff
{
	[self enqueCmdString:@"HV0"];
	[self enqueCmdString:@"HV?"];
}

- (void) sendDetectorParameters 
{
	if(electronMultiOption){
        if(!useDetectorDefaults){
            [self enqueCmdString:[NSString stringWithFormat:@"HV%d",elecMultHVBias]];
            [self sendNoiseFloorSetting];
        }
        else {
            [self enqueCmdString:@"HV*"];
            [self enqueCmdString:@"NF*"];

        }
        [self enqueCmdString:@"HV?"];
        [self enqueCmdString:@"NF?"];
	}
}

- (void) turnIonizerOff
{
	[self enqueCmdString:@"FL0"];
	[self enqueCmdString:@"FL?"];
}

- (void) sendIonizerParameters 
{
	if(electronMultiOption){
        if(!useDetectorDefaults){
            [self enqueCmdString:[NSString stringWithFormat:@"FL%0.2f",ionizerEmissionCurrent]];
            [self sendIonizerElectronEnergy];	 
            [self sendIonizerIonEnergy];		 
            [self sendIonizerFocusPlateVoltage];
        }
        else {
            [self enqueCmdString:@"FL*"];
            [self enqueCmdString:@"IE*"];
            [self enqueCmdString:@"EE*"];
            [self enqueCmdString:@"VF*"];        
        }
            
        [self enqueCmdString:@"EE?"];
        [self enqueCmdString:@"FL?"];
        [self enqueCmdString:@"IE?"];
        [self enqueCmdString:@"VF?"];
    }
}

- (void) dataReceived:(NSNotification*)note
{	
    if([[note userInfo] objectForKey:@"serialPort"] == serialPort){
		if(!inComingData)inComingData = [[NSMutableData data] retain];
		[inComingData appendData:[[note userInfo] objectForKey:@"data"]];
		if(expectingRawData){
			if(currentActivity == kRGATableScan){
				if([inComingData length] >= expectedRawDataLength){
					//set data
					[self addTableData:inComingData];
					[inComingData setLength:0];
					[self performSelectorOnMainThread:@selector(continueSingleMassMeasurement) withObject:nil waitUntilDone:YES ];
				}
			}
			else {
				if(expectedRawDataLength)[self setScanProgress:100*[inComingData length]/(float)expectedRawDataLength];
				if([inComingData length] >= expectedRawDataLength){
					[self setScanData:inComingData];
					[inComingData setLength:0];
					[self setScanNumber:scanNumber+1];
				}
			}
		}
		else {
			NSString* s = [[[NSString alloc] initWithData:inComingData encoding:NSASCIIStringEncoding] autorelease];
			NSUInteger endOfLine = [s rangeOfString:@"\r"].location;
			if(endOfLine != NSNotFound){
				[self processReceivedString:[s substringToIndex:endOfLine]];
				[inComingData setLength:0];
			}
		}
	}
}

- (int)  numberPointsInScan
{
	int n = [scanData length]/4;
	if(n > 1) n = n-1;
	return n;
}
- (int)  scanValueAtIndex:(int)i
{
	if(i<[scanData length]/4){
		int* p = (int*)[scanData bytes];
		return p[i];
	}
	else return 0;
}

- (int) countsInAmuTableData:(int)i
{
	id aKey = [NSNumber numberWithInt:i];
	return [[amuTableData objectForKey:aKey] count];
}

- (int) amuTable:(int)anAmu valueAtIndex:(int)i
{
	id aKey = [NSNumber numberWithInt:anAmu];
	NSArray* dataArray = [amuTableData objectForKey:aKey];
	if(i>0 && i<[dataArray count]){
		return [[dataArray objectAtIndex:i] intValue];
	}
	else return 0;
}

- (void) addAmu
{
	if(!amus) amus= [[NSMutableArray array] retain];
	id newAmu = [NSNumber numberWithInt:1];
	[self addAmu:newAmu atIndex:[amus count]];
}

- (void) addAmu:(id)anAmu atIndex:(int)anIndex
{
	if(!amus) amus= [[NSMutableArray array] retain];
	if([amus count] == 0)anIndex = 0;
	anIndex = MIN(anIndex,[amus count]);
	[[[self undoManager] prepareWithInvocationTarget:self] removeAmuAtIndex:anIndex];
	[amus insertObject:anAmu atIndex:anIndex];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelAmuAdded object:self];
}

- (void) removeAmuAtIndex:(int) anIndex
{
	id anAmu = [amus objectAtIndex:anIndex];
	[[[self undoManager] prepareWithInvocationTarget:self] addAmu:anAmu atIndex:anIndex];
	[amus removeObjectAtIndex:anIndex];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelAmuRemoved object:self];
}

- (id) amuAtIndex:(int)anIndex
{
	if(anIndex>=0 && anIndex<[amus count])return [amus objectAtIndex:anIndex];
	else return nil;
}

- (unsigned long) amuCount
{
	return [amus count];
}

- (void) replaceAmuAtIndex:(int)anIndex withAmu:(id)anObject
{
	if(anIndex>=0 && anIndex<[amus count]){
		[[[self undoManager] prepareWithInvocationTarget:self] replaceAmuAtIndex:anIndex withAmu:[amus objectAtIndex:anIndex]];
		[amus replaceObjectAtIndex:anIndex withObject:anObject];
		[[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelAmuAdded object:self];
	}
}



@end

@implementation ORRGA300Model (private)
- (void) setCurrentAmuIndex:(int)aValue
{
	currentAmuIndex = aValue;
	[[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelCurrentAmuIndexChanged object:self];

}

- (NSString*) lastRequest { return lastRequest; }
- (void) setLastRequest:(NSString*)aCmdString
{
	[lastRequest autorelease];
	lastRequest = [aCmdString copy];    
}

- (int) limitInt:(int)aValue min:(int)aMin max:(int)aMax
{
	if(aValue<aMin)		 aValue=aMin;
	else if(aValue>aMax) aValue = aMax;
	return aValue;
}

- (float) limitFloat:(float)aValue min:(float)aMin max:(float)aMax
{
	if(aValue<aMin)		 aValue=aMin;
	else if(aValue>aMax) aValue = aMax;
	return aValue;
}

- (BOOL) expectResponseFrom:(NSString*)aCmdString
{
	expectingRawData = NO;

	//some commands do not have a response
	if([aCmdString hasPrefix:@"DG0"]) return NO;
	else if([aCmdString hasPrefix:@"HS0"]) return NO;
	else if([aCmdString hasPrefix:@"MR0"]) return NO;
	else if([aCmdString hasPrefix:@"SC0"]) return NO;
	else if([aCmdString rangeOfString:@"?"].location == NSNotFound){
		if([aCmdString hasPrefix:@"MI"]) return NO;
		else if([aCmdString hasPrefix:@"MF"]) return NO;
		else if([aCmdString hasPrefix:@"NF"]) return NO;
		else if([aCmdString hasPrefix:@"SA"]) return NO;
		else if([aCmdString hasPrefix:@"MG"]) return NO;
		else if([aCmdString hasPrefix:@"HS"] || [aCmdString hasPrefix:@"SC"]){
			expectingRawData = YES;
			expectedRawDataLength = (finalMass-initialMass + 1 + 1)*4;
			return NO; //so we don't load a lastRequest
		}
		else if([aCmdString hasPrefix:@"MR"]){
			expectingRawData = YES;
			expectedRawDataLength = 4;
			return NO; //so we don't load a lastRequest
		}
	}
	return YES;
}

- (void) processOneCommandFromQueue
{
	while([cmdQueue count] > 0){
		NSString* cmdString = [cmdQueue dequeue];
		[serialPort writeDataInBackground:[cmdString dataUsingEncoding:NSASCIIStringEncoding]];
		if([self expectResponseFrom:cmdString]){
			[self setLastRequest:cmdString];
			break; //have to wait for a response
		}
	}
}

- (void) send:(NSString*)aCmd withInt:(int)aValue
{
	[self enqueCmdString:[NSString stringWithFormat:@"%@%d",aCmd,aValue]];
}

- (void) enqueCmdString:(NSString*)aString
{
	if([serialPort isOpen]){
		if(!cmdQueue) cmdQueue = [[ORSafeQueue alloc] init];
		if(![aString hasSuffix:@"\r"])aString = [aString stringByAppendingString:@"\r"];
		[cmdQueue enqueue:aString];
		if(!lastRequest)[self processOneCommandFromQueue];
	}
}

- (void) processReceivedString:(NSString*)aString
{		
	if(lastRequest) {
		if([lastRequest hasPrefix:@"ID?"])		[self processIDResponse:aString];
		else if([lastRequest hasPrefix:@"ER?"])	[self processStatusWord:aString];
		else if([lastRequest hasPrefix:@"EC?"])	[self setRs232ErrWord:	[aString intValue]];
		else if([lastRequest hasPrefix:@"ED?"])	[self setDetErrWord:	[aString intValue]];
		else if([lastRequest hasPrefix:@"EF?"])	[self setFilErrWord:	[aString intValue]];
		else if([lastRequest hasPrefix:@"EM?"])	[self setCemErrWord:	[aString intValue]];
		else if([lastRequest hasPrefix:@"EP?"])	[self setPsErrWord:		[aString intValue]];
		else if([lastRequest hasPrefix:@"EQ?"])	[self setQmfErrWord:	[aString intValue]];
		else if([lastRequest hasPrefix:@"AP?"]) [self setAnalogScanPoints:	[aString intValue]];
		else if([lastRequest hasPrefix:@"HP?"]) [self setHistoScanPoints:	[aString intValue]];
		else if([lastRequest hasPrefix:@"DG?"]) [self setIonizerDegassTime:	[aString intValue]];
		else if([lastRequest hasPrefix:@"AP?"]) [self setAnalogScanPoints:[aString intValue]];
		else if([lastRequest hasPrefix:@"HP?"]) [self setHistoScanPoints:[aString intValue]];
		else if([lastRequest hasPrefix:@"MF?"]) [self setFinalMass:[aString intValue]];
		else if([lastRequest hasPrefix:@"MI?"]) [self setInitialMass:[aString intValue]];
		else if([lastRequest hasPrefix:@"SA?"]) [self setStepsPerAmu:[aString intValue]];
		else if([lastRequest hasPrefix:@"TP?"]) [self setMeasuredIonCurrent:[aString intValue]];
		else if([lastRequest hasPrefix:@"MO?"]) [self setElectronMultiOption:[aString intValue]];
		
		else if([lastRequest hasPrefix:@"HV?"]) [self setElecMultHVBiasRB:			[aString intValue]];
		else if([lastRequest hasPrefix:@"NF?"]) [self setNoiseFloorSettingRB:		[aString intValue]];
		else if([lastRequest hasPrefix:@"MG?"]) [self setElecMultGainRB:			[aString floatValue]];
		else if([lastRequest hasPrefix:@"EE?"]) [self setIonizerElectronEnergyRB:	[aString intValue]];
		else if([lastRequest hasPrefix:@"FL?"]) [self setIonizerFilamentCurrentRB:	[aString floatValue]];
		else if([lastRequest hasPrefix:@"IE?"]) [self setIonizerIonEnergyRB:		[aString intValue]];
		else if([lastRequest hasPrefix:@"VF?"]) [self setIonizerFocusPlateVoltageRB:[aString intValue]];
		
		else if([lastRequest rangeOfString:@"?"].location == NSNotFound)	[self processStatusWord:aString];
		
		[self setLastRequest:nil];			 //clear the last request
	}

	[self processOneCommandFromQueue];	 //do the next command in the queue
}

- (void) processIDResponse:(NSString*)aString
{
	if([aString length]>=23 && [aString hasPrefix:@"SRSRGA"]){
		[self setModelNumber:	 [[aString substringWithRange:NSMakeRange(6,3)]  intValue]];
		[self setFirmwareVersion:[[aString substringWithRange:NSMakeRange(13,4)] floatValue]];
		[self setSerialNumber:	 [[aString substringWithRange:NSMakeRange(19,5)] intValue]];
	}
}

- (void) processStatusWord:(NSString*)aString
{
	[self setStatusWord:[aString intValue]];
	//have to check the bits to see if we need more info
	if(statusWord & kRGACommStatusMask)			 [self sendRS232ErrQuery];
	if(statusWord & kRGAFilamentStatusMask)		 [self sendFilamentErrQuery];
	if(statusWord & kRGAElectronMultiStatusMask) [self sendDetErrQuery];
	if(statusWord & kRGAQMFStatusMask)			 [self sendQMFErrQuery];
	if(statusWord & kRGAElectrometerStatusMask)	 [self sendDetErrQuery];
	if(statusWord & kRGA24VStatusMask)			 [self sendPowerErrQuery];
}

- (void) setElectronMultiOption:(BOOL)aElectronMultiOption
{
    electronMultiOption = aElectronMultiOption;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelElectronMultiOptionChanged object:self];
}

- (void) setSerialNumber:(int)aSerialNumber
{
    serialNumber = aSerialNumber;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelSerialNumberChanged object:self];
}

- (void) setModelNumber:(int)aModelNumber
{
    modelNumber = aModelNumber;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelModelNumberChanged object:self];
}

- (void) setFirmwareVersion:(float)aFirmwareVersion
{
    firmwareVersion = aFirmwareVersion;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelFirmwareVersionChanged object:self];
}

- (void) setHistoScanPoints:(int)aHistoScanPoints
{	
    histoScanPoints = [self limitInt:aHistoScanPoints min:1 max:255];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelHistoScanPointsChanged object:self];
}

- (void) setAnalogScanPoints:(int)aAnalogScanPoints
{
    analogScanPoints = [self limitInt:analogScanPoints min:1 max:255];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelAnalogScanPointsChanged object:self];
}

- (void) setIonizerFocusPlateVoltageRB:(int)aIonizerFocusPlateVoltageRB
{
    ionizerFocusPlateVoltageRB = aIonizerFocusPlateVoltageRB;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelIonizerFocusPlateVoltageRBChanged object:self];
}

- (void) setIonizerIonEnergyRB:(int)aIonizerIonEnergyRB
{
    ionizerIonEnergyRB = aIonizerIonEnergyRB;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelIonizerIonEnergyRBChanged object:self];
}

- (void) setIonizerElectronEnergyRB:(int)aIonizerElectronEnergyRB
{
    ionizerElectronEnergyRB = aIonizerElectronEnergyRB;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelIonizerElectronEnergyRBChanged object:self];
}

- (void) setIonizerFilamentCurrentRB:(float)aIonizerFilamentCurrentRB
{
    ionizerFilamentCurrentRB = aIonizerFilamentCurrentRB;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelIonizerFilamentCurrentRBChanged object:self];
}
- (void) setFilErrWord:(int)aFilErrWord
{
    filErrWord = aFilErrWord;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelFilErrWordChanged object:self];
}

- (void) setCemErrWord:(int)aCemErrWord
{
    cemErrWord = aCemErrWord;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelCemErrWordChanged object:self];
}

- (void) setQmfErrWord:(int)aQmfErrWord
{
    qmfErrWord = aQmfErrWord;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelQmfErrWordChanged object:self];
}

- (void) setDetErrWord:(int)aDetErrWord
{
    detErrWord = aDetErrWord;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelDetErrWordChanged object:self];
}

- (void) setPsErrWord:(int)aPsErrWord
{
    psErrWord = aPsErrWord;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelPsErrWordChanged object:self];
}

- (void) setStatusWord:(int)aStatusWord
{
    statusWord = aStatusWord;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelStatusWordChanged object:self];
}

- (void) setElecMultGainRB:(float)aElecMultGainRB
{
    elecMultGainRB = aElecMultGainRB;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelElecMultGainRBChanged object:self];
}

- (void) setElecMultHVBiasRB:(int)aElecMultHVBiasRB
{
    elecMultHVBiasRB = aElecMultHVBiasRB;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelElecMultHVBiasRBChanged object:self];
}

- (void) setNoiseFloorSettingRB:(int)aNoiseFloorSettingRB
{
    noiseFloorSettingRB = aNoiseFloorSettingRB;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelNoiseFloorSettingRBChanged object:self];
}

- (void) setRs232ErrWord:(int)aRs232ErrWord
{
    rs232ErrWord = aRs232ErrWord;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelRs232ErrWordChanged object:self];
}

- (void) setMeasuredIonCurrent:(int)aMeasuredIonCurrent
{
    measuredIonCurrent = aMeasuredIonCurrent;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelMeasuredIonCurrentChanged object:self];
}

- (void) startHistogramScan
{
	[self setCurrentActivity:kRGAHistogramScan];
	[self sendInitialMass];
	[self sendFinalMass];
	[self sendNoiseFloorSetting];
	[self sendHistoScanPointsQuery];
	[self enqueCmdString:[NSString stringWithFormat:@"HS%d",numberScans]];
}

- (void) stopHistogramScan
{
	[self setCurrentActivity:kRGAIdle];
	[self enqueCmdString:@"HS0"];
	[self setScanProgress:0];
}

- (void) startSingleMassMeasurement	
{ 
	[amuTableData release];
	amuTableData = nil;

	if([amus count]>0){
		[self setCurrentActivity:kRGATableScan];
		[self setCurrentAmuIndex:0];
		[self setScanProgress:0];
		int anAmu = [[amus objectAtIndex:currentAmuIndex] intValue];
		if(anAmu>0 && anAmu<modelNumber){
			[self enqueCmdString:[NSString stringWithFormat:@"MR%d",anAmu]];
		}
		else {
			NSLog(@"RGA: AMU in table (entry %d:%d) <0 or >%@\n",modelNumber,currentAmuIndex, [amus objectAtIndex:currentAmuIndex]);
			NSLog(@"Table Scan stopped\n");
		}
	}
	[[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelScanDataChanged object:self];
} 
					  
- (void) continueSingleMassMeasurement
{
	[self setCurrentAmuIndex:currentAmuIndex+1];

	if(currentAmuIndex>[amus count]-1){
		[self setScanNumber:scanNumber+1];
		[self setCurrentAmuIndex:0];
		[self setScanProgress:0];
	}
	
	if(scanNumber != 0 ){
		int anAmu = [[amus objectAtIndex:currentAmuIndex] intValue];
		if(anAmu>0 && anAmu<modelNumber){
			[self enqueCmdString:[NSString stringWithFormat:@"MR%d",anAmu]];
		}
		else {
			NSLog(@"RGA: AMU in table (entry %d:%d) <0 or >%@\n",modelNumber,currentAmuIndex, [amus objectAtIndex:currentAmuIndex]);
			NSLog(@"Scan Stopped\n");
			[self stopSingleMassMeasurement];
		}
		if([amus count] )[self setScanProgress:100*currentAmuIndex/[amus count]];
	}
	else [self stopSingleMassMeasurement];
	[[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelScanDataChanged object:self];

}
					  
- (void) stopSingleMassMeasurement	
{ 
	[self setCurrentActivity:kRGAIdle];
	[self enqueCmdString:@"MR0\r"];
	[self setCurrentAmuIndex:0];
	[[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelScanDataChanged object:self];
} 

- (void) startAnalogScan
{ 
	[self setCurrentActivity:kRGAAnalogScan];
	[self sendInitialMass];
	[self sendFinalMass];
	[self sendNoiseFloorSetting];
	[self sendStepsPerAmu];
	[self sendAnalogScanPointsQuery];
	[self enqueCmdString:[NSString stringWithFormat:@"SC%d",numberScans]];
} 

- (void) stopAnalogScan	
{ 
	[self setCurrentActivity:kRGAIdle];
	[self enqueCmdString:@"SC0"];
}

- (void) setCurrentActivity:(int)aCurrentActivity
{
    currentActivity = aCurrentActivity;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelCurrentActivityChanged object:self];
}

- (void) setScanData:(NSData*)aScanData
{
	[scanData autorelease];
    scanData = [aScanData copy];
	
    [[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelScanDataChanged object:self];
}

- (void) addTableData:(NSData*)data
{
	int* p = (int*)[data bytes];
	NSNumber* dataAsInt = [NSNumber numberWithInt:p[0]];
	if(!amuTableData) amuTableData = [[NSMutableDictionary dictionary]retain];
	NSNumber* amuKey = [NSNumber numberWithInt:currentAmuIndex];
	NSMutableArray* amuData = [amuTableData objectForKey:amuKey];
	if(!amuData) {
		amuData = [NSMutableArray array];
		[amuData addObject:dataAsInt];
		[amuTableData setObject:amuData forKey:amuKey];
	}
	else [amuData addObject:dataAsInt];
	[[NSNotificationCenter defaultCenter] postNotificationName:ORRGA300ModelScanDataChanged object:self];
}

@end