//--------------------------------------------------------
// ORSynClockController
// Created by Mark  A. Howe on Fri Jul 22 2005 / Julius Hartmann, KIT, November 2017
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of
//Washington at the Center for Experimental Nuclear Physics and
//Astrophysics (CENPA) sponsored in part by the United States
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020.
//The University has certain rights in the program pursuant to
//the contract and the program should not be copied or distributed
//outside your organization.  The DOE and the University of
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty,
//express or implied, or assume any liability or responsibility
//for the use of this softwarePulser.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORRefClockController.h"
#import "ORRefClockModel.h"
#import "ORSerialPort.h"

@implementation ORRefClockController

#pragma mark ***Initialization



- (id) init
{
	self = [super initWithWindowNibName:@"RefClock"];

	// todo
	//[NSBundle loadNibNamed:@"MotoGPSView" owner:self]; [someview addSubview:myView];
//    NSNib *nib = [[NSNib alloc] initWithNibNamed:@"MotoGPS" bundle:nil];
//    [motoGPSView addSubview:nib];
    
//    contentViewController = [[ContentViewController alloc] initWithNibName:@"ContentView" bundle:nil];
//    [[contentViewController view] setFrame:[contentView frame]];
//    [[self view] replaceSubview:contentView with:[contentViewController view]];
    
  //NSLog(@"RefClockController::init A\n");
  //motoGPSController = [[ORMotoGPSController alloc] init];  //todo...
    
    //motoGPSView  = [motoGPSController view];
    //[[motoGPSController view] setFrame:[motoGPSView frame]];
    //[[self.contentViewController view] replaceSubview:motoGPSView with:[motoGPSController view]];
    //[motoGPSView addSubview:[motoGPSController view]];
    
  //motoGPSView = motoGPSController.view;
    
    
       //[motoGPSView dra];
    ////[motoGPSView addSubview: [motoGPSController view]];
    
    NSLog(@"RefClockController::init B\n");
    
	return self;
}

- (void) awakeFromNib
{
    [super awakeFromNib];
    [motoGPSController  setModel: [model motoGPSModel]];
    [synClockController setModel: [model synClockModel]];
}

- (void) setModel:(ORRefClockModel*)aModel
{
    [super setModel:aModel];
    [motoGPSController  setModel: [aModel motoGPSModel]];
    [synClockController setModel: [aModel synClockModel]];
}

- (void) checkGlobalSecurity
{
    BOOL secure = [gSecurity globalSecurityEnabled];
    [gSecurity setLock:ORRefClockLock to:secure];
    [lockButton setEnabled:secure];
}


#pragma mark ***Notifications

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];

    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRefClockLock
                        object: self];

    [notifyCenter addObserver : self
                     selector : @selector(portNameChanged:)
                         name : ORSerialPortModelPortNameChanged
                        object: model];

    [notifyCenter addObserver : self
                     selector : @selector(portStateChanged:)
                         name : ORSerialPortModelPortStateChanged
                       object : model];

		// [notifyCenter addObserver : self
		//                  selector : @selector(trackModeChanged:)
		//                      name : ORSynClockModelTrackModeChanged
		// 		    				 		object: model];
    //
		//  [notifyCenter addObserver : self
		// 		 	            selector : @selector(syncChanged:)
		// 		 	                name : ORSynClockModelSyncChanged
		// 		 	 	 						 object: model];
    //
		//  [notifyCenter addObserver : self
		// 				 				  selector : @selector(alarmWindowChanged:)
		// 				 							name : ORSynClockModelAlarmWindowChanged
		// 				             object: model];
    //
    // [notifyCenter addObserver : self
    //                  selector : @selector(statusChanged:)
    //                      name : ORSynClockModelStatusChanged
		// 										object: model];
    //
		// [notifyCenter addObserver : self
    //                  selector : @selector(statusPollChanged:)
    //                      name : ORSynClockModelStatusPollChanged
    //         						object: model];
    //
    //
		// // [notifyCenter addObserver : self  // todo: not needed/ only output (input deactivated)
		// // 								 selector : @selector(statusOutputChanged:)
		// // 										 name : ORSynClockModelStatusOutputChanged
		// // 				object: model];
    //
		// [notifyCenter addObserver : self
		// 				         selector : @selector(deviceIDButtonChanged:)
		// 				             name : ORSynClockModelDeviceIDButtonChanged
		// 			 						 	object: model];
    //
		// [notifyCenter addObserver : self  // todo: not needed/ only output (input deactivated)
		// 								 selector : @selector(resetChanged:)
		// 										 name : ORSynClockModelResetChanged
		// 										object: model];

         [notifyCenter addObserver : self
                              selector : @selector(verboseChanged:)
                                  name : ORRefClockModelVerboseChanged
                                 object: model];  // object: nil];

		// todo: one verbose for the whole nib

}

- (void) updateWindow
{
    [super updateWindow];
    [self lockChanged:nil];
    [self portStateChanged:nil];
    [self portNameChanged:nil];
	// [self statusChanged:nil];

	// [self verboseChanged:nil];
}

- (void) setButtonStates
{
    //BOOL runInProgress  = [gOrcaGlobals runInProgress];
    
    //BOOL runInProgress = [gOrcaGlobals runInProgress];
    BOOL lockedOrRunningMaintenance = [gSecurity runInProgressButNotType:eMaintenanceRunType orIsLocked:ORRefClockLock];
    BOOL locked = [gSecurity isLocked:ORRefClockLock];
    [lockButton setState: locked];
    [openPortButton setEnabled:    !locked];
    [verboseCB setEnabled:!lockedOrRunningMaintenance];
    
    [motoGPSController setButtonStates];
    [synClockController setButtonStates];
}

- (void) trackModeChanged:(NSNotification*)aNote
{
  //   [frequencyStepper setFloatValue: [model frequency]];
	// [frequencyField   setFloatValue: [model frequency]];
}

- (void) syncChanged:(NSNotification*)aNote
{
  //   [dutyCycleStepper setIntValue: [model dutyCycle]];
	// [dutyCycleField   setIntValue: [model dutyCycle]];
}

// - (void) amplitudeChanged:(NSNotification*)aNote
// {
//     [amplitudeStepper setFloatValue: [model amplitude]];
// 	[amplitudeField   setFloatValue: [model amplitude]];
// }

- (void) alarmWindowChanged:(NSNotification*)aNote
{

}

- (void) statusChanged:(NSNotification*)aNote
{

	//[signalFormPU selectItemAtIndex: [model signalForm]];
	//[loadWaveButton setEnabled: NO];
}

- (void) statusPollChanged:(NSNotification*)aNote
{
 // [signalFormPU selectItemAtIndex: [model signalForm]];
 // [loadWaveButton setEnabled: YES];

}

- (void) deviceIDButtonChanged:(NSNotification*)aNote
{

}

- (void) resetChanged:(NSNotification*)aNote
{

}


- (void) portStateChanged:(NSNotification*)aNotification
{
        if([model serialPort]){
            [openPortButton setEnabled:YES];

            if([[model serialPort] isOpen]){
                [openPortButton setTitle:@"Close"];
                [portStateField setTextColor:[NSColor colorWithCalibratedRed:0.0 green:.8 blue:0.0 alpha:1.0]];
                [portStateField setStringValue:@"Open"];
            }
            else {
                [openPortButton setTitle:@"Open"];
                [portStateField setStringValue:@"Closed"];
                [portStateField setTextColor:[NSColor redColor]];
            }
        }
        else {
            [openPortButton setEnabled:NO];
            [portStateField setTextColor:[NSColor blackColor]];
            [portStateField setStringValue:@"---"];
            [openPortButton setTitle:@"---"];
        }
       [self setButtonStates];
}

- (void) portNameChanged:(NSNotification*)aNotification
{
    [portNameField setStringValue:[model portName]];
}

- (void) lockChanged:(NSNotification*)aNotification  // todo
{
    [self setButtonStates];
}

- (void) verboseChanged:(NSNotification*)aNote
{
	[verboseCB setIntValue:[model verbose]];
}

#pragma mark ***Actions
- (IBAction) trackModeAction:(id)sender
{
}

- (IBAction) syncAction:(id)sender
{
}

- (IBAction) alarmWindowAction:(id)sender
{
}

- (IBAction) statusAction:(id)sender
{
  //[model requestStatus];
}

- (IBAction) statusPollAction:(id)sender
{
}

- (IBAction) deviceIDAction:(id)sender
{
}

- (IBAction) resetAction:(id)sender
{
}

- (IBAction) openPortAction:(id)sender
{
    [model openPort:![[model serialPort] isOpen]];
}

- (IBAction) lockAction:(id) sender
{
    [gSecurity tryToSetLock:ORRefClockLock to:[sender intValue] forWindow:[self window]];
}

- (IBAction) verboseAction:(id)sender;
{
	[model setVerbose:[sender intValue]];
}

- (IBAction) portNameAction:(id)sender;
{
    [model setPortName:[sender stringValue]];
}
@end


