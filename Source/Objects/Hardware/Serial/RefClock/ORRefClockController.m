//--------------------------------------------------------
// ORSynClockController
// Created by Mark  A. Howe on Fri Jul 22 2005 / Julius Hartmann, KIT, November 2017
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of
//Washington at the Center for Experimental Nuclear Physics and
//Astrophysics (CENPA) sponsored in part by the United States
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020.
//The University has certain rights in the program pursuant to
//the contract and the program should not be copied or distributed
//outside your organization.  The DOE and the University of
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty,
//express or implied, or assume any liability or responsibility
//for the use of this softwarePulser.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORRefClockController.h"
#import "ORRefClockModel.h"
#import "ORSerialPort.h"
#import "ORValueBarGroupView.h"
#import "ORAxis.h"

@implementation ORRefClockController

#pragma mark ***Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"RefClock"];
    
    //NSLog(@"RefClockController::init B\n");
    
	return self;
}

- (void) awakeFromNib
{
    [super awakeFromNib];
    [motoGPSController  setModel: [model motoGPSModel]];
    [synClockController setModel: [model synClockModel]];
    
    [[queueBarGraph xAxis] setRngLow:0 withHigh:100];
    [[queueBarGraph xAxis] setLog:YES];

}

- (void) setModel:(ORRefClockModel*)aModel
{
    [super setModel:aModel];
    [motoGPSController  setModel: [aModel motoGPSModel]];
    [synClockController setModel: [aModel synClockModel]];
}

#pragma mark ***Notifications
- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];

    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRefClockLock
                        object: model];

    [notifyCenter addObserver : self
                     selector : @selector(portNameChanged:)
                         name : ORSerialPortModelPortNameChanged
                        object: model];

    [notifyCenter addObserver : self
                     selector : @selector(portStateChanged:)
                         name : ORSerialPortModelPortStateChanged
                       object : model];

     [notifyCenter addObserver : self
                      selector : @selector(verboseChanged:)
                          name : ORRefClockModelVerboseChanged
                         object: model];
    
    [notifyCenter addObserver : self
                     selector : @selector(queueCountChanged:)
                         name : ORRefClockModelUpdatedQueue
                       object : model];
}

- (void) updateWindow
{
    [super updateWindow];
    [self lockChanged:nil];
    [self portStateChanged:nil];
    [self portNameChanged:nil];
    [self verboseChanged:nil];
    [self queueCountChanged:nil];
}

- (void) queueCountChanged:(NSNotification*)aNote
{
    [queueBarGraph setNeedsDisplay:YES];
}

- (void) checkGlobalSecurity
{
    BOOL secure = [gSecurity globalSecurityEnabled];
    [gSecurity setLock:ORRefClockLock to:secure];
    [lockButton setEnabled:secure];
}

- (void) setButtonStates
{
    //BOOL runInProgress  = [gOrcaGlobals runInProgress];
    BOOL lockedOrRunningMaintenance = [gSecurity runInProgressButNotType:eMaintenanceRunType orIsLocked:ORRefClockLock];
    BOOL locked = [gSecurity isLocked:ORRefClockLock];
    
    [lockButton setState:       locked];
    [openPortButton setEnabled: !locked];
    [verboseCB setEnabled:      !lockedOrRunningMaintenance];
    
    [motoGPSController setButtonStates];
    [synClockController setButtonStates];
}

- (void) portStateChanged:(NSNotification*)aNotification
{
    if([model serialPort]){
        [openPortButton setEnabled:YES];

        if([[model serialPort] isOpen]){
            [openPortButton setTitle:@"Close"];
            [portStateField setTextColor:[NSColor colorWithCalibratedRed:0.0 green:.8 blue:0.0 alpha:1.0]];
            [portStateField setStringValue:@"Open"];
        }
        else {
            [openPortButton setTitle:@"Open"];
            [portStateField setStringValue:@"Closed"];
            [portStateField setTextColor:[NSColor redColor]];
        }
    }
    else {
        [openPortButton setEnabled:NO];
        [portStateField setTextColor:[NSColor blackColor]];
        [portStateField setStringValue:@"---"];
        [openPortButton setTitle:@"---"];
    }
    [self setButtonStates];
}

- (void) portNameChanged:(NSNotification*)aNotification
{
    [portNameField setStringValue:[model portName]];
}

- (void) lockChanged:(NSNotification*)aNotification  // todo
{
    [self setButtonStates];
}

- (void) verboseChanged:(NSNotification*)aNote
{
	[verboseCB setIntValue:[model verbose]];
}

#pragma mark ***Actions
- (IBAction) openPortAction:(id)sender
{
    [model openPort:![[model serialPort] isOpen]];
}

- (IBAction) lockAction:(id) sender
{
    [gSecurity tryToSetLock:ORRefClockLock to:[sender intValue] forWindow:[self window]];
}

- (IBAction) verboseAction:(id)sender;
{
	[model setVerbose:[sender intValue]];
}

- (IBAction) portNameAction:(id)sender;
{
    [model setPortName:[sender stringValue]];
}

#pragma mark •••Data Source for queue
- (double) doubleValue
{
    return [model queueCount];
}

@end


