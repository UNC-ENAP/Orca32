//--------------------------------------------------------
// ORProXR16SSRController
// Created by Mark  A. Howe on Thurs June 21, 2012
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2012 University of North Carolina. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//North Carolina sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//North Carolina reserve all rights in the program. Neither the authors,
//University of North Carolina, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORProXR16SSRController.h"
#import "ORProXR16SSRModel.h"
#import "ORSerialPortList.h"
#import "ORSerialPort.h"
#import "ORDotImage.h"

@interface ORProXR16SSRController (private)
- (void) populatePortListPopup;
@end

@implementation ORProXR16SSRController

#pragma mark ***Initialization
- (id) init
{
	self = [super initWithWindowNibName:@"ProXR16SSR"];
	return self;
}

- (void) dealloc
{
	[[NSNotificationCenter defaultCenter] removeObserver:self];
	[super dealloc];
}

- (void) awakeFromNib
{
    [self populatePortListPopup];
    int i;
	for(i=0;i<16;i++){
        [[outletNameMatrix cellAtRow:i column:0] setTag:i];
        [[stateMatrix cellAtRow:i column:0] setTag:i];
        [[turnOnOffMatrix cellAtRow:i column:0] setTag:i];
    }
	[super awakeFromNib];
}

#pragma mark ***Notifications

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORProXR16SSRLock
                        object: nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(portNameChanged:)
                         name : ORProXR16SSRModelPortNameChanged
                        object: nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(portStateChanged:)
                         name : ORSerialPortStateChanged
                       object : nil];

    [notifyCenter addObserver: self
                     selector:@selector(relayChanged:)
                         name:ORProXR16SSRModelRelayStateChanged
                       object:nil];
	
    [notifyCenter addObserver: self
                     selector:@selector(allRelaysChanged:)
                         name:ORProXR16SSRModelUpdateAllRelaysChanged
                       object:nil];	

    [notifyCenter addObserver : self
                     selector : @selector(outletNameChanged:)
                         name : ORProXR16SSRModelOutletNameChanged
						object: model];	
	
}

- (void) setModel:(id)aModel
{
	[super setModel:aModel];
	[[self window] setTitle:[NSString stringWithFormat:@"ProXR16SSR (Unit %d)",[model uniqueIdNumber]]];
}

- (void) updateWindow
{
    [super updateWindow];
    [self lockChanged:nil];
    [self portStateChanged:nil];
    [self portNameChanged:nil];
    [self allRelaysChanged:nil];
	[self outletNameChanged:nil];
}


- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORProXR16SSRLock to:secure];
    [lockButton setEnabled:secure];
}

- (void) lockChanged:(NSNotification*)aNotification
{
    BOOL locked = [gSecurity isLocked:ORProXR16SSRLock];
    [lockButton setState:			locked];
    [portListPopup setEnabled:		!locked];
    [openPortButton setEnabled:		!locked];    
    [turnOnOffMatrix setEnabled:	!locked];    
    [outletNameMatrix setEnabled:	!locked];    
}

- (void) portStateChanged:(NSNotification*)aNotification
{
    if(aNotification == nil || [aNotification object] == [model serialPort]){
        if([model serialPort]){
            [openPortButton setEnabled:YES];
            
            if([[model serialPort] isOpen]){
                [openPortButton setTitle:@"Close"];
                [portStateField setTextColor:[NSColor colorWithCalibratedRed:0.0 green:.8 blue:0.0 alpha:1.0]];
                [portStateField setStringValue:@"Open"];
            }
            else {
                [openPortButton setTitle:@"Open"];
                [portStateField setStringValue:@"Closed"];
                [portStateField setTextColor:[NSColor redColor]];
            }
        }
        else {
            [openPortButton setEnabled:NO];
            [portStateField setTextColor:[NSColor blackColor]];
            [portStateField setStringValue:@"---"];
            [openPortButton setTitle:@"---"];
        }
    }
}
- (void) outletNameChanged:(NSNotification*)aNote
{
	short i;
	for(i=0;i<16;i++){
		[[outletNameMatrix cellWithTag:i] setStringValue: [model outletName:i]];
	}	
}
- (void) allRelaysChanged:(NSNotification*)aNote
{
	int i;
	for(i=0;i<16;i++){
		[[stateMatrix cellWithTag:i] setStringValue:[model relayState:i]?@"Open":@"Closed"];
		[[turnOnOffMatrix cellWithTag:i] setTitle:![model relayState:i]?@"Open":@"Close"];
    }
	[self setStateViews];
}

- (void) setStateViews
{
	unsigned short aMask0=0;
	unsigned short aMask1=0;
	int i;
	for(i=0;i<8;i++){
		if([model relayState:i])	aMask0 |= (0x1<<i);
		if([model relayState:i+8])	aMask1 |= (0x1<<i);
	}
	[stateView0_7		setStateMask: aMask0];
	[stateView8_15		setStateMask: aMask1];
	[stateViewSmall0_7	setStateMask: aMask0];
	[stateViewSmall8_15 setStateMask: aMask1];
}


- (void) relayChanged:(NSNotification*)aNote
{
    if(aNote){
        NSDictionary* userInfo = [aNote userInfo];
        int chan = [[userInfo objectForKey:@"Channel"] intValue];
        [[stateMatrix cellWithTag:chan] setStringValue:[model relayState:chan]?@"Open":@"Closed"];
 		[[turnOnOffMatrix cellWithTag:chan] setTitle:![model relayState:chan]?@"Open":@"Close"];
   }
    else {
        int i;
        for(i=0;i<16;i++){
            [[stateMatrix cellWithTag:i] setStringValue:[model relayState:i]?@"Open":@"Closed"];
			[[turnOnOffMatrix cellWithTag:i] setTitle:![model relayState:i]?@"Open":@"Close"];
       }
    }
	[self setStateViews];
}

- (void) portNameChanged:(NSNotification*)aNote
{
    NSString* portName = [model portName];
    
	NSEnumerator *enumerator = [ORSerialPortList portEnumerator];
	ORSerialPort *aPort;
    
    [portListPopup selectItemAtIndex:0]; //the default
    while (aPort = [enumerator nextObject]) {
        if([portName isEqualToString:[aPort name]]){
            [portListPopup selectItemWithTitle:portName];
            break;
        }
	}  
    [self portStateChanged:nil];
}

#pragma mark ***Actions
- (IBAction) lockAction:(id) sender
{
    [gSecurity tryToSetLock:ORProXR16SSRLock to:[sender intValue] forWindow:[self window]];
}

- (IBAction) portListAction:(id) sender
{
    [model setPortName: [portListPopup titleOfSelectedItem]];
}

- (IBAction) openPortAction:(id)sender
{
    [model openPort:![[model serialPort] isOpen]];
}

-(IBAction) outletNameAction:(id)sender
{
	int tag = [[sender selectedCell] tag];
	[model setOutlet:tag name:[[sender selectedCell]stringValue]];
}

- (IBAction) turnOnOffAction:(id)sender
{
	int chan = [[turnOnOffMatrix selectedCell] tag];
	int state = [model relayState:chan];
	if(state)[model turnRelayOff:chan];
	else     [model turnRelayOn:chan];
}

@end

@implementation ORProXR16SSRController (private)
- (void) populatePortListPopup
{
	NSEnumerator *enumerator = [ORSerialPortList portEnumerator];
	ORSerialPort *aPort;
    [portListPopup removeAllItems];
    [portListPopup addItemWithTitle:@"--"];
    
	while (aPort = [enumerator nextObject]) {
        [portListPopup addItemWithTitle:[aPort name]];
	}    
}
@end

@implementation ProXR16SSRStateView
- (id) initWithFrame:(NSRect)frame {
    self = [super initWithFrame:frame];
	[self setUpLights];
    return self;
}

- (void) dealloc
{
    [offLight release];
    [onLight release];
    [super dealloc];
}

- (void) setUpLights
{
	onLight = [[ORDotImage bigDotWithColor:[NSColor greenColor]] retain];
	[onLight setScalesWhenResized:YES];
	[onLight setSize:NSMakeSize(20,20)];
	offLight = [[ORDotImage bigDotWithColor:[NSColor lightGrayColor]] retain];
	[offLight setScalesWhenResized:YES];
	[offLight setSize:NSMakeSize(20,20)];
}

- (void) setStateMask:(unsigned char)aMask
{
    stateMask = aMask;
    [self setNeedsDisplay:YES];
}

- (void) drawRect:(NSRect)rect 
{    
    [super drawRect:rect];
    NSRect frame = [self bounds];
    NSRect sourceRect = NSMakeRect(0,0,[onLight size].width,[onLight size].height);
	int i;
	for(i=0;i<8;i++){
		BOOL state = stateMask & (1<<i);
		if(state){
			[onLight drawAtPoint:frame.origin fromRect:sourceRect operation:NSCompositeSourceOver fraction:1];
		}
		else {
			[offLight drawAtPoint:frame.origin fromRect:sourceRect operation:NSCompositeSourceOver fraction:1];
		}
		frame.origin.x += 34;
	}
}

@end

@implementation ProXR16SSRStateViewSmall
- (void) setUpLights
{
	onLight = [[ORDotImage vRectWithColor:[NSColor greenColor]] retain];
	[onLight setScalesWhenResized:YES];
	[onLight setSize:NSMakeSize(5,17)];
	offLight = [[ORDotImage vRectWithColor:[NSColor lightGrayColor]] retain];
	[offLight setScalesWhenResized:YES];
	[offLight setSize:NSMakeSize(5,17)];
}

- (void) drawRect:(NSRect)rect 
{    
    [super drawRect:rect];
    NSRect frame = [self bounds];
    NSRect sourceRect = NSMakeRect(0,0,[onLight size].width,[onLight size].height);
	int i;
	for(i=0;i<8;i++){
		BOOL state = stateMask & (1<<i);
		if(state){
			[onLight drawAtPoint:frame.origin fromRect:sourceRect operation:NSCompositeSourceOver fraction:1];
		}
		else {
			[offLight drawAtPoint:frame.origin fromRect:sourceRect operation:NSCompositeSourceOver fraction:1];
		}
		frame.origin.x += 5;
	}
}

@end




