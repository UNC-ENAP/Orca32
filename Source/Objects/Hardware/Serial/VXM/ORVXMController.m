//--------------------------------------------------------
// ORVXMController
// Created by Mark  A. Howe on Fri Jul 22 2005
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORVXMController.h"
#import "ORVXMModel.h"
#import "ORAxis.h"
#import "ORSerialPortList.h"
#import "ORSerialPort.h"
#import "SMPieChartView.h"

#define __CARBONSOUND__ //temp until undated to >10.3
#import <Carbon/Carbon.h>

@interface ORVXMController (private)
- (void) populatePortListPopup;
#if !defined(MAC_OS_X_VERSION_10_6) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_6 // 10.6-specific
- (void)openPanelDidEnd:(NSOpenPanel *)sheet returnCode:(int)returnCode contextInfo:(void  *)contextInfo;
#endif
@end

@implementation ORVXMController

#pragma mark ***Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"VXM"];
	return self;
}

- (void) dealloc
{
	[[NSNotificationCenter defaultCenter] removeObserver:self];
	[super dealloc];
}

- (void) awakeFromNib
{
    [self populatePortListPopup];
	
	[motorPie1 refreshDisplay:self];
	[motorPie2 refreshDisplay:self];
	
    [super awakeFromNib];
}

#pragma mark ***Notifications

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
    [notifyCenter addObserver : self
                     selector : @selector(updateButtons:)
                         name : ORRunStatusChangedNotification
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(updateButtons:)
                         name : ORVXMLock
                        object: nil];

    [notifyCenter addObserver : self
                     selector : @selector(portNameChanged:)
                         name : ORVXMModelPortNameChanged
                        object: nil];

    [notifyCenter addObserver : self
                     selector : @selector(portStateChanged:)
                         name : ORSerialPortStateChanged
                       object : nil];
                                              
    [notifyCenter addObserver : self
                     selector : @selector(goingHomeChanged:)
                         name : ORVXMModelGoingHomeChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(positionChanged:)
                         name : ORVXMModelPositionChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(cmdPositionChanged:)
                         name : ORVXMModelCmdPositionChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(absMotionChanged:)
                         name : ORVXMModelAbsMotionChanged
                       object : model];
   [notifyCenter addObserver : self
                     selector : @selector(cmdFileChanged:)
                         name : ORVXMModelCmdFileChanged
                       object : model];


   [notifyCenter addObserver : self
                     selector : @selector(patternChanged:)
                         name : ORVXMModelPatternChanged
                       object : model];

   [notifyCenter addObserver : self
                     selector : @selector(dwellTimeChanged:)
                         name : ORVXMModelDwellTimeChanged
                       object : model];
                       
   [notifyCenter addObserver : self
                     selector : @selector(optionsChanged:)
                         name : ORVXMModelOptionMaskChanged
                       object : model];
                       
   [notifyCenter addObserver : self
                     selector : @selector(patternTypeChanged:)
                         name : ORVXMModelPatternTypeChanged
                       object : model];

   [notifyCenter addObserver : self
                     selector : @selector(endEditing)
                         name : ORVXMModelEndEditing
                       object : model];

   [notifyCenter addObserver : self
                     selector : @selector(enabledMaskChanged:)
                         name : ORVXMModelEnabledMaskChanged
                       object : model];

   [notifyCenter addObserver : self
                     selector : @selector(conversionChanged:)
                         name : ORVXMModelConversionChanged
                       object : model];


   [notifyCenter addObserver : self
                     selector : @selector(fullScaleChanged:)
                         name : ORVXMModelFullScaleChanged
                       object : model];
    
    [notifyCenter addObserver : self
                     selector : @selector(queryInProgressChanged:)
                         name : ORVXMModelQueryInProgressChanged
                       object : model];  
    
    [notifyCenter addObserver : self
                     selector : @selector(queryInProgressChanged:)
                         name : ORVXMModelLastMotorQueryChanged
                       object : model];  
    
    [notifyCenter addObserver : self
                     selector : @selector(speedChanged:)
                         name : ORVXMModelMotorSpeedChanged
                       object : model];      

}

- (void) updateWindow
{
    [super updateWindow];
    [self updateButtons:nil];
    [self portStateChanged:nil];
    [self portNameChanged:nil];
    [self positionChanged:nil];
    [self cmdPositionChanged:nil];
    [self absMotionChanged:nil];
    [self goingHomeChanged:nil];
    [self cmdFileChanged:nil];
    [self patternTypeChanged:nil];
    [self optionsChanged:nil];
    [self patternChanged:nil];
    [self dwellTimeChanged:nil];
    [self conversionChanged:nil];
    [self fullScaleChanged:nil];
    [self enabledMaskChanged:nil];
    [self queryInProgressChanged:nil];
    [self speedChanged:nil];
	
}

- (void) queryInProgressChanged:(NSNotification*)aNotification
{
	[queryInProgress1 setStringValue:([model queryInProgress] & [model lastMotorQuery]==0)?@"Query":@""];
	[queryInProgress2 setStringValue:([model queryInProgress] & [model lastMotorQuery]==1)?@"Query":@""];
}


- (void) conversionChanged:(NSNotification*)aNotification
{
	[[conversionMatrix cellWithTag:0] setFloatValue:[model conversion].x];
	[[conversionMatrix cellWithTag:1] setFloatValue:[model conversion].y];
}

- (void) fullScaleChanged:(NSNotification*)aNotification
{
	[[fullScaleMatrix cellWithTag:0] setFloatValue:[model fullScale].x];
	[[fullScaleMatrix cellWithTag:1] setFloatValue:[model fullScale].y];
}

- (void) speedChanged:(NSNotification*)aNotification
{
	[[speedMatrix cellWithTag:0] setFloatValue:[model motorSpeed].x];
	[[speedMatrix cellWithTag:1] setFloatValue:[model motorSpeed].y];
}

- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORVXMLock to:secure];
    [lockButton setEnabled:secure];
}

- (void) updateButtons:(NSNotification*)aNotification
{

    BOOL runInProgress = [gOrcaGlobals runInProgress];
    BOOL lockedOrRunningMaintenance = [gSecurity runInProgressButNotType:eMaintenanceRunType orIsLocked:ORVXMLock];
    BOOL locked = [gSecurity isLocked:ORVXMLock];
	BOOL motor0Enabled = [model isMotorEnabled:0];
	BOOL motor1Enabled = [model isMotorEnabled:1];
	
    [lockButton setState: locked];

    [portListPopup setEnabled:!locked];
    [openPortButton setEnabled:!locked];
    [getPositionButton setEnabled:!locked];
    [getHomeButton setEnabled:!locked];
    [absMatrix setEnabled:!locked];
    [goButton setEnabled:!locked];
    [selectCmdFileButton setEnabled:!locked];
    [selectCmdFileButton1 setEnabled:!locked];
    [runCmdFileButton setEnabled:!locked];
    [patternTypeMatrix setEnabled:!locked];
    [optionMatrix setEnabled:!locked];
    [dwellTimeField setEnabled:!lockedOrRunningMaintenance];
    
    [cmdXValueField setEnabled:!locked & motor0Enabled];
	[[patternMatrix cellWithTag:0] setEnabled:!locked & motor0Enabled];
	[[patternMatrix cellWithTag:1] setEnabled:!locked & motor0Enabled];
	[[patternMatrix cellWithTag:2] setEnabled:!locked & motor0Enabled];
	[[conversionMatrix cellWithTag:0] setEnabled:!locked & motor0Enabled];
	[[fullScaleMatrix cellWithTag:0] setEnabled:!locked & motor0Enabled];
	[[speedMatrix cellWithTag:0] setEnabled:!locked & motor0Enabled];

    [cmdYValueField setEnabled:!locked & motor1Enabled];
	[[patternMatrix cellWithTag:3] setEnabled:!locked & motor1Enabled];
	[[patternMatrix cellWithTag:4] setEnabled:!locked & motor1Enabled];
	[[patternMatrix cellWithTag:5] setEnabled:!locked & motor1Enabled];
	[[conversionMatrix cellWithTag:1] setEnabled:!locked & motor1Enabled];
	[[fullScaleMatrix cellWithTag:1] setEnabled:!locked & motor1Enabled];
	[[speedMatrix cellWithTag:1] setEnabled:!locked & motor1Enabled];


    NSString* s = @"";
    if(lockedOrRunningMaintenance){
        if(runInProgress && ![gSecurity isLocked:ORVXMLock])s = @"Not in Maintenance Run.";
    }
    [lockDocField setStringValue:s];

}

- (void) patternTypeChanged:(NSNotification*)aNotification
{
	[patternTypeMatrix selectCellWithTag:[model patternType]];
}

- (void) patternChanged:(NSNotification*)aNotification
{
	[[patternMatrix cellWithTag:0] setFloatValue:[model startPoint].x];
	[[patternMatrix cellWithTag:1] setFloatValue:[model endPoint].x];
	[[patternMatrix cellWithTag:2] setFloatValue:[model delta].x];

	[[patternMatrix cellWithTag:3] setFloatValue:[model startPoint].y];
	[[patternMatrix cellWithTag:4] setFloatValue:[model endPoint].y];
	[[patternMatrix cellWithTag:5] setFloatValue:[model delta].y];
}

- (void) dwellTimeChanged:(NSNotification*)aNotification
{
	[dwellTimeField setFloatValue:[model dwellTime]];
}


- (void) optionsChanged:(NSNotification*)aNotification
{
	int i;
	for(i=0;i<[optionMatrix numberOfRows];i++){
		[[optionMatrix cellWithTag:i] setState: [model optionSet:i]];	
	}
}

- (void) absMotionChanged:(NSNotification*)aNotification
{
    [absMatrix selectCellWithTag:[model absMotion]];
    if([model absMotion]){
        [moveLabelField setStringValue:@"Go To:"];
        [goButton setTitle:@"Go To"];
    }
    else {
        [moveLabelField setStringValue:@"Move:"];
        [goButton setTitle:@"Move"];
    }
}

- (void) cmdPositionChanged:(NSNotification*)aNotification
{
    [cmdXValueField setFloatValue: [model cmdPosition].x];
    [cmdYValueField setFloatValue: [model cmdPosition].y];
}

- (void) portStateChanged:(NSNotification*)aNotification
{
    if(aNotification == nil || [aNotification object] == [model serialPort]){
        if([model serialPort]){
            [openPortButton setEnabled:YES];

            if([[model serialPort] isOpen]){
                [openPortButton setTitle:@"Close"];
                [portStateField setTextColor:[NSColor colorWithCalibratedRed:0.0 green:.8 blue:0.0 alpha:1.0]];
                [portStateField setStringValue:@"Open"];
            }
            else {
                [openPortButton setTitle:@"Open"];
                [portStateField setStringValue:@"Closed"];
                [portStateField setTextColor:[NSColor redColor]];
            }
        }
        else {
            [openPortButton setEnabled:NO];
            [portStateField setTextColor:[NSColor blackColor]];
            [portStateField setStringValue:@"---"];
            [openPortButton setTitle:@"---"];
        }
    }
}

- (void) portNameChanged:(NSNotification*)aNotification
{
    NSString* portName = [model portName];
    
	NSEnumerator *enumerator = [ORSerialPortList portEnumerator];
	ORSerialPort *aPort;

    [portListPopup selectItemAtIndex:0]; //the default
    while (aPort = [enumerator nextObject]) {
        if([portName isEqualToString:[aPort name]]){
            [portListPopup selectItemWithTitle:portName];
            break;
        }
	}  
    [self portStateChanged:nil];
}

- (void) positionChanged:(NSNotification*)aNotification
{
	[motorPie1 refreshDisplay:self];
	[motorPie2 refreshDisplay:self];
	if(![model goingHome]){
		[xPositionField setFloatValue:[model xyPosition].x];
		[yPositionField setFloatValue:[model xyPosition].y];
	}
}

- (void) goingHomeChanged:(NSNotification*)aNotification
{
	[motorPie1 refreshDisplay:self];
	[motorPie2 refreshDisplay:self];
	if([model goingHome]){
		[goingHomeField setStringValue:@"Going Home"];
	}
	else {
		[goingHomeField setStringValue:@""];
	}
}



- (void) cmdFileChanged:(NSNotification*)aNotification
{
    if([model cmdFile]){
        [cmdFileField setStringValue:[[model cmdFile] stringByAbbreviatingWithTildeInPath]];
        [cmdFileField1 setStringValue:[[model cmdFile] stringByAbbreviatingWithTildeInPath]];
    }
    else {
        [cmdFileField setStringValue:@"--"];
        [cmdFileField1 setStringValue:@"--"];
    }
}

- (void) mousePositionReported: (NSNotification*)aNote
{
    if((GetCurrentKeyModifiers() & shiftKey)){
        [model setCmdPosition:NSMakePoint([[[aNote userInfo] objectForKey:@"x"]floatValue],[[[aNote userInfo] objectForKey:@"y"]floatValue])];
    }
}

- (void) enabledMaskChanged:(NSNotification*)aNotification
{
	short i;
	unsigned char theMask = [model enabledMask];
	for(i=0;i<2;i++){
		BOOL bitSet = (theMask&(1<<i))>0;
		if(bitSet != [[enabledMaskMatrix cellWithTag:i] intValue]){
			[[enabledMaskMatrix cellWithTag:i] setState:bitSet];
		}
		
	}
	[self updateButtons:nil];
}


#pragma mark ***Actions
- (IBAction) lockAction:(id) sender
{
    [gSecurity tryToSetLock:ORVXMLock to:[sender intValue] forWindow:[self window]];
}

- (IBAction) portListAction:(id) sender
{
    [model setPortName: [portListPopup titleOfSelectedItem]];
}

- (IBAction) openPortAction:(id)sender
{
    [model openPort:![[model serialPort] isOpen]];
}

- (IBAction) getPositionAction:(id)sender
{
    [model queryPosition];
}

- (IBAction) goHomeAction:(id)sender
{
    [model goHome];
}

- (IBAction) cmdPositionAction:(id)sender
{
    [model setCmdPosition:NSMakePoint([cmdXValueField floatValue],[cmdYValueField floatValue])];
}


- (IBAction) absMotionAction:(id)sender
{
    [model setAbsMotion:[[absMatrix selectedCell] tag]];
}

- (IBAction) goAction:(id)sender
{
    [self endEditing];
    [model go];
}

- (IBAction) stopAction:(id)sender
{
    [model stopMotion];
}

- (IBAction) selectCmdFileAction:(id)sender
{
    NSString* startDir = NSHomeDirectory(); //default to home
    if([model cmdFile]){
        startDir = [[model cmdFile]stringByDeletingLastPathComponent];
        if([startDir length] == 0){
            startDir = NSHomeDirectory();
        }
    }
    NSOpenPanel *openPanel = [NSOpenPanel openPanel];
    [openPanel setCanChooseDirectories:NO];
    [openPanel setCanChooseFiles:YES];
    [openPanel setAllowsMultipleSelection:NO];
    [openPanel setPrompt:@"Choose"];

#if defined(MAC_OS_X_VERSION_10_6) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_6 // 10.6-specific
    [openPanel setDirectoryURL:[NSURL fileURLWithPath:startDir]];
    [openPanel beginSheetModalForWindow:[self window] completionHandler:^(NSInteger result){
        if (result == NSFileHandlingPanelOKButton){
            NSString* fileName = [[[openPanel URL] path] stringByAbbreviatingWithTildeInPath];
            [model setCmdFile:fileName];         
        }
    }];
#else 	
    [openPanel beginSheetForDirectory:startDir
                                 file:nil
                                types:nil
                       modalForWindow:[self window]
                        modalDelegate:self
                       didEndSelector:@selector(openPanelDidEnd:returnCode:contextInfo:)
                          contextInfo:NULL];
#endif
}

- (IBAction) runCmdFileAction:(id)sender
{
    [model runCmdFile];
}

- (IBAction) patternTypeAction:(id)sender
{
    [model setPatternType:[[patternTypeMatrix selectedCell] tag]];
}

- (IBAction) patternAction:(id)sender
{
    [self endEditing];
    int  tag = [[sender selectedCell]tag];
    float value = [[sender selectedCell] floatValue];
    if(tag == 0) [model setStartPoint:NSMakePoint(value,[model startPoint].y)];
    else if(tag == 1) [model setEndPoint:NSMakePoint(value,[model endPoint].y)];
    else if(tag == 2) [model setDelta:NSMakePoint(value,[model delta].y)];
    else if(tag == 3) [model setStartPoint:NSMakePoint([model startPoint].x,value)];
    else if(tag == 4) [model setEndPoint:NSMakePoint([model endPoint].x,value)];
    else if(tag == 5) [model setDelta:NSMakePoint([model delta].x,value)];
}


- (IBAction) conversionAction:(id)sender
{
    [self endEditing];
    int  tag = [[sender selectedCell]tag];
	float value = [[sender selectedCell] floatValue];

    if(tag == 0)[model setConversion:NSMakePoint(value,[model conversion].y)];
    else		[model setConversion:NSMakePoint([model conversion].x,value)];
}

- (IBAction) fullScaleAction:(id)sender
{
    [self endEditing];
    int  tag = [[sender selectedCell]tag];
	float value = [[sender selectedCell] floatValue];
    if(tag == 0)[model setFullScale:NSMakePoint(value,[model fullScale].y)];
    else		[model setFullScale:NSMakePoint([model fullScale].x,value)];
}

- (IBAction) speedAction:(id)sender
{
    [self endEditing];
    int  tag = [[sender selectedCell]tag];
	int value = [[sender selectedCell] intValue];
    if(tag == 0)[model setMotorSpeed:NSMakePoint(value,[model motorSpeed].y)];
    else		[model setMotorSpeed:NSMakePoint([model motorSpeed].x,value)];

}

- (void) dwellTimeAction:(id)sender
{
    [model setDwellTime:[sender floatValue]];
}

- (IBAction) optionsAction:(id)sender
{
    int  whichOption = [[sender selectedCell]tag];
    if([[sender cellWithTag:whichOption] state])[model setOption:whichOption];
    else [model clearOption:whichOption];
}

- (IBAction) enabledMaskAction:(id)sender
{
	[model enableMotor:[[sender selectedCell] tag] withValue:[sender intValue]];
}

@end

@implementation ORVXMController (private)

#if !defined(MAC_OS_X_VERSION_10_6) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_6 // 10.6-specific
-(void)openPanelDidEnd:(NSOpenPanel *)sheet returnCode:(int)returnCode contextInfo:(void  *)contextInfo
{
    if(returnCode){
        NSString* fileName = [[[sheet filenames] objectAtIndex:0] stringByAbbreviatingWithTildeInPath];
        [model setCmdFile:fileName];
    }
}
#endif

- (void) populatePortListPopup
{
	NSEnumerator *enumerator = [ORSerialPortList portEnumerator];
	ORSerialPort *aPort;
    [portListPopup removeAllItems];
    [portListPopup addItemWithTitle:@"--"];

	while (aPort = [enumerator nextObject]) {
        [portListPopup addItemWithTitle:[aPort name]];
	}    
}
@end


@implementation ORVXMController(SMPieChartDataSource)
- (unsigned int)numberOfSlicesInPieChartView:(SMPieChartView *)inPieChartView
{
	if(inPieChartView == motorPie1)return 2;
	else return 2;
}
- (double)pieChartView:(SMPieChartView *)inPieChartView dataForSliceIndex:(unsigned int)inSliceIndex
{
	double motorPosition = 0.0;
	
	if(inPieChartView == motorPie1){
	
		motorPosition = 100.*([model xyPosition].x)/[model fullScale].x;
		
		if(motorPosition > 100)motorPosition = 100;
		else if(motorPosition < 0)motorPosition = 0;

		if(inSliceIndex==1){
			return motorPosition;
		}
		else {
			return 100. - motorPosition;
		}
	}
	else {
		motorPosition = 100.*([model xyPosition].y)/[model fullScale].y;
		
		if(motorPosition > 100)motorPosition = 100;
		if(motorPosition < 0)motorPosition = 0;
		
		if(inSliceIndex==1){
			return motorPosition;
		}
		else {
			return 100 - motorPosition;
		}
	}
}

- (NSDictionary *)pieChartView:(SMPieChartView *)inPieChartView attributesForSliceIndex:(unsigned int)inSliceIndex
{
	if(inSliceIndex == 1){
		return [NSDictionary dictionaryWithObjectsAndKeys:[NSColor greenColor],NSBackgroundColorAttributeName,[NSColor blackColor],NSForegroundColorAttributeName,nil];
	}
	else {
		return [NSDictionary dictionaryWithObjectsAndKeys:[NSColor clearColor],NSBackgroundColorAttributeName,[NSColor blackColor],NSForegroundColorAttributeName,nil];
	}
}

@end

@implementation ORVXMController(SMPieChartDelegate)
//- (NSString *)pieChartView:(SMPieChartView *)inPieChartView labelForSliceIndex:(unsigned int)inSliceIndex;
//- (void)pieChartView:(SMPieChartView *)inPieChartView didClickPoint:(NSPoint)inPoint;
@end

