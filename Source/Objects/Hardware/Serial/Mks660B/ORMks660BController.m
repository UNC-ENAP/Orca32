//--------------------------------------------------------
// ORMks660BController
// Created by Mark Howe on Wednesday, April 25, 2012
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2012 University of North Carolina. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//North Carolina sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//North Carolina reserve all rights in the program. Neither the authors,
//University of North Carolina, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORMks660BController.h"
#import "ORMks660BModel.h"
#import "ORTimeLinePlot.h"
#import "ORCompositePlotView.h"
#import "ORTimeAxis.h"
#import "ORSerialPortList.h"
#import "ORSerialPort.h"
#import "ORTimeRate.h"

@interface ORMks660BController (private)
- (void) populatePortListPopup;
@end

@implementation ORMks660BController

#pragma mark ***Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"Mks660B"];
	return self;
}

- (void) dealloc
{
	[[NSNotificationCenter defaultCenter] removeObserver:self];
	[super dealloc];
}

- (void) awakeFromNib
{
    [self populatePortListPopup];
    [[plotter0 yAxis] setRngLow:-1000. withHigh:1000.];
	[[plotter0 yAxis] setRngLimitsLow:-100000 withHigh:100000 withMinRng:10];
	[plotter0 setUseGradient:YES];

    [[plotter0 xAxis] setRngLow:0.0 withHigh:10000];
	[[plotter0 xAxis] setRngLimitsLow:0.0 withHigh:200000. withMinRng:200];

	ORTimeLinePlot* aPlot;
	aPlot= [[ORTimeLinePlot alloc] initWithTag:0 andDataSource:self];
	[plotter0 addPlot: aPlot];
	[aPlot setLineColor:[NSColor redColor]];
	
	[(ORTimeAxis*)[plotter0 xAxis] setStartTime: [[NSDate date] timeIntervalSince1970]];
	[aPlot release];
	
	NSNumberFormatter *numberFormatter = [[[NSNumberFormatter alloc] init] autorelease];
	[numberFormatter setFormat:@"#0.0"];	

	
	int i;
	for(i=0;i<2;i++){
		[[lowSetPointMatrix cellAtRow:i column:0] setTag:i];
		[[highSetPointMatrix cellAtRow:i column:0] setTag:i];
	}
	
	[super awakeFromNib];
}

#pragma mark ***Notifications
- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORMks660BLock
                        object: nil];

    [notifyCenter addObserver : self
                     selector : @selector(portNameChanged:)
                         name : ORMks660BPortNameChanged
                        object: nil];

    [notifyCenter addObserver : self
                     selector : @selector(portStateChanged:)
                         name : ORSerialPortStateChanged
                       object : nil];
                                              
    [notifyCenter addObserver : self
                     selector : @selector(pressureChanged:)
                         name : ORMks660BPressureChanged
                       object : nil];
        
    [notifyCenter addObserver : self
                     selector : @selector(lowSetPointChanged:)
                         name : ORMks660BLowSetPointChanged
                       object : nil];
	
    [notifyCenter addObserver : self
                     selector : @selector(highSetPointChanged:)
                         name : ORMks660BHighSetPointChanged
                       object : nil];
     
    [notifyCenter addObserver : self
                     selector : @selector(pollTimeChanged:)
                         name : ORMks660BPollTimeChanged
                       object : nil];

    [notifyCenter addObserver : self
                     selector : @selector(shipPressuresChanged:)
                         name : ORMks660BShipPressuresChanged
						object: model];

    [notifyCenter addObserver : self
					 selector : @selector(scaleAction:)
						 name : ORAxisRangeChangedNotification
					   object : nil];

    [notifyCenter addObserver : self
					 selector : @selector(miscAttributesChanged:)
						 name : ORMiscAttributesChanged
					   object : model];

    [notifyCenter addObserver : self
					 selector : @selector(updateTimePlot:)
						 name : ORRateAverageChangedNotification
					   object : nil];
    [notifyCenter addObserver : self
                     selector : @selector(decimalPtPositionChanged:)
                         name : ORMks660BModelDecimalPtPositionChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(highHysteresisChanged:)
                         name : ORMks660BModelHighHysteresisChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(lowHysteresisChanged:)
                         name : ORMks660BModelLowHysteresisChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(calibrationNumberChanged:)
                         name : ORMks660BModelCalibrationNumberChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(fullScaleRBChanged:)
                         name : ORMks660BModelFullScaleRBChanged
						object: model];

}

- (void) setModel:(id)aModel
{
	[super setModel:aModel];
	[[self window] setTitle:[NSString stringWithFormat:@"MKS660B (Unit %d)",[model uniqueIdNumber]]];
}

- (void) updateWindow
{
    [super updateWindow];
    [self lockChanged:nil];
    [self portStateChanged:nil];
    [self portNameChanged:nil];
	[self pressureChanged:nil];
    [self lowSetPointChanged:nil];
    [self highSetPointChanged:nil];
 	[self pollTimeChanged:nil];
	[self shipPressuresChanged:nil];
	[self updateTimePlot:nil];
    [self miscAttributesChanged:nil];
	[self decimalPtPositionChanged:nil];
	[self highHysteresisChanged:nil];
	[self lowHysteresisChanged:nil];
	[self calibrationNumberChanged:nil];
	[self fullScaleRBChanged:nil];
}

- (void) fullScaleRBChanged:(NSNotification*)aNote
{
	[fullScaleRBTextField setIntValue: [model fullScaleRB]];
}

- (void) calibrationNumberChanged:(NSNotification*)aNote
{
	[calibrationNumberTextField setIntValue: [model calibrationNumber]];
}

- (void) lowHysteresisChanged:(NSNotification*)aNote
{
	[lowHysteresisTextField setIntValue: [model lowHysteresis]];
}

- (void) highHysteresisChanged:(NSNotification*)aNote
{
	[highHysteresisTextField setIntValue: [model highHysteresis]];
}

- (void) decimalPtPositionChanged:(NSNotification*)aNote
{
	[decimalPtPositionPU selectItemAtIndex: [model decimalPtPosition]];
}

- (void) scaleAction:(NSNotification*)aNotification
{
	if(aNotification == nil || [aNotification object] == [plotter0 xAxis]){
		[model setMiscAttributes:[(ORAxis*)[plotter0 xAxis]attributes] forKey:@"XAttributes0"];
	}
	
	if(aNotification == nil || [aNotification object] == [plotter0 yAxis]){
		[model setMiscAttributes:[(ORAxis*)[plotter0 yAxis]attributes] forKey:@"YAttributes0"];
	}
}

- (void) miscAttributesChanged:(NSNotification*)aNote
{

	NSString*				key = [[aNote userInfo] objectForKey:ORMiscAttributeKey];
	NSMutableDictionary* attrib = [model miscAttributesForKey:key];
	
	if(aNote == nil || [key isEqualToString:@"XAttributes0"]){
		if(aNote==nil)attrib = [model miscAttributesForKey:@"XAttributes0"];
		if(attrib){
			[(ORAxis*)[plotter0 xAxis] setAttributes:attrib];
			[plotter0 setNeedsDisplay:YES];
			[[plotter0 xAxis] setNeedsDisplay:YES];
		}
	}
	if(aNote == nil || [key isEqualToString:@"YAttributes0"]){
		if(aNote==nil)attrib = [model miscAttributesForKey:@"YAttributes0"];
		if(attrib){
			[(ORAxis*)[plotter0 yAxis] setAttributes:attrib];
			[plotter0 setNeedsDisplay:YES];
			[[plotter0 yAxis] setNeedsDisplay:YES];
		}
	}
}

- (void) updateTimePlot:(NSNotification*)aNote
{
	if(!aNote || ([aNote object] == [model timeRate])){
		[plotter0 setNeedsDisplay:YES];
	}
}

- (void) shipPressuresChanged:(NSNotification*)aNote
{
	[shipPressuresButton setIntValue: [model shipPressures]];
}


- (void) lowSetPointChanged:(NSNotification*)aNote
{
    int i;
    for(i=0;i<2;i++){
		[[lowSetPointMatrix cellWithTag:i] setIntValue: [model lowSetPoint:i]];
    }
}
- (void) highSetPointChanged:(NSNotification*)aNote
{
    int i;
    for(i=0;i<2;i++){
		[[highSetPointMatrix cellWithTag:i] setIntValue: [model highSetPoint:i]];
    }
}


- (void) pressureChanged:(NSNotification*)aNote
{
	NSString* pressureAsString = [NSString stringWithFormat:@"%.3E",[model pressure]];
	[pressureField setStringValue:pressureAsString];
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}


- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORMks660BLock to:secure];
    [lockButton setEnabled:secure];
}

- (void) lockChanged:(NSNotification*)aNotification
{

    BOOL runInProgress = [gOrcaGlobals runInProgress];
    BOOL lockedOrRunningMaintenance = [gSecurity runInProgressButNotType:eMaintenanceRunType orIsLocked:ORMks660BLock];
    BOOL locked = [gSecurity isLocked:ORMks660BLock];

    [lockButton setState: locked];

    [portListPopup setEnabled:!locked];
    [openPortButton setEnabled:!locked];
    [pollTimePopup setEnabled:!locked];
    [shipPressuresButton setEnabled:!locked];
 
    [initHardwareButton setEnabled:!locked];
    [readPressureButton setEnabled:!locked];
	
    [lowSetPointMatrix setEnabled:!locked];
    [highSetPointMatrix setEnabled:!locked];

    NSString* s = @"";
    if(lockedOrRunningMaintenance){
        if(runInProgress && ![gSecurity isLocked:ORMks660BLock])s = @"Not in Maintenance Run.";
    }
    [lockDocField setStringValue:s];

}

- (void) portStateChanged:(NSNotification*)aNotification
{
    if(aNotification == nil || [aNotification object] == [model serialPort]){
        if([model serialPort]){
            [openPortButton setEnabled:YES];

            if([[model serialPort] isOpen]){
                [openPortButton setTitle:@"Close"];
                [portStateField setTextColor:[NSColor colorWithCalibratedRed:0.0 green:.8 blue:0.0 alpha:1.0]];
                [portStateField setStringValue:@"Open"];
            }
            else {
                [openPortButton setTitle:@"Open"];
                [portStateField setStringValue:@"Closed"];
                [portStateField setTextColor:[NSColor redColor]];
            }
        }
        else {
            [openPortButton setEnabled:NO];
            [portStateField setTextColor:[NSColor blackColor]];
            [portStateField setStringValue:@"---"];
            [openPortButton setTitle:@"---"];
        }
    }
}

- (void) pollTimeChanged:(NSNotification*)aNotification
{
	[pollTimePopup selectItemWithTag:[model pollTime]];
}

- (void) portNameChanged:(NSNotification*)aNotification
{
    NSString* portName = [model portName];
    
	NSEnumerator *enumerator = [ORSerialPortList portEnumerator];
	ORSerialPort *aPort;

    [portListPopup selectItemAtIndex:0]; //the default
    while (aPort = [enumerator nextObject]) {
        if([portName isEqualToString:[aPort name]]){
            [portListPopup selectItemWithTitle:portName];
            break;
        }
	}  
    [self portStateChanged:nil];
}

#pragma mark ***Actions

- (void) calibrationNumberTextFieldAction:(id)sender
{
	[model setCalibrationNumber:[sender intValue]];	
}

- (void) lowHysteresisTextFieldAction:(id)sender
{
	[model setLowHysteresis:[sender intValue]];	
}

- (void) highHysteresisTextFieldAction:(id)sender
{
	[model setHighHysteresis:[sender intValue]];	
}

- (void) decimalPtPositionAction:(id)sender
{
	[model setDecimalPtPosition:[sender indexOfSelectedItem]];	
}

- (IBAction) loadDialogFromHW:(id)sender
{
    [self endEditing];
	NSBeginAlertSheet(@"Transfer HW Settings To Dialog",
					  @"YES/Do it",
					  @"Cancel",
					  nil,[self window],
					  self,
					  @selector(loadDialogDidFinish:returnCode:contextInfo:),
					  nil,
					  nil,
					  @"This will read the values that are in the hardware unit and put those values into the dialog.\n\nReally do this?");
}

- (void) loadDialogDidFinish:(id)sheet returnCode:(int)returnCode contextInfo:(id)userInfo
{
	if(returnCode == NSAlertDefaultReturn){
		[model readAndLoad];
    }
}

- (IBAction) pollNowAction:(id)sender
{
	[model pollHardware];	
}

- (IBAction) shipPressuresAction:(id)sender
{
	[model setShipPressures:[sender intValue]];	
}

- (IBAction) lockAction:(id) sender
{
    [gSecurity tryToSetLock:ORMks660BLock to:[sender intValue] forWindow:[self window]];
}

- (IBAction) portListAction:(id) sender
{
    [model setPortName: [portListPopup titleOfSelectedItem]];
}

- (IBAction) openPortAction:(id)sender
{
    [model openPort:![[model serialPort] isOpen]];
}

- (IBAction) readPressureAction:(id)sender
{
	[model readPressure];
}

- (IBAction) readHardware:(id)sender
{
	NSLog(@"MKS651(%d) Reading back all values. Any mismatches will follow.\n",[model uniqueIdNumber]);
	[model readAndCompare];
}

- (IBAction) pollTimeAction:(id)sender
{
	[model setPollTime:[[sender selectedItem] tag]];
}

- (IBAction) lowSetPointAction:(id)sender;
{
	int index = [[sender selectedCell] tag];
	float theValue = [[sender selectedCell] intValue];
	[model setLowSetPoint:index withValue:theValue];
}

- (IBAction) highSetPointAction:(id)sender;
{
	int index = [[sender selectedCell] tag];
	float theValue = [[sender selectedCell] intValue];
	[model setHighSetPoint:index withValue:theValue];
}


- (IBAction) initHardwareAction:(id)sender;
{
	NSLog(@"MKS660B (%d) Loading and reading back all values. Any mismatches will be listed.\n",[model uniqueIdNumber]);
	[model initHardware];
}

- (IBAction) zeroAction:(id)sender
{
    [self endEditing];
	NSBeginAlertSheet(@"Display Zero",
					  @"YES/Do it",
					  @"Cancel",
					  nil,[self window],
					  self,
					  @selector(zeroDidFinish:returnCode:contextInfo:),
					  nil,
					  nil,
					  @"This will zero the display.\n\nReally do this?");
}

- (void) zeroDidFinish:(id)sheet returnCode:(int)returnCode contextInfo:(id)userInfo
{
	if(returnCode == NSAlertDefaultReturn){
		[model writeZeroDisplay];
    }
}

- (IBAction) fullScaleAction:(id)sender
{
    [self endEditing];
	NSBeginAlertSheet(@"Set Full Scale",
					  @"YES/Do it",
					  @"Cancel",
					  nil,[self window],
					  self,
					  @selector(fullScaleDidFinish:returnCode:contextInfo:),
					  nil,
					  nil,
					  @"This will make the current value the full scale value.\n\nReally do this?");
}

- (void) fullScaleDidFinish:(id)sheet returnCode:(int)returnCode contextInfo:(id)userInfo
{
	if(returnCode == NSAlertDefaultReturn){
		[model writeFullScale];
		[ORTimer delay:1];
		[model writeFullScale]; //have to write it twice with a delay
    }
}

#pragma mark ***Data Source
- (int) numberPointsInPlot:(id)aPlotter
{
	return [[model timeRate] count];
}

- (void) plotter:(id)aPlotter index:(int)i x:(double*)xValue y:(double*)yValue
{
	int count = [[model timeRate] count];
	int index = count-i-1;
	*xValue = [[model timeRate]timeSampledAtIndex:index];
	*yValue = [[model timeRate] valueAtIndex:index];
}

@end

@implementation ORMks660BController (private)

- (void) populatePortListPopup
{
	NSEnumerator *enumerator = [ORSerialPortList portEnumerator];
	ORSerialPort *aPort;
    [portListPopup removeAllItems];
    [portListPopup addItemWithTitle:@"--"];

	while (aPort = [enumerator nextObject]) {
        [portListPopup addItemWithTitle:[aPort name]];
	}    
}
@end

