//--------------------------------------------------------
// ORArduinoUNOController
// Created by Mark  A. Howe on Wed 10/17/2012
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2012 University of North Carolina. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//North Carolina sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//North Carolina reserve all rights in the program. Neither the authors,
//University of North Carolina, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------
#pragma mark •••Imported Files

#import "ORArduinoUNOController.h"
#import "ORArduinoUNOModel.h"
#import "ORSerialPort.h"
#import "OHexFormatter.h"
#import "ORSerialPortController.h"

@implementation ORArduinoUNOController

#pragma mark •••Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"ArduinoUNO"];
	return self;
}

- (void) dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
	[super dealloc];
}

- (void) awakeFromNib
{	
	NSNumberFormatter* formatter = [[[NSNumberFormatter alloc] init] autorelease];
	[formatter setFormat:@"#0.000"];	
	int i;
	for(i=0;i<kNumArduinoUNOPins;i++){
		[[pinNameMatrix cellAtRow:i column:0] setTag:i];
		[[pinValueOutMatrix cellAtRow:i column:0] setTag:i];
		[[pinValueInMatrix cellAtRow:i column:0] setTag:i];
		[[pwmMatrix cellAtRow:i column:0] setTag:i];
		[[adcMatrix cellAtRow:i column:0] setTag:i];
		[[adcMatrix cellAtRow:i column:0] setFormatter:formatter];

	}
 	[super awakeFromNib];
}

#pragma mark •••Notifications

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
	
    [notifyCenter addObserver : self
                     selector : @selector(pollTimeChanged:)
                         name : ORArduinoUNOModelPollTimeChanged
                       object : nil];
	
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORArduinoUNOLock
                        object: nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORSerialPortModelPortStateChanged
						object: model];	
	
	[notifyCenter addObserver : self
                     selector : @selector(adcChanged:)
                         name : ORArduinoUNOModelAdcChanged
						object: model];	

	[notifyCenter addObserver : self
                     selector : @selector(pinNameChanged:)
                         name : ORArduinoUNOPinNameChanged
						object: model];	

	[notifyCenter addObserver : self
                     selector : @selector(pinValueInChanged:)
                         name : ORArduinoUNOPinValueInChanged
						object: model];	

	[notifyCenter addObserver : self
                     selector : @selector(pinTypeChanged:)
                         name : ORArduinoUNOPinTypeChanged
						object: model];	

	[notifyCenter addObserver : self
                     selector : @selector(pinValueOutChanged:)
                         name : ORArduinoUNOPinValueOutChanged
						object: model];	

	[notifyCenter addObserver : self
                     selector : @selector(pwmChanged:)
                         name : ORArduinoUNOPwmChanged
						object: model];	
	
	[serialPortController registerNotificationObservers];

}

- (void) setModel:(id)aModel
{
	[super setModel:aModel];
	[[self window] setTitle:[NSString stringWithFormat:@"ArduinoUNO (%lu)",[model uniqueIdNumber]]];
}


- (void) updateWindow
{
    [super updateWindow];
    [self lockChanged:nil];
	[self adcChanged:nil];
	[self pollTimeChanged:nil];
	
	[self pinTypeChanged:nil];
	[self pinValueInChanged:nil];
	[self pinValueOutChanged:nil];
	[self pinNameChanged:nil];
	[self pwmChanged:nil];
	
    [self updateButtons];
	[serialPortController updateWindow];
}


- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORArduinoUNOLock to:secure];
    [lockButton setEnabled:secure];
}

- (void) lockChanged:(NSNotification*)aNotification
{
	[self updateButtons];
}

- (BOOL) portLocked
{
	return [gSecurity isLocked:ORArduinoUNOLock];;
}

- (void) updateButtons
{
    BOOL locked = [gSecurity isLocked:ORArduinoUNOLock];
	//BOOL portOpen = [[model serialPort] isOpen];
    [lockButton setState: locked];
	[serialPortController updateButtons:locked];
    [pollTimePopup	setEnabled:!locked];
	
	short i;
	for(i=0;i<kNumArduinoUNOPins;i++){
		if([model pinType:i] == kArduinoPWM){
			[[pwmMatrix cellAtRow:i column:0] setEnabled:!locked];
			[[pinValueOutMatrix cellAtRow:i column:0] setEnabled:NO];
		}
		else {
			[[pwmMatrix cellAtRow:i column:0] setEnabled:NO];
			if([model pinType:i] == kArduinoOutput){
				[[pinValueOutMatrix cellAtRow:i column:0] setEnabled:!locked];
			}
			else {
				[[pinValueOutMatrix cellAtRow:i column:0] setEnabled:NO];
			}
		}
	}
}

- (void) pollTimeChanged:(NSNotification*)aNotification
{
	[pollTimePopup selectItemWithTag:[model pollTime]];
}

- (void) pwmChanged:(NSNotification*)aNote
{
	if(aNote == nil){
        short i;
        for(i=0;i<kNumArduinoUNOPins;i++){
			if([model pinType:i] == kArduinoPWM){
				[[pwmMatrix cellAtRow:i column:0] setIntValue:[model pwm:i]];
			}
			else [[pwmMatrix cellAtRow:i column:0] setStringValue:@""];
        }
    }
    else {
        int i = [[[aNote userInfo] objectForKey:@"Pin"] intValue];
		if([model pinType:i] == kArduinoPWM){
			[[pwmMatrix cellAtRow:i column:0] setIntValue:[model pwm:i]];
		}
		else [[pwmMatrix cellAtRow:i column:0] setStringValue:@""];
    }
	
}

- (void) pinTypeChanged:(NSNotification*)aNote
{
	if(aNote == nil){
        short i;
        for(i=0;i<kNumArduinoUNOPins;i++){
            [[pinTypeMatrix cellAtRow:i column:0] selectItemAtIndex:[model pinType:i]];
        }
    }
    else {
        int i = [[[aNote userInfo] objectForKey:@"Pin"] intValue];
        [[pinTypeMatrix cellAtRow:i column:0] selectItemAtIndex:[model pinType:i]];
    }
	[self updateButtons];
}

- (void) pinValueInChanged:(NSNotification*)aNote
{
	if(aNote == nil){
        short i;
        for(i=0;i<kNumArduinoUNOPins;i++){
            [[pinValueInMatrix cellWithTag:i] setIntValue:[model pinValueIn:i]];
        }
    }
    else {
        int i = [[[aNote userInfo] objectForKey:@"Pin"] intValue];
        [[pinValueInMatrix cellWithTag:i] setIntValue:[model pinValueIn:i]];
    }
}

- (void) pinValueOutChanged:(NSNotification*)aNote
{
	if(aNote == nil){
        short i;
        for(i=0;i<kNumArduinoUNOPins;i++){
            [[pinValueOutMatrix cellWithTag:i] setIntValue:[model pinValueOut:i]];
        }
    }
    else {
        int i = [[[aNote userInfo] objectForKey:@"Pin"] intValue];
        [[pinValueOutMatrix cellWithTag:i] setIntValue:[model pinValueOut:i]];
    }
}

- (void) pinNameChanged:(NSNotification*)aNote
{
    if(aNote == nil){
        short i;
        for(i=0;i<kNumArduinoUNOPins;i++){
            [[pinNameMatrix cellWithTag:i] setStringValue:[model pinName:i]];
        }
    }
    else {
        int i = [[[aNote userInfo] objectForKey:@"Pin"] intValue];
        [[pinNameMatrix cellWithTag:i] setStringValue:[model pinName:i]];
    }
}

- (void) adcChanged:(NSNotification*)aNote
{
    if(aNote == nil){
        short i;
        for(i=0;i<kNumArduinoUNOAdcChannels;i++){
            [[adcMatrix cellWithTag:i] setFloatValue:[model adc:i]];
        }
    }
    else {
        int i = [[[aNote userInfo] objectForKey:@"Channel"] intValue];
        [[adcMatrix cellWithTag:i] setFloatValue:[model adc:i]];
    }
}

#pragma mark •••Actions
- (IBAction) lockAction:(id) sender
{
    [gSecurity tryToSetLock:ORArduinoUNOLock to:[sender intValue] forWindow:[self window]];
}

- (IBAction) updateAllAction:(id)sender
{
	[model updateAll];
}

- (IBAction) pollTimeAction:(id)sender
{
	[model setPollTime:[[sender selectedItem] tag]];
}

- (IBAction) pinTypeAction:(id)sender
{
	int thePin = [sender selectedRow];
	if([model pinValueOut:thePin]!= [[sender selectedCell] indexOfSelectedItem]){
		[model setPin:thePin type:[[sender selectedCell] indexOfSelectedItem]];
	}
}

- (IBAction) pinNameAction:(id)sender
{
	int thePin = [[sender selectedCell] tag];
	if(![[model pinName:thePin] isEqualToString: [sender stringValue]]){
		[model setPin:thePin name:[sender stringValue]];
	}
}

- (IBAction) pinValueOutAction:(id)sender
{
	int thePin = [[sender selectedCell] tag];
	if([model pinValueOut:thePin]!= [sender intValue]){
		[model setPinValueOut:thePin value:[sender intValue]];
	}
}

- (IBAction) pwmAction:(id)sender
{
	int thePin = [[sender selectedCell] tag];
	if([model pwm:thePin] != [sender intValue]){
		[model setPin:thePin pwm:[sender intValue]];
	}
}

- (IBAction) writeValues:(id)sender
{
	[self endEditing];
	[model initHardware];
}

@end

