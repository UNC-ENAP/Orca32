//--------------------------------------------------------
// ORMks651cModel
// Created by David G. Phillips II on Tue Aug 30, 2011
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark •••Imported Files

#import "ORMks651cModel.h"
#import "ORSerialPort.h"
#import "ORSerialPortList.h"
#import "ORSerialPort.h"
#import "ORSerialPortAdditions.h"
#import "ORDataTypeAssigner.h"
#import "ORDataPacket.h"
#import "ORTimeRate.h"

#pragma mark •••External Strings
NSString* ORMks651cModelUnitsChanged				= @"ORMks651cModelUnitsChanged";
NSString* ORMks651cModelPressureScaleChanged		= @"ORMks651cModelPressureScaleChanged";
NSString* ORMks651cModelShipPressuresChanged		= @"ORMks651cModelShipPressuresChanged";
NSString* ORMks651cModelPollTimeChanged				= @"ORMks651cModelPollTimeChanged";
NSString* ORMks651cModelSerialPortChanged			= @"ORMks651cModelSerialPortChanged";
NSString* ORMks651cModelPortNameChanged				= @"ORMks651cModelPortNameChanged";
NSString* ORMks651cModelPortStateChanged			= @"ORMks651cModelPortStateChanged";
NSString* ORMks651cPressureChanged					= @"ORMks651cPressureChanged";
NSString* ORMks651cSetPointChanged                  = @"ORMks651cSetPointChanged";
NSString* ORMks651cSetPointWriteValueChanged        = @"ORMks651cSetPointWriteValueChanged";
NSString* ORMks651cSoftstartRateChanged             = @"ORMks651cSoftstartRateChanged";
NSString* ORMks651cValveTypeChanged                 = @"ORMks651cValveTypeChanged";
NSString* ORMks651cAnalogRangeChanged               = @"ORMks651cAnalogRangeChanged";
NSString* ORMks651cSetPointTypeChanged              = @"ORMks651cSetPointTypeChanged";
NSString* ORMks651cPositionRangeChanged             = @"ORMks651cPositionRangeChanged";
NSString* ORMks651cControlDirectionChanged          = @"ORMks651cControlDirectionChanged";
NSString* ORMks651cSensorRangeChanged               = @"ORMks651cSensorRangeChanged";
NSString* ORMks651cSensorVoltageRangeChanged        = @"ORMks651cSensorVoltageRangeChanged";
NSString* ORMks651cSensorTypeChanged                = @"ORMks651cSensorTypeChanged";
NSString* ORMks651cSystemStatusChanged              = @"ORMks651cSystemStatusChanged";
NSString* ORMks651cSoftwareVersionChanged           = @"ORMks651cSoftwareVersionChanged";
NSString* ORMks651cBatteryStatusChanged             = @"ORMks651cBatteryStatusChanged";
NSString* ORMks651cValveResponseChanged             = @"ORMks651cValveResponseChanged";
NSString* ORMks651cLeadValueChanged                 = @"ORMks651cLeadValueChanged";
NSString* ORMks651cGainValueChanged                 = @"ORMks651cGainValueChanged";
NSString* ORMks651cControlTypeChanged				= @"ORMks651cControlTypeChanged";
NSString* ORMks651cChecksumChanged                  = @"ORMks651cChecksumChanged";

NSString* ORMks651cLock = @"ORMks651cLock";

@interface ORMks651cModel (private)
- (void) runStarted:(NSNotification*)aNote;
- (void) runStopped:(NSNotification*)aNote;
- (void) timeout;
- (void) processOneCommandFromQueue;
- (void) process_response:(NSString*)theResponse;
- (void) writeSetPointToHardware:(int)index withValue:(float)aValue;
- (void) pollHardware;
@end

@implementation ORMks651cModel
- (id) init
{
	self = [super init];
    [self registerNotificationObservers];
	return self;
}


- (void) dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    [NSObject cancelPreviousPerformRequestsWithTarget:self];
    [buffer release];
	[cmdQueue release];
	[lastRequest release];
    [portName release];
    if([serialPort isOpen]){
        [serialPort close];
    }
    [serialPort release];
	[timeRates release];

	[super dealloc];
}

- (void) setUpImage
{
	[self setImage:[NSImage imageNamed:@"Mks651c.tif"]];
}

- (void) makeMainController
{
	[self linkToController:@"ORMks651cController"];
}

- (NSString*) helpURL
{
	return @"RS232/MKS_651c.html";
}

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];

    [notifyCenter addObserver : self
                     selector : @selector(dataReceived:)
                         name : ORSerialPortDataReceived
                       object : nil];

    [notifyCenter addObserver: self
                     selector: @selector(runStarted:)
                         name: ORRunStartedNotification
                       object: nil];
    
    [notifyCenter addObserver: self
                     selector: @selector(runStopped:)
                         name: ORRunStoppedNotification
                       object: nil];

}

- (void) dataReceived:(NSNotification*)note
{
    if([[note userInfo] objectForKey:@"serialPort"] == serialPort){
		[NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(timeout) object:nil];
        NSString* theString = [[[[NSString alloc] initWithData:[[note userInfo] objectForKey:@"data"] 
												      encoding:NSASCIIStringEncoding] autorelease] uppercaseString];

		//the serial port may break the data up into small chunks, so we have to accumulate the chunks until
		//we get a full piece.
        theString = [[theString componentsSeparatedByString:@"\n"] componentsJoinedByString:@""];
        if(!buffer)buffer = [[NSMutableString string] retain];
        [buffer appendString:theString];					
		
        do {
            NSRange lineRange = [buffer rangeOfString:@"\r"];
            if(lineRange.location!= NSNotFound){
                NSMutableString* theResponse = [[[buffer substringToIndex:lineRange.location+1] mutableCopy] autorelease];
                [buffer deleteCharactersInRange:NSMakeRange(0,lineRange.location+1)];      //take the cmd out of the buffer
				
				[self process_response:theResponse];
    
				[self setLastRequest:nil];			 //clear the last request
				[self processOneCommandFromQueue];	 //do the next command in the queue
            }
        } while([buffer rangeOfString:@"\r\n"].location!= NSNotFound);
	}
}


- (void) shipPressureValues
{
    if([[ORGlobal sharedGlobal] runInProgress]){
		
		unsigned long data[6];
		data[0] = dataId | 6;
		data[1] = ([self units]<<16) | ([self uniqueIdNumber]&0xfff);
		
		union {
			float asFloat;
			unsigned long asLong;
		}theData;
		int index = 2;
			theData.asFloat = pressure;
			data[index] = theData.asLong;
			index++;
			
			data[index] = timeMeasured;
			index++;
		[[NSNotificationCenter defaultCenter] postNotificationName:ORQueueRecordForShippingNotification 
															object:[NSData dataWithBytes:data length:sizeof(long)*6]];
	}
}


#pragma mark •••Accessors
- (NSString*) translateUnits:(int)rawUnitNumber
{
    switch(rawUnitNumber){
        case 0: return @"Torr";
        case 1: return @"mTorr";
        case 2: return @"mBar";
        case 3: return @"uBar";
        case 4: return @"kPa";
        case 5: return @"Pa";
        case 6: return @"cmH2O";
        case 7: return @"inH2O";    
        default: return @"?";
    }
}

- (int) units
{
	return units;
}

- (void) setUnits:(int)aUnits
{
    if(aUnits<0) aUnits=0;
    else if(aUnits>7) aUnits=7;
    units=aUnits;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cModelUnitsChanged object:self];
}

- (float) pressureScaleValue
{
	return pressureScaleValue;
}

- (int) pressureScale
{
    return pressureScale;
}

- (void) setPressureScale:(int)aPressureScale
{
	if(aPressureScale<0)aPressureScale=0;
	else if(aPressureScale>11)aPressureScale=11;
	
    [[[self undoManager] prepareWithInvocationTarget:self] setPressureScale:pressureScale];
    
    pressureScale = aPressureScale;
	
	pressureScaleValue = powf(10.,(float)pressureScale);
	
    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cModelPressureScaleChanged object:self];
}

- (ORTimeRate*)timeRate
{
	return timeRates;
}

- (BOOL) shipPressures
{
    return shipPressures;
}

- (void) setShipPressures:(BOOL)aShipPressures
{
    [[[self undoManager] prepareWithInvocationTarget:self] setShipPressures:shipPressures];
    
    shipPressures = aShipPressures;

    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cModelShipPressuresChanged object:self];
}

- (int) pollTime
{
    return pollTime;
}

- (void) setPollTime:(int)aPollTime
{
    [[[self undoManager] prepareWithInvocationTarget:self] setPollTime:pollTime];
    pollTime = aPollTime;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cModelPollTimeChanged object:self];

	if(pollTime){
		[self performSelector:@selector(pollHardware) withObject:nil afterDelay:2];
	}
	else {
		[NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(pollHardware) object:nil];
	}
}



- (float) pressure
{
	return pressure;
}

- (float) setPoint:(int)index
{
    if(index>=0 && index<6)return setPoint[index];
	else return 0.0;
}

- (float) setPointWriteValue:(int)index
{
    if(index>=0 && index<6)return setPoint[index];
	else return 0.0;
}

- (float) softstartRate:(int)index
{
    if(index>=0 && index<8)return softstartRate[index];
	else return 0.0;
} 

- (float) valveType
{
	return valveType;
}

- (float) analogRange
{
	return analogRange;
}

- (float) setPointType:(int)index
{
    if(index>=0 && index<6)return setPointType[index];
	else return 0.0;
}

- (float) positionRange
{
	return positionRange;
}

- (float) controlDirection
{
	return controlDirection;
}

- (float) sensorRange
{
	return sensorRange;
}

- (float) sensorVoltageRange
{
	return sensorVoltageRange;
}

- (float) sensorType
{
	return sensorType;
}

- (float) systemStatus
{
	return systemStatus;
}

- (float) softwareVersion
{
	return softwareVersion;
}

- (float) batteryStatus
{
	return batteryStatus;
}

- (float) valveResponse
{
	return valveResponse;
}

- (float) leadValue:(int)index
{
    if(index>=0 && index<5)return leadValue[index];
	else return 0.0;
}

- (float) gainValue:(int)index
{
    if(index>=0 && index<5)return gainValue[index];
	else return 0.0;
}

- (float) controlType
{
	return controlType;
}

- (float) checksum
{
	return checksum;
}

- (unsigned long) timeMeasured
{
	return timeMeasured;
}

- (void) setPressure:(float)aValue
{
		pressure = aValue;
		//get the time(UT!)
		time_t	ut_Time;
		time(&ut_Time);
		//struct tm* theTimeGMTAsStruct = gmtime(&theTime);
		timeMeasured = ut_Time;

		[[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cPressureChanged 
															object:self];

		if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
		[timeRates addDataToTimeAverage:aValue];
}

- (void) setSetPoint:(int)index withValue:(float)aValue;
{
    if(index>=0 && index<6){
        setPoint[index] = aValue;
        //get the time(UT!)
        time_t	ut_Time;
        time(&ut_Time);
        //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
        timeMeasured = ut_Time;
        
        [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cSetPointChanged 
                                                            object:self];
        
        if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
        [timeRates addDataToTimeAverage:aValue];
    }
}

- (void) setSetPointWriteValue:(int)index withValue:(float)aValue;
{
    if(index>=0 && index<6){
        [[[self undoManager] prepareWithInvocationTarget:self] setSetPointWriteValue:index withValue:setPointWriteValue[index]];
        
        setPointWriteValue[index] = aValue;
        [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cSetPointWriteValueChanged object:self];
    }
}
- (float) readSetPointWriteValue:(int)index
{
	return setPointWriteValue[index];
}

- (void) setSoftstartRate:(int)index withValue:(float)aValue;
{
    if(index>=0 && index<8){
        softstartRate[index] = aValue;
        //get the time(UT!)
        time_t	ut_Time;
        time(&ut_Time);
        //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
        timeMeasured = ut_Time;
        
        [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cSoftstartRateChanged 
                                                            object:self];
        
        if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
        [timeRates addDataToTimeAverage:aValue];
    }
}

- (void) setValveType:(float)aValue
{
    valveType = aValue;
    //get the time(UT!)
    time_t	ut_Time;
    time(&ut_Time);
    //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
    timeMeasured = ut_Time;
    
    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cValveTypeChanged 
                                                        object:self];
    
    if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
    [timeRates addDataToTimeAverage:aValue];
}

- (void) setAnalogRange:(float)aValue
{
    analogRange = aValue;
    //get the time(UT!)
    time_t	ut_Time;
    time(&ut_Time);
    //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
    timeMeasured = ut_Time;
    
    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cAnalogRangeChanged 
                                                        object:self];
    
    if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
    [timeRates addDataToTimeAverage:aValue];
}

- (void) setSetPointType:(int)index withValue:(float)aValue;
{
    if(index>=0 && index<6){
        setPointType[index] = aValue;
        //get the time(UT!)
        time_t	ut_Time;
        time(&ut_Time);
        //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
        timeMeasured = ut_Time;
        
        [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cSetPointTypeChanged 
                                                            object:self];
        
        if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
        [timeRates addDataToTimeAverage:aValue];
    }
}

- (void) setPositionRange:(float)aValue
{
    positionRange = aValue;
    //get the time(UT!)
    time_t	ut_Time;
    time(&ut_Time);
    //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
    timeMeasured = ut_Time;
    
    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cPositionRangeChanged 
                                                        object:self];
    
    if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
    [timeRates addDataToTimeAverage:aValue];
}

- (void) setControlDirection:(float)aValue
{
    controlDirection = aValue;
    //get the time(UT!)
    time_t	ut_Time;
    time(&ut_Time);
    //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
    timeMeasured = ut_Time;
    
    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cControlDirectionChanged 
                                                        object:self];
    
    if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
    [timeRates addDataToTimeAverage:aValue];
}

- (void) setSensorRange:(float)aValue
{
    sensorRange = aValue;
    //get the time(UT!)
    time_t	ut_Time;
    time(&ut_Time);
    //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
    timeMeasured = ut_Time;
    
    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cSensorRangeChanged 
                                                        object:self];
    
    if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
    [timeRates addDataToTimeAverage:aValue];
}

- (void) setSensorVoltageRange:(float)aValue
{
    sensorVoltageRange = aValue;
    //get the time(UT!)
    time_t	ut_Time;
    time(&ut_Time);
    //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
    timeMeasured = ut_Time;
    
    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cSensorVoltageRangeChanged 
                                                        object:self];
    
    if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
    [timeRates addDataToTimeAverage:aValue];
}

- (void) setSensorType:(float)aValue
{
    sensorType = aValue;
    //get the time(UT!)
    time_t	ut_Time;
    time(&ut_Time);
    //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
    timeMeasured = ut_Time;
    
    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cSensorTypeChanged 
                                                        object:self];
    
    if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
    [timeRates addDataToTimeAverage:aValue];
}

- (void) setSystemStatus:(float)aValue
{
    systemStatus = aValue;
    //get the time(UT!)
    time_t	ut_Time;
    time(&ut_Time);
    //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
    timeMeasured = ut_Time;
    
    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cSystemStatusChanged 
                                                        object:self];
    
    if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
    [timeRates addDataToTimeAverage:aValue];
}

- (void) setSoftwareVersion:(float)aValue
{
    softwareVersion = aValue;
    //get the time(UT!)
    time_t	ut_Time;
    time(&ut_Time);
    //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
    timeMeasured = ut_Time;
    
    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cSoftwareVersionChanged 
                                                        object:self];
    
    if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
    [timeRates addDataToTimeAverage:aValue];
}

- (void) setBatteryStatus:(float)aValue
{
    batteryStatus = aValue;
    //get the time(UT!)
    time_t	ut_Time;
    time(&ut_Time);
    //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
    timeMeasured = ut_Time;
    
    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cBatteryStatusChanged 
                                                        object:self];
    
    if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
    [timeRates addDataToTimeAverage:aValue];
}

- (void) setValveResponse:(float)aValue
{
    valveResponse = aValue;
    //get the time(UT!)
    time_t	ut_Time;
    time(&ut_Time);
    //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
    timeMeasured = ut_Time;
    
    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cValveResponseChanged 
                                                        object:self];
    
    if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
    [timeRates addDataToTimeAverage:aValue];
}

- (void) setLeadValue:(int)index withValue:(float)aValue;
{
    if(index>=0 && index<5){
        leadValue[index] = aValue;
        //get the time(UT!)
        time_t	ut_Time;
        time(&ut_Time);
        //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
        timeMeasured = ut_Time;
        
        [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cLeadValueChanged 
                                                            object:self];
        
        if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
        [timeRates addDataToTimeAverage:aValue];
    }
}

- (void) setGainValue:(int)index withValue:(float)aValue;
{
    if(index>=0 && index<5){
        gainValue[index] = aValue;
        //get the time(UT!)
        time_t	ut_Time;
        time(&ut_Time);
        //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
        timeMeasured = ut_Time;
        
        [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cGainValueChanged 
                                                            object:self];
        
        if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
        [timeRates addDataToTimeAverage:aValue];
    }
}

- (void) setControlType:(float)aValue
{
    controlType = aValue;
    //get the time(UT!)
    time_t	ut_Time;
    time(&ut_Time);
    //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
    timeMeasured = ut_Time;
    
    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cControlTypeChanged 
                                                        object:self];
    
    if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
    [timeRates addDataToTimeAverage:aValue];
}

- (void) setChecksum:(float)aValue
{
    checksum = aValue;
    //get the time(UT!)
    time_t	ut_Time;
    time(&ut_Time);
    //struct tm* theTimeGMTAsStruct = gmtime(&theTime);
    timeMeasured = ut_Time;
    
    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cControlTypeChanged 
                                                        object:self];
    
    if(timeRates == nil) timeRates = [[ORTimeRate alloc] init];
    [timeRates addDataToTimeAverage:aValue];
}

- (NSString*) lastRequest
{
	return lastRequest;
}

- (void) setLastRequest:(NSString*)aRequest
{
	[lastRequest autorelease];
	lastRequest = [aRequest copy];    
}

- (BOOL) portWasOpen
{
    return portWasOpen;
}

- (void) setPortWasOpen:(BOOL)aPortWasOpen
{
    portWasOpen = aPortWasOpen;
}

- (NSString*) portName
{
    return portName;
}

- (void) setPortName:(NSString*)aPortName
{
    [[[self undoManager] prepareWithInvocationTarget:self] setPortName:portName];
    
    if(![aPortName isEqualToString:portName]){
        [portName autorelease];
        portName = [aPortName copy];    

        BOOL valid = NO;
        NSEnumerator *enumerator = [ORSerialPortList portEnumerator];
        ORSerialPort *aPort;
        while (aPort = [enumerator nextObject]) {
            if([portName isEqualToString:[aPort name]]){
                [self setSerialPort:aPort];
                if(portWasOpen){
                    [self openPort:YES];
                 }
                valid = YES;
                break;
            }
        } 
        if(!valid){
            [self setSerialPort:nil];
        }       
    }

    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cModelPortNameChanged object:self];
}

- (ORSerialPort*) serialPort
{
    return serialPort;
}

- (void) setSerialPort:(ORSerialPort*)aSerialPort
{
    [aSerialPort retain];
    [serialPort release];
    serialPort = aSerialPort;

    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cModelSerialPortChanged object:self];
}

- (void) openPort:(BOOL)state
{
    if(state) {
		[serialPort setSpeed:9600];
		[serialPort setParityNone];
		[serialPort setStopBits2:1];
		[serialPort setDataBits:8];
        [serialPort open];
    }
    else      [serialPort close];
    portWasOpen = [serialPort isOpen];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORMks651cModelPortStateChanged object:self];
    
}


#pragma mark •••Archival
- (id) initWithCoder:(NSCoder*)decoder
{
	self = [super initWithCoder:decoder];
	[[self undoManager] disableUndoRegistration];
	[self setUnits:			[decoder decodeIntForKey:@"units"]];
	[self setShipPressures:	[decoder decodeBoolForKey:	 @"shipPressures"]];
	[self setPollTime:		[decoder decodeIntForKey:	 @"pollTime"]];
	[self setPortWasOpen:	[decoder decodeBoolForKey:	 @"portWasOpen"]];
    [self setPortName:		[decoder decodeObjectForKey: @"portName"]];
    [self setPressureScale:	[decoder decodeIntForKey:    @"pressureScale"]];
	[[self undoManager] enableUndoRegistration];
	timeRates = [[ORTimeRate alloc] init];
    [self registerNotificationObservers];

	return self;
}
- (void) encodeWithCoder:(NSCoder*)encoder
{
    [super encodeWithCoder:encoder];
    [encoder encodeInt:units			forKey:@"units"];
    [encoder encodeBool:shipPressures	forKey: @"shipPressures"];
    [encoder encodeInt: pollTime		forKey: @"pollTime"];
    [encoder encodeBool:portWasOpen		forKey: @"portWasOpen"];
    [encoder encodeObject:portName		forKey: @"portName"];
	[encoder encodeInt:pressureScale   forKey:@"pressureScale"];
}

#pragma mark ••• Commands
- (void) addCmdToQueue:(NSString*)aCmd
{
    if([serialPort isOpen]){ 
		if(!cmdQueue)cmdQueue = [[NSMutableArray array] retain];
		[cmdQueue addObject:aCmd];
		if(!lastRequest){
			[self processOneCommandFromQueue];
		}
	}
}

- (void) readPressures
{
	[self addCmdToQueue:@"R5"];
	//[self addCmdToQueue:@"++ShipRecords"];
}

- (void) readSetPoints
{
    [self addCmdToQueue:@"R1"];
	[self addCmdToQueue:@"R2"];
    [self addCmdToQueue:@"R3"];
    [self addCmdToQueue:@"R4"];
    [self addCmdToQueue:@"R10"];
    [self addCmdToQueue:@"R0"];
}

- (void) readThresholds
{
	[self addCmdToQueue:@"R11"];
    [self addCmdToQueue:@"R12"];
    [self addCmdToQueue:@"R13"];
    [self addCmdToQueue:@"R14"];
}

- (void) readSoftstartRates
{
	[self addCmdToQueue:@"R15"];
	[self addCmdToQueue:@"R16"];
    [self addCmdToQueue:@"R17"];
    [self addCmdToQueue:@"R18"];
    [self addCmdToQueue:@"R19"];
    [self addCmdToQueue:@"R20"];
    [self addCmdToQueue:@"R21"];
    [self addCmdToQueue:@"R22"];
}

- (void) readValveType
{
	[self addCmdToQueue:@"R23"];
}

- (void) readAnalogRange
{
	[self addCmdToQueue:@"R24"];
}

- (void) readSetPointTypes
{
	[self addCmdToQueue:@"R25"];
	[self addCmdToQueue:@"R26"];
    [self addCmdToQueue:@"R27"];
    [self addCmdToQueue:@"R28"];
    [self addCmdToQueue:@"R29"];
    [self addCmdToQueue:@"R30"];
}

- (void) readPositionRange
{
	[self addCmdToQueue:@"R31"];
}

- (void) readControlDirection
{
	[self addCmdToQueue:@"R32"];
}

- (void) readSensorRange
{
	[self addCmdToQueue:@"R33"];
}

- (void) readUnits
{
	[self addCmdToQueue:@"R34"];
}

- (void) readSensorVoltageRange
{
	[self addCmdToQueue:@"R35"];
}

- (void) readSensorType
{
	[self addCmdToQueue:@"R36"];
}

- (void) readSystemStatus
{
	[self addCmdToQueue:@"R37"];
}

- (void) readSoftwareVersion
{
	[self addCmdToQueue:@"R38"];
}

- (void) readBatteryStatus
{
	[self addCmdToQueue:@"R39"];
}

- (void) readValveResponse
{
	[self addCmdToQueue:@"R40"];
}

- (void) readLeadValue
{
	[self addCmdToQueue:@"R41"];
	[self addCmdToQueue:@"R42"];
    [self addCmdToQueue:@"R43"];
    [self addCmdToQueue:@"R44"];
    [self addCmdToQueue:@"R45"];
}

- (void) readGainValue
{
	[self addCmdToQueue:@"R46"];
	[self addCmdToQueue:@"R47"];
    [self addCmdToQueue:@"R48"];
    [self addCmdToQueue:@"R49"];
    [self addCmdToQueue:@"R50"];
}

- (void) readControlType
{
	[self addCmdToQueue:@"R51"];	
}

- (void) readChecksum
{
	[self addCmdToQueue:@"R52"];	
}

#pragma mark •••Data Records
- (unsigned long) dataId { return dataId; }
- (void) setDataId: (unsigned long) DataId
{
    dataId = DataId;
}
- (void) setDataIds:(id)assigner
{
    dataId       = [assigner assignDataIds:kLongForm];
}

- (void) syncDataIdsWith:(id)anotherMks651c
{
    [self setDataId:[anotherMks651c dataId]];
}

- (void) appendDataDescription:(ORDataPacket*)aDataPacket userInfo:(id)userInfo
{
    //----------------------------------------------------------------------------------------
    // first add our description to the data description
    [aDataPacket addDataDescriptionItem:[self dataRecordDescription] forKey:@"Mks651cModel"];
}

- (NSDictionary*) dataRecordDescription
{
    NSMutableDictionary* dataDictionary = [NSMutableDictionary dictionary];
    NSDictionary* aDictionary = [NSDictionary dictionaryWithObjectsAndKeys:
        @"ORMks651cDecoderForPressure",     @"decoder",
        [NSNumber numberWithLong:dataId],   @"dataId",
        [NSNumber numberWithBool:NO],       @"variable",
        [NSNumber numberWithLong:8],        @"length",
        nil];
    [dataDictionary setObject:aDictionary forKey:@"Pressures"];
    
    return dataDictionary;
}

/*- (void) writeSetPointToHardware:(int)index withValue:(float)aValue
{
	if(index>=1 && index<=6){
	NSString* theCmd = [NSString stringWithFormat:@"S%d %f",index,aValue];
	NSLog(@"Sending command: %@",theCmd);
	[self addCmdToQueue:theCmd];
	}
}
*/

@end

@implementation ORMks651cModel (private)
- (void) runStarted:(NSNotification*)aNote
{
}

- (void) runStopped:(NSNotification*)aNote
{
}

- (void) timeout
{
	NSLogError(@"MKS 651c",@"command timeout",nil);
	[self setLastRequest:nil];
	[self processOneCommandFromQueue];	 //do the next command in the queue
}

- (void) processOneCommandFromQueue
{
	
	if([cmdQueue count] == 0) return;
	NSString* aCmd = [[[cmdQueue objectAtIndex:0] retain] autorelease];
	[cmdQueue removeObjectAtIndex:0];
	if([aCmd isEqualToString:@"++ShipRecords"]){
		if(shipPressures) [self shipPressureValues];
	}
	else {
		[self setLastRequest:aCmd];
		[self performSelector:@selector(timeout) withObject:nil afterDelay:3];
		if(![aCmd hasSuffix:@"\r\n"]) aCmd = [aCmd stringByAppendingString:@"\r\n"];
		[serialPort writeString:aCmd];
		if(!lastRequest){
			[self performSelector:@selector(processOneCommandFromQueue) withObject:nil afterDelay:.01];
		}
	}
}

- (void) process_response:(NSString*)theResponse
{	
    if ([theResponse hasPrefix:@"P"]){
        float theValue = [[theResponse substringFromIndex:1] floatValue];
        [self setPressure:theValue];
    }

    else if ([theResponse hasPrefix:@"F0"]){
        NSString* su = [theResponse substringFromIndex:2];
        int n = [su intValue];
        [self setUnits:n];
    }

    else if([theResponse hasPrefix:@"S"]){
        int   index    = [[theResponse substringWithRange:NSMakeRange(1,1)] intValue];
        float theValue = [[theResponse substringFromIndex:2] floatValue];
        [self setSetPoint:index withValue:theValue];
    }
    else if([theResponse hasPrefix:@"I"]){
        int   index    = [[theResponse substringWithRange:NSMakeRange(1,1)] intValue] - 1;
        float theValue = [[theResponse substringFromIndex:2] floatValue];
        [self setSoftstartRate:index withValue:theValue];
    }
    else if([theResponse hasPrefix:@"J"]){
        float theValue = [[theResponse substringFromIndex:1] floatValue];
        [self setValveType:theValue];
    }
    else if([theResponse hasPrefix:@"A"]){
        float theValue = [[theResponse substringFromIndex:1] floatValue];
        [self setAnalogRange:theValue];
    }
    else if([theResponse hasPrefix:@"T"]){
        int   index    = [[theResponse substringWithRange:NSMakeRange(1,1)] intValue];
        float theValue = [[theResponse substringFromIndex:2] floatValue];
        [self setSetPointType:index withValue:theValue];
    }
    else if([theResponse hasPrefix:@"B"]){
        float theValue = [[theResponse substringFromIndex:1] floatValue];
        [self setPositionRange:theValue];
    }
    else if([theResponse hasPrefix:@"N"]){
        float theValue = [[theResponse substringFromIndex:1] floatValue];
        [self setControlDirection:theValue];
    }
    else if([theResponse hasPrefix:@"E"]){
        float theValue = [[theResponse substringFromIndex:1] floatValue];
        [self setSensorRange:theValue];
    }
    else if([theResponse hasPrefix:@"G"]){
        float theValue = [[theResponse substringFromIndex:1] floatValue];
        [self setSensorVoltageRange:theValue];
    }
    else if([theResponse hasPrefix:@"U"]){
        float theValue = [[theResponse substringFromIndex:1] floatValue];
        [self setSensorType:theValue];
    }
    else if([theResponse hasPrefix:@"HVERSION"]){
        float theValue = [[theResponse substringFromIndex:8] floatValue];
        [self setSoftwareVersion:theValue];
    }
    else if([theResponse hasPrefix:@"K"]){
        float theValue = [[theResponse substringFromIndex:1] floatValue];
        [self setValveResponse:theValue];
    }
    else if([theResponse hasPrefix:@"X"]){
        int   index    = [[theResponse substringWithRange:NSMakeRange(1,1)] intValue] - 1;
        float theValue = [[theResponse substringFromIndex:2] floatValue];
        [self setLeadValue:index withValue:theValue];
    }
    else if([theResponse hasPrefix:@"M"]){
        int   index    = [[theResponse substringWithRange:NSMakeRange(1,1)] intValue] - 1;
        float theValue = [[theResponse substringFromIndex:2] floatValue];
        [self setGainValue:index withValue:theValue];
    }
    else if([theResponse hasPrefix:@"V"]){
        float theValue = [[theResponse substringFromIndex:1] floatValue];
        [self setControlType:theValue];
    }
    else if([theResponse hasPrefix:@"CS"]){
        float theValue = [[theResponse substringFromIndex:2] floatValue];
        [self setChecksum:theValue];
    }
    
}

- (void) writeSetPointToHardware:(int)index withValue:(float)aValue
{
    if(index>=1 && index<=6){
        NSString* theCmd = [NSString stringWithFormat:@"S%d+%.2f",index, aValue];
        [self addCmdToQueue:theCmd];
    }
}

- (void) pollHardware
{
	[NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(pollHardware) object:nil];
	[self readPressures];
	[self readUnits];
    [self readSetPoints];
    [self readSoftstartRates];
    [self readValveType];
    [self readAnalogRange];
    [self readSetPointTypes];
    [self readPositionRange];
    [self readControlDirection];
    [self readSensorRange];
    [self readSensorVoltageRange];
    [self readSensorType];
    [self readSystemStatus];
    [self readSoftwareVersion];
    [self readBatteryStatus];
    [self readValveResponse];
    [self readLeadValue];
    [self readGainValue];
    [self readControlType];
    [self readChecksum];
	[self performSelector:@selector(pollHardware) withObject:nil afterDelay:pollTime];
   
}
@end