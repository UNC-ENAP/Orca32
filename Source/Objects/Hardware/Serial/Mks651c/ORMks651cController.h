//--------------------------------------------------------
// ORMks651cController
// Created by David G. Phillips II on Tue Aug 30, 2011
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

@class ORPlotView;

@interface ORMks651cController : OrcaObjectController
{
    IBOutlet NSTextField*   lockDocField;
	IBOutlet NSTextField*   unitsTextField;
	IBOutlet NSPopUpButton*	pressureScalePU;
	IBOutlet NSButton*		shipPressuresButton;
    IBOutlet NSButton*      lockButton;
    IBOutlet NSButton*		setSetPointWriteValueButton;
    IBOutlet NSTextField*   portStateField;
    IBOutlet NSPopUpButton* portListPopup;
    IBOutlet NSPopUpButton* pollTimePopup;
    IBOutlet NSButton*      openPortButton;
    IBOutlet NSButton*      readPressuresButton;
    IBOutlet NSTextField*   pressureField;
    IBOutlet NSMatrix*      setPointMatrix;
    IBOutlet NSMatrix*      setPointWriteValueMatrix;
    IBOutlet NSMatrix*      softstartRateMatrix;
    IBOutlet NSTextField*   valveTypeField;
    IBOutlet NSTextField*   analogRangeField;
    IBOutlet NSMatrix*      setPointTypeMatrix;
    IBOutlet NSTextField*   positionRangeField;
    IBOutlet NSTextField*   controlDirectionField;
    IBOutlet NSTextField*   sensorRangeField;
    IBOutlet NSTextField*   sensorVoltageRangeField;
    IBOutlet NSTextField*   sensorTypeField;
    IBOutlet NSTextField*   systemStatusField;
    IBOutlet NSTextField*   softwareVersionField;
    IBOutlet NSTextField*   batteryStatusField;
    IBOutlet NSTextField*   valveResponseField;
    IBOutlet NSMatrix*      leadValueMatrix;
    IBOutlet NSMatrix*      gainValueMatrix;
    IBOutlet NSTextField*   controlTypeField;
    IBOutlet NSTextField*   checksumField;
    IBOutlet NSTextField*   timeField;
	IBOutlet ORPlotView*    plotter0;
}

#pragma mark ***Initialization
- (id) init;
- (void) dealloc;
- (void) awakeFromNib;

#pragma mark ***Notifications
- (void) registerNotificationObservers;
- (void) updateWindow;

#pragma mark ***Interface Management
- (void) unitsChanged:(NSNotification*)aNote;
- (void) pressureScaleChanged:(NSNotification*)aNote;
- (void) updateTimePlot:(NSNotification*)aNotification;
- (void) scaleAction:(NSNotification*)aNotification;
- (void) shipPressuresChanged:(NSNotification*)aNotification;
- (void) setSetPointWriteValueChanged:(NSNotification*)aNotification;
- (void) lockChanged:(NSNotification*)aNotification;
- (void) portNameChanged:(NSNotification*)aNotification;
- (void) portStateChanged:(NSNotification*)aNotification;
- (void) pressureChanged:(NSNotification*)aNotification;
- (void) setPointChanged:(NSNotification*)aNotification;
- (void) setPointWriteValueChanged:(NSNotification*)aNotification;
- (void) softstartRateChanged:(NSNotification*)aNotification;
- (void) valveTypeChanged:(NSNotification*)aNotification;
- (void) analogRangeChanged:(NSNotification*)aNotification;
- (void) setPointTypeChanged:(NSNotification*)aNotification;
- (void) positionRangeChanged:(NSNotification*)aNotification;
- (void) controlDirectionChanged:(NSNotification*)aNotification;
- (void) sensorRangeChanged:(NSNotification*)aNotification;
- (void) sensorVoltageRangeChanged:(NSNotification*)aNotification;
- (void) sensorTypeChanged:(NSNotification*)aNotification;
- (void) systemStatusChanged:(NSNotification*)aNotification;
- (void) softwareVersionChanged:(NSNotification*)aNotification;
- (void) batteryStatusChanged:(NSNotification*)aNotification;
- (void) valveResponseChanged:(NSNotification*)aNotification;
- (void) leadValueChanged:(NSNotification*)aNotification;
- (void) gainValueChanged:(NSNotification*)aNotification;
- (void) controlTypeChanged:(NSNotification*)aNotification;
- (void) checksumChanged:(NSNotification*)aNotification;
- (void) pollTimeChanged:(NSNotification*)aNotification;
- (void) miscAttributesChanged:(NSNotification*)aNotification;
- (void) scaleAction:(NSNotification*)aNotification;

#pragma mark ***Actions
- (IBAction) pressureScaleAction:(id)sender;
- (IBAction) shipPressuresAction:(id)sender;
- (IBAction) lockAction:(id) sender;
- (IBAction) portListAction:(id) sender;
- (IBAction) openPortAction:(id)sender;
- (IBAction) readPressuresAction:(id)sender;
- (IBAction) readSetPointAction:(id)sender;
- (IBAction) readSoftstartRateAction:(id)sender;
- (IBAction) readValveTypeAction:(id)sender;
- (IBAction) readAnalogRangeAction:(id)sender;
- (IBAction) readSetPointTypeAction:(id)sender;
- (IBAction) readPositionRangeAction:(id)sender;
- (IBAction) readControlDirectionAction:(id)sender;
- (IBAction) readSensorRangeAction:(id)sender;
- (IBAction) readSensorVoltageRangeAction:(id)sender;
- (IBAction) readSensorTypeAction:(id)sender;
- (IBAction) readSystemStatusAction:(id)sender;
- (IBAction) readSoftwareVersionAction:(id)sender;
- (IBAction) readBatteryStatusAction:(id)sender;
- (IBAction) readValveResponseAction:(id)sender;
- (IBAction) readLeadValueAction:(id)sender;
- (IBAction) readGainValueAction:(id)sender;
- (IBAction) readControlTypeAction:(id)sender;
- (IBAction) readChecksumAction:(id)sender;
- (IBAction) pollTimeAction:(id)sender;
- (IBAction) setPointWriteValueMatrixAction:(id)sender;


- (int) numberPointsInPlot:(id)aPlotter;
- (void) plotter:(id)aPlotter index:(int)i x:(double*)xValue y:(double*)yValue;

@end


