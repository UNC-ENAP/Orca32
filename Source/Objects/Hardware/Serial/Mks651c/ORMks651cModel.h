//--------------------------------------------------------
// ORMks651cModel
// Created by David G. Phillips II on Tue Aug 30, 2011
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark •••Imported Files

@class ORSerialPort;
@class ORTimeRate;

@interface ORMks651cModel : OrcaObject
{
    @private
        NSString*			portName;
        BOOL				portWasOpen;
        ORSerialPort*		serialPort;
        unsigned long		dataId;
        NSString*			lastRequest;
        NSMutableArray*		cmdQueue;
		float				pressure;
        float				setPoint[6];
        float				setPointWriteValue[6];
        float               softstartRate[8];
        float               valveType;
        float               analogRange;
        float				setPointType[6];
        float               positionRange;
        float               controlDirection;
        float               sensorRange;
        float               sensorVoltageRange;
        float               sensorType;
        float               softwareVersion;
        float               systemStatus;
        float               valveResponse;
        float               batteryStatus;
        float               leadValue[5];
        float               gainValue[5];
        float               controlType;
        float               checksum;
		unsigned long		timeMeasured;
		int					pollTime;
        NSMutableString*    buffer;
		BOOL				shipPressures;
		ORTimeRate*			timeRates;
		int					pressureScale;
		float				pressureScaleValue;
        int                 units;
}

#pragma mark •••Initialization

- (id)   init;
- (void) dealloc;

- (void) registerNotificationObservers;
- (void) dataReceived:(NSNotification*)note;

#pragma mark •••Accessors
- (int) units;
- (void) setUnits:(int)aUnits;
- (float) pressureScaleValue;
- (int) pressureScale;
- (void) setPressureScale:(int)aPressureScale;
- (ORTimeRate*)timeRate;
- (BOOL) shipPressures;
- (void) setShipPressures:(BOOL)aShipPressures;
- (int)  pollTime;
- (void) setPollTime:(int)aPollTime;
- (ORSerialPort*) serialPort;
- (void) setSerialPort:(ORSerialPort*)aSerialPort;
- (BOOL) portWasOpen;
- (void) setPortWasOpen:(BOOL)aPortWasOpen;
- (NSString*) portName;
- (void) setPortName:(NSString*)aPortName;
- (void) openPort:(BOOL)state;
- (float) pressure;
- (unsigned long) timeMeasured;
- (void) setPressure:(float)aValue;
- (void) setSetPoint:(int)index withValue:(float)aValue;
- (float)readSetPointWriteValue:(int)index;
- (void) setSetPointWriteValue:(int)index withValue:(float)aValue;
- (void) setSoftstartRate:(int)index withValue:(float)aValue;
- (void) setValveType:(float)aValue;
- (void) setAnalogRange:(float)aValue;
- (void) setSetPointType:(int)index withValue:(float)aValue;
- (void) setPositionRange:(float)aValue;
- (void) setControlDirection:(float)aValue;
- (void) setSensorRange:(float)aValue;
- (void) setSensorVoltageRange:(float)aValue;
- (void) setSensorType:(float)aValue;
- (void) setSoftwareVersion:(float)aValue;
- (void) setSystemStatus:(float)aValue;
- (void) setValveResponse:(float)aValue;
- (void) setBatteryStatus:(float)aValue;
- (void) setLeadValue:(int)index withValue:(float)aValue;
- (void) setGainValue:(int)index withValue:(float)aValue;
- (void) setControlType:(float)aValue;
- (void) setChecksum:(float)aValue;
//- (void) writeSetPointToHardware:(int)index withValue:(float)aValue;
- (NSString*) translateUnits:(int)index;
- (float) setPoint:(int)index;
- (float) setPointWriteValue:(int)index;
- (float) softstartRate:(int)index;
- (float) valveType;
- (float) analogRange;
- (float) setPointType:(int)index;
- (float) positionRange;
- (float) controlDirection;
- (float) sensorRange;
- (float) sensorVoltageRange;
- (float) sensorType;
- (float) systemStatus;
- (float) softwareVersion;
- (float) batteryStatus;
- (float) valveResponse;
- (float) leadValue:(int)index;
- (float) gainValue:(int)index;
- (float) controlType;
- (float) checksum;
- (NSString*) lastRequest;
- (void) setLastRequest:(NSString*)aRequest;

#pragma mark •••Data Records
- (void) appendDataDescription:(ORDataPacket*)aDataPacket userInfo:(id)userInfo;
- (NSDictionary*) dataRecordDescription;
- (unsigned long) dataId;
- (void) setDataId: (unsigned long) DataId;
- (void) setDataIds:(id)assigner;
- (void) syncDataIdsWith:(id)anotherMks651c;
- (void) shipPressureValues;
- (void) addCmdToQueue:(NSString*)aCmd;

#pragma mark •••Commands
- (void) readPressures;
- (void) readSetPoints;
- (void) readThresholds;
- (void) readSoftstartRates;
- (void) readValveType;
- (void) readAnalogRange;
- (void) readSetPointTypes;
- (void) readPositionRange;
- (void) readControlDirection;
- (void) readSensorRange;
- (void) readUnits;
- (void) readSoftstartRates;
- (void) readSensorVoltageRange;
- (void) readSensorType;
- (void) readSystemStatus;
- (void) readSoftwareVersion;
- (void) readBatteryStatus;
- (void) readSystemStatus;
- (void) readSoftwareVersion;
- (void) readValveResponse;
- (void) readBatteryStatus;
- (void) readValveResponse;
- (void) readLeadValue;
- (void) readGainValue;
- (void) readControlType;
- (void) readChecksum;

- (id)   initWithCoder:(NSCoder*)decoder;
- (void) encodeWithCoder:(NSCoder*)encoder;

@end


extern NSString* ORMks651cModelUnitsChanged;
extern NSString* ORMks651cModelPressureScaleChanged;
extern NSString* ORMks651cModelShipPressuresChanged;
extern NSString* ORMks651cModelPollTimeChanged;
extern NSString* ORMks651cModelSerialPortChanged;
extern NSString* ORMks651cLock;
extern NSString* ORMks651cModelPortNameChanged;
extern NSString* ORMks651cModelPortStateChanged;
extern NSString* ORMks651cPressureChanged;
extern NSString* ORMks651cSetPointChanged;
extern NSString* ORMks651cSetPointWriteValueChanged;
extern NSString* ORMks651cSoftstartRateChanged;
extern NSString* ORMks651cValveTypeChanged;
extern NSString* ORMks651cAnalogRangeChanged;
extern NSString* ORMks651cSetPointTypeChanged;
extern NSString* ORMks651cPositionRangeChanged;
extern NSString* ORMks651cControlDirectionChanged;
extern NSString* ORMks651cSensorRangeChanged;
extern NSString* ORMks651cSensorVoltageRangeChanged;
extern NSString* ORMks651cSensorTypeChanged;
extern NSString* ORMks651cSystemStatusChanged;
extern NSString* ORMks651cSoftwareVersionChanged;
extern NSString* ORMks651cBatteryStatusChanged;
extern NSString* ORMks651cValveResponseChanged;
extern NSString* ORMks651cLeadValueChanged;
extern NSString* ORMks651cGainValueChanged;
extern NSString* ORMks651cControlTypeChanged;
extern NSString* ORMks651cChecksumChanged;
