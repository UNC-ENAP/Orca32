//--------------------------------------------------------
// ORMks651cController
// Created by David G. Phillips II on Tue Aug 30, 2011
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORMks651cController.h"
#import "ORMks651cModel.h"
#import "ORTimeLinePlot.h"
#import "ORPlotView.h"
#import "ORTimeAxis.h"
#import "ORSerialPortList.h"
#import "ORSerialPort.h"
#define __CARBONSOUND__ //temp until undated to >10.3
#import <Carbon/Carbon.h>
#import "ORTimeRate.h"

@interface ORMks651cController (private)
- (void) populatePortListPopup;
@end

@implementation ORMks651cController

#pragma mark ***Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"Mks651c"];
	return self;
}

- (void) dealloc
{
	[[NSNotificationCenter defaultCenter] removeObserver:self];
	[super dealloc];
}

- (void) awakeFromNib
{
    [self populatePortListPopup];
    [[plotter0 yScale] setRngLow:0.0 withHigh:1000.];
	[[plotter0 yScale] setRngLimitsLow:0.0 withHigh:100000 withMinRng:10];
	[plotter0 setUseGradient:YES];

    [[plotter0 xScale] setRngLow:0.0 withHigh:10000];
	[[plotter0 xScale] setRngLimitsLow:0.0 withHigh:200000. withMinRng:200];

	ORTimeLinePlot* aPlot;
	aPlot= [[ORTimeLinePlot alloc] initWithTag:0 andDataSource:self];
	[plotter0 addPlot: aPlot];
	[(ORTimeAxis*)[plotter0 xScale] setStartTime: [[NSDate date] timeIntervalSince1970]];
	[aPlot release];
	
	[super awakeFromNib];
}

#pragma mark ***Notifications

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORMks651cLock
                        object: nil];

    [notifyCenter addObserver : self
                     selector : @selector(portNameChanged:)
                         name : ORMks651cModelPortNameChanged
                        object: nil];

    [notifyCenter addObserver : self
                     selector : @selector(portStateChanged:)
                         name : ORSerialPortStateChanged
                       object : nil];
                                              
    [notifyCenter addObserver : self
                     selector : @selector(pressureChanged:)
                         name : ORMks651cPressureChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(setPointChanged:)
                         name : ORMks651cSetPointChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(setPointWriteValueChanged:)
                         name : ORMks651cSetPointWriteValueChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(softstartRateChanged:)
                         name : ORMks651cSoftstartRateChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(valveTypeChanged:)
                         name : ORMks651cValveTypeChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(analogRangeChanged:)
                         name : ORMks651cAnalogRangeChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(setPointTypeChanged:)
                         name : ORMks651cSetPointTypeChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(positionRangeChanged:)
                         name : ORMks651cPositionRangeChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(controlDirectionChanged:)
                         name : ORMks651cControlDirectionChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(sensorRangeChanged:)
                         name : ORMks651cSensorRangeChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(sensorVoltageRangeChanged:)
                         name : ORMks651cSensorVoltageRangeChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(sensorTypeChanged:)
                         name : ORMks651cSensorTypeChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(systemStatusChanged:)
                         name : ORMks651cSystemStatusChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(softwareVersionChanged:)
                         name : ORMks651cSoftwareVersionChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(batteryStatusChanged:)
                         name : ORMks651cBatteryStatusChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(valveResponseChanged:)
                         name : ORMks651cValveResponseChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(leadValueChanged:)
                         name : ORMks651cLeadValueChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(gainValueChanged:)
                         name : ORMks651cGainValueChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(controlTypeChanged:)
                         name : ORMks651cControlTypeChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(checksumChanged:)
                         name : ORMks651cChecksumChanged
                       object : nil];

    [notifyCenter addObserver : self
                     selector : @selector(pollTimeChanged:)
                         name : ORMks651cModelPollTimeChanged
                       object : nil];

    [notifyCenter addObserver : self
                     selector : @selector(shipPressuresChanged:)
                         name : ORMks651cModelShipPressuresChanged
						object: model];

    [notifyCenter addObserver : self
					 selector : @selector(scaleAction:)
						 name : ORAxisRangeChangedNotification
					   object : nil];

    [notifyCenter addObserver : self
					 selector : @selector(miscAttributesChanged:)
						 name : ORMiscAttributesChanged
					   object : model];

    [notifyCenter addObserver : self
					 selector : @selector(updateTimePlot:)
						 name : ORRateAverageChangedNotification
					   object : nil];
					   
    [notifyCenter addObserver : self
                     selector : @selector(pressureScaleChanged:)
                         name : ORMks651cModelPressureScaleChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(unitsChanged:)
                         name : ORMks651cModelUnitsChanged
						object: model];

}

- (void) setModel:(id)aModel
{
	[super setModel:aModel];
	[[self window] setTitle:[NSString stringWithFormat:@"MKS 651c (Unit %d)",[model uniqueIdNumber]]];
}

- (void) updateWindow
{
    [super updateWindow];
    [self lockChanged:nil];
    [self portStateChanged:nil];
    [self portNameChanged:nil];
	[self pressureChanged:nil];
    [self setPointChanged:nil];
    [self softstartRateChanged:nil];
    [self valveTypeChanged:nil];
    [self analogRangeChanged:nil];
    [self setPointTypeChanged:nil];
    [self positionRangeChanged:nil];
    [self controlDirectionChanged:nil];
    [self sensorRangeChanged:nil];
    [self sensorVoltageRangeChanged:nil];
    [self softwareVersionChanged:nil];
    [self valveResponseChanged:nil];
    [self sensorTypeChanged:nil];
    [self systemStatusChanged:nil];
    [self batteryStatusChanged:nil];
    [self leadValueChanged:nil];
    [self gainValueChanged:nil];
    [self controlTypeChanged:nil];
    [self checksumChanged:nil];
	[self pollTimeChanged:nil];
	[self shipPressuresChanged:nil];
	[self updateTimePlot:nil];
    [self miscAttributesChanged:nil];
	[self pressureScaleChanged:nil];
	[self unitsChanged:nil];
}

- (void) unitsChanged:(NSNotification*)aNote
{
	[unitsTextField setStringValue:[model translateUnits:[(ORMks651cModel*)model units]]];
}

- (void) pressureScaleChanged:(NSNotification*)aNote
{
	[pressureScalePU selectItemAtIndex: [model pressureScale]];
	[plotter0 setNeedsDisplay:YES];
}

- (void) scaleAction:(NSNotification*)aNotification
{
	if(aNotification == nil || [aNotification object] == [plotter0 xScale]){
		[model setMiscAttributes:[(ORAxis*)[plotter0 xScale]attributes] forKey:@"XAttributes0"];
	};
	
	if(aNotification == nil || [aNotification object] == [plotter0 yScale]){
		[model setMiscAttributes:[(ORAxis*)[plotter0 yScale]attributes] forKey:@"YAttributes0"];
	};

}

- (void) miscAttributesChanged:(NSNotification*)aNote
{

	NSString*				key = [[aNote userInfo] objectForKey:ORMiscAttributeKey];
	NSMutableDictionary* attrib = [model miscAttributesForKey:key];
	
	if(aNote == nil || [key isEqualToString:@"XAttributes0"]){
		if(aNote==nil)attrib = [model miscAttributesForKey:@"XAttributes0"];
		if(attrib){
			[(ORAxis*)[plotter0 xScale] setAttributes:attrib];
			[plotter0 setNeedsDisplay:YES];
			[[plotter0 xScale] setNeedsDisplay:YES];
		}
	}
	if(aNote == nil || [key isEqualToString:@"YAttributes0"]){
		if(aNote==nil)attrib = [model miscAttributesForKey:@"YAttributes0"];
		if(attrib){
			[(ORAxis*)[plotter0 yScale] setAttributes:attrib];
			[plotter0 setNeedsDisplay:YES];
			[[plotter0 yScale] setNeedsDisplay:YES];
		}
	}

}

- (void) updateTimePlot:(NSNotification*)aNote
{
	if(!aNote || ([aNote object] == [model timeRate])){
		[plotter0 setNeedsDisplay:YES];
	}
}

- (void) shipPressuresChanged:(NSNotification*)aNote
{
	[shipPressuresButton setIntValue: [model shipPressures]];
}

- (void) setSetPointWriteValueChanged:(NSNotification*)aNote
{
    int i;
    for(i=0;i<6;i++){
	[setSetPointWriteValueButton setIntValue: [model setPointWriteValue:i]];
    }
}

- (void) pressureChanged:(NSNotification*)aNote
{
	NSString* pressureAsString = [NSString stringWithFormat:@"%.2E",[model pressure]];
	[pressureField setStringValue:pressureAsString];
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) setPointChanged:(NSNotification*)aNote
{
    int i;
    for(i=0;i<6;i++){
        NSString* setPointAsString = [NSString stringWithFormat:@"%.2E",[model setPoint:i]];
    
        [[setPointMatrix cellWithTag:i] setStringValue: setPointAsString];
    }
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) setPointWriteValueChanged:(NSNotification*)aNote
{
    int i;
    for(i=0;i<6;i++){
        NSString* setPointWriteValueAsString = [NSString stringWithFormat:@"%.2E",[model setPointWriteValue:i]];
        
        [[setPointWriteValueMatrix cellWithTag:i] setStringValue: setPointWriteValueAsString];
    }
}

- (void) softstartRateChanged:(NSNotification*)aNote
{
    int i;
    for(i=0;i<8;i++){
        NSString* softstartRateAsString = [NSString stringWithFormat:@"%.2E",[model softstartRate:i]];
        
        [[softstartRateMatrix cellWithTag:i] setStringValue: softstartRateAsString];
    }
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) valveTypeChanged:(NSNotification*)aNote
{
	NSString* valveTypeAsString = [NSString stringWithFormat:@"%.2E",[model valveType]];
	[valveTypeField setStringValue:valveTypeAsString];
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) analogRangeChanged:(NSNotification*)aNote
{
	NSString* analogRangeAsString = [NSString stringWithFormat:@"%.2E",[model analogRange]];
	[analogRangeField setStringValue:analogRangeAsString];
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) setPointTypeChanged:(NSNotification*)aNote
{
    int i;
    for(i=0;i<6;i++){
        NSString* setPointTypeAsString = [NSString stringWithFormat:@"%.2E",[model setPointType:i]];
        
        [[setPointTypeMatrix cellWithTag:i] setStringValue: setPointTypeAsString];
    }
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) positionRangeChanged:(NSNotification*)aNote
{
	NSString* positionRangeAsString = [NSString stringWithFormat:@"%.2E",[model positionRange]];
	[positionRangeField setStringValue:positionRangeAsString];
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) controlDirectionChanged:(NSNotification*)aNote
{
	NSString* controlDirectionAsString = [NSString stringWithFormat:@"%.2E",[model controlDirection]];
	[controlDirectionField setStringValue:controlDirectionAsString];
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) sensorRangeChanged:(NSNotification*)aNote
{
	NSString* sensorRangeAsString = [NSString stringWithFormat:@"%.2E",[model sensorRange]];
	[sensorRangeField setStringValue:sensorRangeAsString];
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) sensorVoltageRangeChanged:(NSNotification*)aNote
{
	NSString* sensorVoltageRangeAsString = [NSString stringWithFormat:@"%.2E",[model sensorVoltageRange]];
	[sensorVoltageRangeField setStringValue:sensorVoltageRangeAsString];
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) sensorTypeChanged:(NSNotification*)aNote
{
	NSString* sensorTypeAsString = [NSString stringWithFormat:@"%.2E",[model sensorType]];
	[sensorTypeField setStringValue:sensorTypeAsString];
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) systemStatusChanged:(NSNotification*)aNote
{
	NSString* systemStatusAsString = [NSString stringWithFormat:@"%.2E",[model systemStatus]];
	[systemStatusField setStringValue:systemStatusAsString];
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) softwareVersionChanged:(NSNotification*)aNote
{
	NSString* softwareVersionAsString = [NSString stringWithFormat:@"%.2E",[model softwareVersion]];
	[softwareVersionField setStringValue:softwareVersionAsString];
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) batteryStatusChanged:(NSNotification*)aNote
{
	NSString* batteryStatusAsString = [NSString stringWithFormat:@"%.2E",[model batteryStatus]];
	[batteryStatusField setStringValue:batteryStatusAsString];
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) valveResponseChanged:(NSNotification*)aNote
{
	NSString* valveResponseAsString = [NSString stringWithFormat:@"%.2E",[model valveResponse]];
	[valveResponseField setStringValue:valveResponseAsString];
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) leadValueChanged:(NSNotification*)aNote
{
    int i;
    for(i=0;i<5;i++){
        NSString* leadValueAsString = [NSString stringWithFormat:@"%.2E",[model leadValue:i]];
        
        [[leadValueMatrix cellWithTag:i] setStringValue: leadValueAsString];
    }
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) gainValueChanged:(NSNotification*)aNote
{
    int i;
    for(i=0;i<5;i++){
        NSString* gainValueAsString = [NSString stringWithFormat:@"%.2E",[model gainValue:i]];
        
        [[gainValueMatrix cellWithTag:i] setStringValue: gainValueAsString];
    }
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) controlTypeChanged:(NSNotification*)aNote
{
	NSString* controlTypeAsString = [NSString stringWithFormat:@"%.2E",[model controlType]];
	[controlTypeField setStringValue:controlTypeAsString];
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) checksumChanged:(NSNotification*)aNote
{
	NSString* checksumAsString = [NSString stringWithFormat:@"%.2E",[model checksum]];
	[checksumField setStringValue:checksumAsString];
	unsigned long t = [model timeMeasured];
	NSCalendarDate* theDate;
	if(t){
		theDate = [NSCalendarDate dateWithTimeIntervalSince1970:t];
		[theDate setCalendarFormat:@"%m/%d %H:%M:%S"];
		[timeField setObjectValue:theDate];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORMks651cLock to:secure];
    [lockButton setEnabled:secure];
}

- (void) lockChanged:(NSNotification*)aNotification
{

    BOOL runInProgress = [gOrcaGlobals runInProgress];
    BOOL lockedOrRunningMaintenance = [gSecurity runInProgressButNotType:eMaintenanceRunType orIsLocked:ORMks651cLock];
    BOOL locked = [gSecurity isLocked:ORMks651cLock];

    [lockButton setState: locked];

    [portListPopup setEnabled:!locked];
    [openPortButton setEnabled:!locked];
    [pollTimePopup setEnabled:!locked];
    [shipPressuresButton setEnabled:!locked];
    [setSetPointWriteValueButton setEnabled:!locked];
    
    NSString* s = @"";
    if(lockedOrRunningMaintenance){
        if(runInProgress && ![gSecurity isLocked:ORMks651cLock])s = @"Not in Maintenance Run.";
    }
    [lockDocField setStringValue:s];

}

- (void) portStateChanged:(NSNotification*)aNotification
{
    if(aNotification == nil || [aNotification object] == [model serialPort]){
        if([model serialPort]){
            [openPortButton setEnabled:YES];

            if([[model serialPort] isOpen]){
                [openPortButton setTitle:@"Close"];
                [portStateField setTextColor:[NSColor colorWithCalibratedRed:0.0 green:.8 blue:0.0 alpha:1.0]];
                [portStateField setStringValue:@"Open"];
            }
            else {
                [openPortButton setTitle:@"Open"];
                [portStateField setStringValue:@"Closed"];
                [portStateField setTextColor:[NSColor redColor]];
            }
        }
        else {
            [openPortButton setEnabled:NO];
            [portStateField setTextColor:[NSColor blackColor]];
            [portStateField setStringValue:@"---"];
            [openPortButton setTitle:@"---"];
        }
    }
}

- (void) pollTimeChanged:(NSNotification*)aNotification
{
	[pollTimePopup selectItemWithTag:[model pollTime]];
}

- (void) portNameChanged:(NSNotification*)aNotification
{
    NSString* portName = [model portName];
    
	NSEnumerator *enumerator = [ORSerialPortList portEnumerator];
	ORSerialPort *aPort;

    [portListPopup selectItemAtIndex:0]; //the default
    while (aPort = [enumerator nextObject]) {
        if([portName isEqualToString:[aPort name]]){
            [portListPopup selectItemWithTitle:portName];
            break;
        }
	}  
    [self portStateChanged:nil];
}


#pragma mark ***Actions

- (void) pressureScaleAction:(id)sender
{
	[model setPressureScale:[sender indexOfSelectedItem]];	
}

- (void) shipPressuresAction:(id)sender
{
	[model setShipPressures:[sender intValue]];	
}

- (IBAction) lockAction:(id) sender
{
    [gSecurity tryToSetLock:ORMks651cLock to:[sender intValue] forWindow:[self window]];
}

- (IBAction) portListAction:(id) sender
{
    [model setPortName: [portListPopup titleOfSelectedItem]];
}

- (IBAction) openPortAction:(id)sender
{
    [model openPort:![[model serialPort] isOpen]];
}

- (IBAction) readPressuresAction:(id)sender
{
	[model readPressures];
}

- (IBAction) readSetPointAction:(id)sender
{
	[model readSetPoints];
}

- (IBAction) readSoftstartRateAction:(id)sender
{
	[model readSoftstartRates];
}

- (IBAction) readValveTypeAction:(id)sender
{
	[model readValveType];
}

- (IBAction) readAnalogRangeAction:(id)sender
{
	[model readAnalogRange];
}

- (IBAction) readSetPointTypeAction:(id)sender
{
	[model readSetPointTypes];
}

- (IBAction) readPositionRangeAction:(id)sender
{
	[model readPositionRange];
}

- (IBAction) readControlDirectionAction:(id)sender
{
	[model readControlDirection];
}

- (IBAction) readSensorRangeAction:(id)sender
{
	[model readSensorRange];
}

- (IBAction) readSensorVoltageRangeAction:(id)sender
{
	[model readSensorVoltageRange];
}

- (IBAction) readSensorTypeAction:(id)sender
{
	[model readSensorType];
}

- (IBAction) readSystemStatusAction:(id)sender
{
	[model readSystemStatus];
}

- (IBAction) readSoftwareVersionAction:(id)sender
{
	[model readSoftwareVersion];
}

- (IBAction) readBatteryStatusAction:(id)sender
{
	[model readBatteryStatus];
}

- (IBAction) readValveResponseAction:(id)sender
{
	[model readValveResponse];
}

- (IBAction) readLeadValueAction:(id)sender
{
	[model readLeadValue];
}

- (IBAction) readGainValueAction:(id)sender
{
	[model readGainValue];
}

- (IBAction) readChecksumAction:(id)sender
{
	[model readChecksum];
}

- (IBAction) readControlTypeAction:(id)sender
{
	[model readControlType];
}

- (IBAction) pollTimeAction:(id)sender
{
	[model setPollTime:[[sender selectedItem] tag]];
}
/*
- (IBAction) setSetPointWriteValueAction:(id)sender
{
	//int i=3;
	//int	theValue = [[setPointWriteValueMatrix cellWithTag:i] intValue];
	NSLog(@"theValue is: %f\n");//,theValue);
	//[model writeSetPointToHardware:i withValue:theValue];
}
*/
- (IBAction) setPointWriteValueMatrixAction:(id)sender
{
	//int i=3;
	//int theValue = [[setPointWriteValueMatrix cellWithTag:i] intValue];
	NSLog(@"theValue is: \n");//,theValue);
	//[model writeSetPointToHardware:i withValue:theValue];
	
}

#pragma mark ***Data Source
- (int) numberPointsInPlot:(id)aPlotter
{
	return [[model timeRate] count];
}

- (void) plotter:(id)aPlotter index:(int)i x:(double*)xValue y:(double*)yValue
{
	int count = [[model timeRate] count];
	int index = count-i-1;
	*xValue = [[model timeRate]timeSampledAtIndex:index];
	*yValue = [[model timeRate] valueAtIndex:index] * [model pressureScaleValue];
}

@end

@implementation ORMks651cController (private)

- (void) populatePortListPopup
{
	NSEnumerator *enumerator = [ORSerialPortList portEnumerator];
	ORSerialPort *aPort;
    [portListPopup removeAllItems];
    [portListPopup addItemWithTitle:@"--"];

	while (aPort = [enumerator nextObject]) {
        [portListPopup addItemWithTitle:[aPort name]];
	}    
}
@end

