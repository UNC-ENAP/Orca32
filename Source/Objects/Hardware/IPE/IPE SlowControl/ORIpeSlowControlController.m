//--------------------------------------------------------
// ORIpeSlowControlController
// Created by Mark  A. Howe on Mon Apr 11 2005
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORIpeSlowControlController.h"
#import "ORIpeSlowControlModel.h"

@implementation ORIpeSlowControlController


//TODO:
//TODO:
//TODO:
//TODO: I kept the elements of the Listener.nib, they are hidden in the lower part of the window -tb- 2008-05-19
//TODO: (to see them, enlarge the window in the IpeSlowControl.nib file in Interface builder -tb-
//TODO:
//TODO:
//TODO:


#pragma mark ***Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"IpeSlowControl"];
	return self;
}

- (void) dealloc
{
	[[NSNotificationCenter defaultCenter] removeObserver:self];
	[super dealloc];
}

- (void) awakeFromNib
{
    [super awakeFromNib];
}

#pragma mark ***Notifications

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORIpeSlowControlLock
                       object : nil];
    
	[notifyCenter addObserver : self
                      selector: @selector(remotePortChanged:)
                          name: ORIpeSlowControlRemotePortChangedNotification
                       object : model];
    
	[notifyCenter addObserver : self
                      selector: @selector(remoteHostChanged:)
                          name: ORIpeSlowControlRemoteHostChangedNotification
                       object : model];
    
	[notifyCenter addObserver : self
                      selector: @selector(isConnectedChanged:)
                          name: ORIpeSlowControlIsConnectedChangedNotification
                       object : model];
    
	[notifyCenter addObserver : self
                      selector: @selector(byteCountChanged:)
                          name: ORIpeSlowControlByteCountChangedNotification
                       object : model];
    
	[notifyCenter addObserver : self
                      selector: @selector(connectAtStartChanged:)
                          name: ORIpeSlowControlConnectAtStartChangedNotification
                       object : [self model]];
    
	[notifyCenter addObserver : self
                      selector: @selector(autoReconnectChanged:)
                          name: ORIpeSlowControlAutoReconnectChangedNotification
                       object : [self model]];
                       
    // slow control -tb- //OBSOLETE
  	[notifyCenter addObserver : self
                      selector: @selector(monitoringFieldChanged:)
                          name: ORIpeSlowControlMonitoringFieldChangedNotification
                       object : [self model]];
  
}

- (void) updateWindow
{
    [super updateWindow];
	[self remotePortChanged:nil];
	[self remoteHostChanged:nil];
	[self isConnectedChanged:nil];
	[self byteCountChanged:nil];
	[self connectAtStartChanged:nil];
	[self autoReconnectChanged:nil];
	[self monitoringFieldChanged:nil];
	
}

- (void) connectAtStartChanged:(NSNotification*)aNote
{
	[connectAtStartButton setState:[model connectAtStart]];
}

- (void) autoReconnectChanged:(NSNotification*)aNote
{
	[autoReconnectButton setState:[model autoReconnect]];
}


- (void) remotePortChanged:(NSNotification*)aNote
{
	[remotePortField setIntValue:[model remotePort]];
}

- (void) remoteHostChanged:(NSNotification*)aNote
{
	[remoteHostField setStringValue:[model remoteHost]];
}

- (void) isConnectedChanged:(NSNotification*)aNote
{
	[connectionStatusField setStringValue:[model isConnected]?@"Connected":@"---"];
	[connectButton setTitle:[model isConnected]?@"Disconnect":@"Connect"];
}

- (void) byteCountChanged:(NSNotification*)aNote
{
	[byteRecievedField setIntValue:[model byteCount]];
}

- (void) lockChanged:(NSNotification*)aNotification
{
    BOOL locked = [gSecurity isLocked:ORIpeSlowControlLock];
    [lockButton setState: locked];
    
    [remotePortField setEnabled:!locked];
    [remoteHostField setEnabled:!locked];
    [connectAtStartButton setEnabled:!locked];
    [autoReconnectButton setEnabled:!locked];
}

//OBSOLETE
// slow control -tb-

- (void) monitoringFieldChanged:(NSNotification*)aNotification
{
    static int aValue=0;
    aValue++;
    //NSLog(@"ORIpeSlowControlControler: monitoringFieldChanged\n",aValue);


    //[monitoringField setStringValue: [model currentSensor] ];
    //[monitoringIntValueField setIntValue: [model currentSensorIntValue] ];
}


#pragma mark ***Actions

- (void) checkGlobalSecurity
{
    BOOL secure = [gSecurity globalSecurityEnabled];
    [gSecurity setLock:ORIpeSlowControlLock to:secure];
    [lockButton setEnabled:secure];
}

- (IBAction) lockAction:(id)sender
{
    [gSecurity tryToSetLock:ORIpeSlowControlLock to:[sender intValue] forWindow:[self window]];
}

- (IBAction) remotePortFieldAction:(id)sender
{
	[model setRemotePort:[sender intValue]];
}

- (IBAction) remoteHostFieldAction:(id)sender
{
	[model setRemoteHost:[sender stringValue]];
}


- (IBAction) connectButtonAction:(id)sender
{
    if([model isConnected]){
        [model connectSocket:NO];
    }
    else {
        [model connectSocket:YES];
    }
}

- (IBAction) connectAtStartAction:(id)sender
{
	[[self model] setConnectAtStart:[sender state]];
}

- (IBAction) autoReconnectAction:(id)sender
{
	[[self model] setAutoReconnect:[sender state]];
}


@end

