//--------------------------------------------------------
// ORIpeSlowControlModel
// Created by Mark  A. Howe on Mon Apr 11 2005
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files
#import "ORAdcProcessing.h"
#import "ORDataTaker.h"
#import "ORDataChainObject.h"

#pragma mark ***Forward Declarations
@class ORSensorItem;

/* Dodo-List:
 *
 * -could try using asynchronous download of csv files, see UsingNSURLConnection.html keyword: NSURLConnection (-tb-)
 *  (file://localhost/Developer/Documentation/DocSets/com.apple.ADC_Reference_Library.CoreReference.docset/Contents/Resources/Documents/documentation/Cocoa/Conceptual/URLLoadingSystem/Tasks/UsingNSURLConnection.html#//apple_ref/doc/uid/20001836-BAJEAIEE)
 * Class: NSURLConnection
 */
/*********************************************************************-tb-
 * GLOBAL FUNCTIONS AND DEFINITIONS
 *********************************************************************/
 

/*********************************************************************-tb-
 * CLASSES
 *********************************************************************/

/** This class provides a list of channels (or sensors). These channels can be used in the Orca processing framework
  * as input channels. The channel values are read from the ADEI system (by sending http requests to the ADEI system).
  *
  * The channels are free configurable. They can be configured by requesting all available sensor descriptions from the ADEI system
  * and assigning one of these sensors to one of the channels. The available sensors are grouped in a tree structured
  * hierarchy and are displayed in a outline view. From there a sensor can easily be assigned to a channel.
  *
  * The slow control interface provides the ADEI web interface in a web view for monitoring a sensors values graphically.
  *
  * <br>
  * Details: <br>
  *
  * The class holds a list of channel/sensor items (stored in #sensorList) and a tree (the ADEI hierarchy) of sensor items (starting at #rootAdeiTree).
  * For channels and sensors we use the same class structure ORSensorItem.
  * Sensors in the list may or may not have a sibling in the tree.
  * So we may or may not have the tree and independently of the tree are able to load the sensor values of
  * the sensors listed in the #sensorList. So the sensorList can be saved in the .Orca file and used without tree.
  * The tree in fact is only necessary for defining the sensors in the "channel map".
  *
  *
  *<br><br><br>
  * Comments (Till):
  * <br>
  * Subclassing from ORDataChainObject is necessary for automatic registering as data taker and writer-to-header. 
  * Otherwhise there is no difference compared to subclassing from OrcaObject. (ORDataChainObject is a direct subclass of OrcaObject.)
  * ((See fillInHeaderInfo in ORDocument.m))
  */

@interface ORIpeSlowControlModel : ORDataChainObject <ORAdcProcessing,ORDataTaker>
{
    //Slow Control
    int channelDataId;
    
    
  	NSString* currentSensor;//TODO: rename to currentSensorName  obsolete -tb-
    int currentSensorIntValue;//obsolete -tb-
    
    //new -tb-
    int selectedSensorNum;//number of selected sensor (for editing) in the interface
    NSString *adeiBaseUrl;
    NSString *adeiServiceUrl;
    NSURL *myurl;
    NSURL *csvurl;
    NSXMLDocument *myxmldoc;
    NSData *csvData;
    ORSensorItem *rootAdeiTree;// root of outline view tree (ORSensorItem) = ADEI tree   -tb-
    ORSensorItem *rootRequestTree;// root of request tree (ORSensorItem) = tree according to sensorList, describes
                                  // hierarchy of sensor list items, used for fast reading
    
    int maxSensorListLength;
    NSMutableArray* sensorList; // list of tableview items (ORSensorItem) - TODO: write methods! (e.g. never insert items manually, the order MUST stay fixed) -tb-

    NSMutableArray* adeiSetupOptionsList; // list of adei setup options (to be able to use the test sensors)

    //stuff for convenient ADEI tree download (NSURLConnection + NSURLRequest -> NSXMLDocument)
    double xmlRequestTimeout;
    BOOL            readOnce;
    double dataRequestTimeout;
    NSMutableArray  *queueForLoadingAdeiTree;
    ORSensorItem    *currentlyLoadingSensorNode;//temp internal variable used for XML request
    NSURLConnection *theXMLConnection;
    NSMutableData   *receivedXMLData;
    
    //testing/debugging
    int heartbeatSec, heartbeatUSec;
    int heartbeatLastSec, heartbeatLastUSec;

}

#pragma mark ***Initialization
- (id)   init;
- (id)   initBasics;
- (void) dealloc;
- (void) setUpImage;
- (void) makeMainController;

#pragma mark •••Notifications
- (void) registerNotificationObservers;


#pragma mark ***Accessors
- (void) setDataIds:(id)assigner;
- (void) syncDataIdsWith:(id)anotherCard;
- (int) channelDataId;
- (void) setChannelDataId:(int) aValue;

#pragma mark ***Slow Control Accessors
//obsolete -tb-
- (NSString*) currentSensor;//obsolete -tb-
- (void) setCurrentSensor:(NSString*)aString;//obsolete -tb-
- (int) currentSensorIntValue;//obsolete -tb-
- (void) setCurrentSensorIntValue:(int)aValue;//obsolete -tb-

//new -tb-
-(int) selectedSensorNum;
-(void) setSelectedSensorNum:(int) aValue;
- (ORSensorItem*) rootAdeiTree;
- (NSString*) adeiBaseUrl; 
- (void) setAdeiBaseUrl: (NSString*) aUrl;
- (NSString*) adeiServiceUrl; 
- (void) setAdeiServiceUrl: (NSString*) aUrl;
- (void) setAdeiServiceUrlFromAdeiBaseUrl;
- (NSMutableArray *) sensorList;
- (void) setSensorList: (NSMutableArray *) anItems;
- (int) maxSensorListLength;
- (void) initSensorList;
- (ORSensorItem*) sensorAtIndex:(int)index;
- (void) replaceSensorListItemAtIndex:(int)index withSensorTreeItem:(ORSensorItem*)sensorItem;
- (void) removeSensorListItemWithIndex:(int)index;
- (void) removeSensorListItem:(ORSensorItem*)sensorItem;
- (int) nextFreeChanMap;
// adei setup option list handling
- (NSMutableArray *) adeiSetupOptionsList;
- (void) setAdeiSetupOptionsList: (NSMutableArray *) anItems;
- (void) initAdeiSetupOptionsList;
- (void) insertAdeiSetupOption:(NSString *)aName atIndex:(int) index;
- (void) removeAdeiSetupOptionAtIndex:(int) index;
- (void) replaceAdeiSetupOptionAtIndex:(int) index withString:(NSString *)aName;
- (NSString *) adeiSetupOptionAtIndex:(int) index;
// more methods ...
- (void) setMinValue:(double)aValue forChan:(int)channel;
- (void) setMaxValue:(double)aValue forChan:(int)channel;
- (void) setLowAlarmRange:(double)aValue forChan:(int)channel;
- (void) setHighAlarmRange:(double)aValue forChan:(int)channel;

- (double) doubleDataForChan:(int)channel;
- (void) setDoubleData: (double) aValue forChan:(int)channel;
- (BOOL) isRecordingDataForChan:(int)channel;
- (void) setIsRecordingData:(BOOL)aValue forChan:(int)channel;

- (void) setAdeiBaseUrl: (NSString*) aUrl forChan:(int)channel;
- (NSString*) adeiBaseUrlForChan:(int)channel; 
- (NSString*) adeiServiceUrlForChan:(int)channel; 
- (NSString*) adeiPathForChan:(int)channel; 

#pragma mark ***Slow Control
//all obsolete -tb-
- (void) setSensorWithName:(NSString*)aName toIntValue:(int)aValue; //obsolete -tb-
- (void) setSensor:(char*)aName toIntValue:(int)aValue;//obsolete -tb-
- (void) setSensorToIntValue:(int)aValue;//obsolete -tb-

//for testing
- (void) loadAllSensorValuesWithSensorPath;
- (void) dumpSensorlist;
//new -tb-
- (NSXMLDocument*) createXMLDocumentWithErrorHandlingFromURL:(NSString *)urlname;
- (NSXMLDocument*) createXMLDocumentFromURL:(NSString *)urlname;
- (void) startRequestingADEISensorTreeWithErrorHandling;
- (void) serveQueueForLoadingAdeiTree;
- (void) loadAdeiTreeChildrenForNode:(ORSensorItem*) sensorNode;
#pragma mark ***Delegate Methods for NSURLConnection
- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response;
- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data;
- (void)connection:(NSURLConnection *)connection  didFailWithError:(NSError *)error;
- (void)connectionDidFinishLoading:(NSURLConnection *)connection;

- (void) requestSensorTreeADEI;
- (void) rebuildConnectionsBetweenAdeiTreeAndSensorList;





#pragma mark •••Archival

- (id) initWithCoder:(NSCoder*)decoder;
- (void) encodeWithCoder:(NSCoder*)encoder;

- (NSDictionary*) dataRecordDescription;
- (void) appendEventDictionary:(NSMutableDictionary*)anEventDictionary topLevel:(NSMutableDictionary*)topLevel;
- (NSMutableDictionary*) addParametersToDictionary:(NSMutableDictionary*)dictionary;



#pragma mark •••Adc or Bit Processing Protocol
- (void) startProcessCycle;
- (void) endProcessCycle;
- (BOOL) processValue:(int)channel;
- (void) setProcessOutput:(int)channel value:(int)value;
 //not usually used, but needed for easy compatibility with the bit protocol
- (NSString*) processingTitle;
- (double) convertedValue:(int)channel;
- (double) maxValueForChan:(int)channel;
- (double) minValueForChan:(int)channel;
- (void) getAlarmRangeLow:(double*)theLowLimit high:(double*)theHighLimit  channel:(int)channel;

- (void)processIsStarting; //not in Bit Processing Protocol, but seems to be necessary -tb-
- (void)processIsStopping; //not in Bit Processing Protocol, but seems to be necessary -tb-

#pragma mark •••  Data Taker Protocol
- (void) takeData:(ORDataPacket*)aDataPacket userInfo:(id)userInfo;
- (void) runTaskStarted:(ORDataPacket*)aDataPacket userInfo:(id)userInfo;
- (void) runTaskStopped:(ORDataPacket*)aDataPacket userInfo:(id)userInfo;
- (void) reset;


#pragma mark •••ID Helpers (see OrcaObject)
//- (NSString*) objectName;  // take from super class
//- (NSString*) isDataTaker;  // take from super class
//- (NSString*) supportsHardwareWizard;  //TODO: not yet implemented -tb-
- (NSString*) identifier;


 
#pragma mark •••  Protocol ORHWWizard
- (NSArray*) wizardParameters;
- (NSArray*) wizardSelections;
- (int) numberOfChannels;



@end //of @interface ORIpeSlowControlModel







#pragma mark •••Notification Strings
extern NSString* ORIpeSlowControlLock;
extern NSString* ORIpeSlowControlSelectedSensorNumChangedNotification;
extern NSString* ORIpeSlowControlAdeiServiceUrlChangedNotification;
extern NSString* ORIpeSlowControlAdeiSetupOptionsChangedNotification;
extern NSString* ORIpeSlowControlAdeiBaseUrlChangedNotification;
extern NSString* ORIpeSlowControlAdeiTreeChangedNotification;
extern NSString* ORIpeSlowControlRequestingAdeiTreeStartedNotification;
extern NSString* ORIpeSlowControlRequestingAdeiTreeStoppedNotification;
extern NSString* ORIpeSlowControlSensorListChangedNotification;
//slow control -tb-
extern NSString* ORIpeSlowControlMonitoringFieldChangedNotification; //obsolete -tb-

extern NSString* ORIpeSlowControlDataChangedNotification;
extern NSString* ORIpeSlowControlAdeiBaseUrlForSensorChangedNotification;

extern NSString* ORIpeSlowControlminValueChangedNotification;
extern NSString* ORIpeSlowControlmaxValueChangedNotification;
extern NSString* ORIpeSlowControllowAlarmRangeChangedNotification;
extern NSString* ORIpeSlowControlhighAlarmRangeChangedNotification;
extern NSString* ORIpeSlowControlSetIsRecordingDataChangedNotification;


#pragma mark •••Class ORSensorItem

/*********************************************************************-tb-
 * from here: class ORSensorItem
 *
 * TODO: could make own source files -tb-
 *********************************************************************/

extern NSString * kSensorIDString;//ADEI ItemMask
extern NSString * kGroupIDString;//ADEI LogGroup
extern NSString * kDatabaseString;
extern NSString * kServerString;
extern NSString * kSetupOptionString;
extern NSString * kServiceString;
extern NSString * kAdeiUrlString;

extern NSString * kMinValueString;
extern NSString * kMaxValueString;
extern NSString * kLowAlarmRangeString;
extern NSString * kHighAlarmRangeString;
extern NSString * kIsRecordingDataString;



enum  {kAdeiUnknown=0 , kAdeiTypeRoot, kAdeiTypeService, kAdeiTypeSetupOption, kAdeiTypeServer, kAdeiTypeDatabase, kAdeiTypeGroup, kAdeiTypeItem, //TODO: rename to kAdeiTypeItemMask -tb-
       kAdeiTypeLast, //MUST stand between tree items and list items
       kSensorListItem, kSensorListEmptyItem};

/** This class is used as nodes for the internal ADEI tree (starting at rootRequestTree) and as items for the OutlineView;
  * second as list items for the TableView (stored in sensorList).
  *
  */
@interface ORSensorItem : NSObject {
//@interface ORSensorItem : OrcaObject {
    NSString* name; //a outline view column identifier
    NSString* tree; //a outline view column identifier
    NSString* value; //a outline view column identifier
    NSString* type;  //a outline view column identifier
    NSString* data;  //a outline view column identifier
    NSString* date;  //a outline view column identifier
    double doubleData; // double version of  NSString* data
    long dataTimestampSec;// the timestamp of the data (seconds)
    long dataTimestampSubSec;// the timestamp of the data (subseconds, could be usec or nanosec! -tb-)
    double setpoint; // the setpoint for a sensor (SOLLWERT)
    BOOL isRecordingData; // TRUE if the sensor shall record its data into the Orca data file
    double minValue;
    double setMinValue;
    double maxValue;
    double setMaxValue;
    double lowAlarmRange;
    double setLowAlarmRange;
    double highAlarmRange;
    double setHighAlarmRange;
    int adeiType;
    int channelMapNum; //this is used in two ways: sensorListItem: the index of the item; treeItem: the number of the according sensorlistItem (if defined) otherwise -1
    NSString* classType;
    NSMutableArray* children;// the children of this item in the ADEI tree // rename to 'children' (from 'items') -tb-
    id object;
	ORSensorItem* parent; //the parent of this item in the ADEI tree
	ORSensorItem* sibling; //for a sensor list item this points to the according element in ADEI tree and vice versa TODO: twin would be better name -tb-
    NSXMLDocument *xmlDoc;
    NSXMLNode     *xmlNode;
    NSMutableDictionary* sensorPath; //for sensor list items this represents the path to the corresponding item in the ADEI tree/hierarchy
}

#pragma mark •••Initialization
+ (ORSensorItem*) sensorWithAdeiType:(int)aValue named:(NSString*)aName;
+ (ORSensorItem*) emptySensorListItemWithChanNum:(int)aNum;
+ (NSString*) stringForAdeiType:(int)aValue;

- (id) init;
- (id) initSensorListItem;
- (void) dealloc;

//general attributes
- (NSString *) name;
- (void) setName: (NSString *) aName;

- (NSString *) tree;
- (void) setTree: (NSString *) aName;

- (NSString *) value;
- (void) setValue: (NSString *) aName;

- (NSString *) type;
- (void) setType: (NSString *) aName;

- (NSString *) data;
- (void) setData: (NSString *) aString;
- (double) doubleData;
- (void) setDoubleData: (double) aValue;
- (long)  dataTimestampSec;
- (void) setDataTimestampSec: (long) aValue;
- (long)  dataTimestampSubSec;
- (void) setDataTimestampSubSec: (long) aValue;
- (void) setDataTimestampSec:(long) aSecValue   subSec:(long) aSubSecValue;
- (double) setpoint;
- (void) setSetpoint: (double) aValue;

- (BOOL) isRecordingData;
- (void) setIsRecordingData:(BOOL)aValue;

- (NSString *) date; 
- (void) setDate: (NSString *) aString;

- (double) minValue;
- (void) setMinValue:(double)aValue;
- (double) maxValue;
- (void) setMaxValue:(double)aValue;
- (double) lowAlarmRange;
- (void) setLowAlarmRange:(double)aValue;
- (double) highAlarmRange;
- (void) setHighAlarmRange:(double)aValue;

#pragma  mark •••Actions using the ADEI interface
- (int) adeiType;
- (void) setAdeiType:(int) aValue;
- (BOOL) isAdeiTreeItem;
- (BOOL) isSensorListItem; //true, if this object is in the sensor list
- (BOOL) isEmptySensorListItem;// objects in the sensor list are isEmptySensorListItem XOR isDefinedSensorListItem
- (BOOL) isDefinedSensorListItem;

- (double) loadSensorValueWithSensorPath;
- (NSString*) createWebinterfaceRequestStringWithSensorPath;


//link between channel map list items and sensor tree items
- (void) setSibling:(ORSensorItem*)anObject;
- (ORSensorItem*) sibling;
- (void) connectSiblings:(ORSensorItem*)anObject; // sets the siblings in both directions
- (void) disconnectSiblings; // disconnects (sets to nil) the siblings in both directions
- (void) createAdeiPathFromSibling:(ORSensorItem*)aSibling; //if aSibling == nil, use the own sibling

//channel map (sensor list) items
- (void) clearSensorListItem;
- (int) channelMapNum;
- (void) setChannelMapNum:(int) aValue;

- (void) setAdeiBaseUrl: (NSString*) aUrl;
- (NSString*) adeiBaseUrl;
- (NSString*) adeiServiceUrl;

- (NSMutableDictionary *) sensorPath;
- (void) setSensorPath: (NSMutableDictionary *) aDict;
- (void) clearSensorPath;
- (void) dumpSensorPath;
- (NSString*) adeiPath; 

//unused? unneeded?
- (NSString *) classType;
- (void) setClassType: (NSString *) aType;
- (id) object;
- (void) setObject: (id) anObject;

//sensor tree methods
- (void) setParent:(ORSensorItem*)anObject;
- (ORSensorItem*) parent;

- (NSXMLDocument*) xmlDoc;
- (void) setXmlDoc:(NSXMLDocument*)aDoc;
- (NSXMLNode*) xmlNode;
- (void) setXmlNode:(NSXMLNode*)aNode;


- (NSMutableArray *) children;//rename to children (was items) -tb-
- (void) setChildren: (NSMutableArray *) anItems;
- (void) addChild:(id)anObject;
- (unsigned) countChildren;
- (BOOL) isLeafNode;
- (id) childAtIndex:(int)index;

- (int) createChildrenFromXmlDoc:(NSXMLDocument*)aDoc withType:(int)aType;

#pragma mark •••Archival
- (NSMutableDictionary*) addParametersToDictionary:(NSMutableDictionary*)dictionary;


@end //of @interface ORSensorItem

