//--------------------------------------------------------
// ORGateElementModel
// Created by Mark  A. Howe on Fri Jan 21 2005
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORGateElement.h"
#import "ORBaseDecoder.h"
#import "ORGateGroup.h"

#pragma mark ***External Strings

NSString* ORGateCrateChangedNotification           = @"ORGateCrateChangedNotification";
NSString* ORGateCardChangedNotification            = @"ORGateCardChangedNotification";
NSString* ORGateChannelChangedNotification         = @"ORGateChannelChangedNotification";
NSString* ORGateDecoderTargetChangedNotification   = @"ORGateDecoderTargetChangedNotification";

@implementation ORGateElement
+ (id) gateWithCrate:(unsigned short)aCrate 
                card:(unsigned short)aCard 
             channel:(unsigned short)aChannel 


{
    ORGateElement* aGateElement = [[[ORGateElement alloc] initWithCrate:aCrate 
                                                                   card:aCard 
                                                                channel:aChannel]autorelease];
    return aGateElement;
}

- (id) initWithCrate:(unsigned short)aCrate 
                card:(unsigned short)aCard 
             channel:(unsigned short)aChannel 

{
    self = [super init];
    crateNumber     = aCrate;
    card      = aCard;
    channel   = aChannel;
    
    return self;
}

- (void) dealloc
{
    [decoderTarget release];
	[super dealloc];
}


- (NSUndoManager *)undoManager
{
    return [[NSApp delegate] undoManager];
}


#pragma mark ***Accessors
- (NSString *) decoderTarget
{
    return decoderTarget; 
}

- (void) setDecoderTarget: (NSString *) aDecoderTarget
{
	[[[self undoManager] prepareWithInvocationTarget:self] setDecoderTarget:decoderTarget];
    [decoderTarget autorelease];
    
    decoderTarget = [aDecoderTarget copy];
    
	[[NSNotificationCenter defaultCenter] 
			postNotificationName:ORGateDecoderTargetChangedNotification 
                          object: self];
}

- (ORGate *) gate
{
    return gate; 
}

- (void) setGate: (ORGate *) aGate
{
    gate = aGate; //we don't retain a guardian to prevent retain cycles.
}
- (int) crateNumber
{
	return crateNumber;
}
- (void) setCrateNumber:(int)aNewCrate
{
	[[[self undoManager] prepareWithInvocationTarget:self] setCrateNumber:crateNumber];
    
	crateNumber = aNewCrate;
    
	[[NSNotificationCenter defaultCenter] 
			postNotificationName:ORGateCrateChangedNotification 
                          object: self];
}

- (unsigned short) card
{
	return card;
}
- (void) setCard:(unsigned short)aNewCard
{
	[[[self undoManager] prepareWithInvocationTarget:self] setCard:card];
    
	card = aNewCard;
    
	[[NSNotificationCenter defaultCenter] 
			postNotificationName:ORGateCardChangedNotification 
                          object: self];
}

- (unsigned short ) channel
{
	return channel;
}
- (void) setChannel:(unsigned short )aNewChannel
{
	[[[self undoManager] prepareWithInvocationTarget:self] setChannel:channel];
    
	channel = aNewChannel;
    
	[[NSNotificationCenter defaultCenter] 
			postNotificationName:ORGateChannelChangedNotification 
                          object: self];
}

- (BOOL) prepareData:(ORDataSet*)aDataSet
               crate:(unsigned short)aCrate 
                card:(unsigned short)aCard 
             channel:(unsigned short)aChannel 
               value:(unsigned long)aValue
{
    if(aCard == card &&  aChannel == aChannel && aCrate == crateNumber){
        [gateGroup prepareData:aDataSet crate:aCrate card:aCard channel:aChannel value:aValue];
        return YES;
    }
    else return NO;
}

- (void) installGates:(id)obj
{
    gateGroup = [[[NSApp delegate] document] gateGroup]; //don't retain to avoid retain cycle
    NSString* className = [obj className];
    if([className isEqualToString:decoderTarget]){
        [obj addGate:self];
    }
}


- (NSMutableDictionary*) addParametersToDictionary:(NSMutableDictionary*)dictionary
{
    if(decoderTarget){
        [dictionary setObject:decoderTarget forKey:@"decoderTarget"];
        [dictionary setObject:[NSNumber numberWithShort:crateNumber] forKey:@"crate"];
        [dictionary setObject:[NSNumber numberWithShort:card] forKey:@"card"];
        [dictionary setObject:[NSNumber numberWithShort:channel] forKey:@"channel"];
    }
    return dictionary;
}

#pragma mark ***Achival
- (void) encodeWithCoder: (NSCoder *)coder 
{
    [coder encodeInt: crateNumber forKey:          @"crate"];
    [coder encodeInt: card forKey:           @"card"];
    [coder encodeInt: channel forKey:        @"channel"];
    [coder encodeObject: gate forKey:        @"gate"];
    [coder encodeObject: decoderTarget forKey: @"decoderTarget"];
    
}

- (id) initWithCoder: (NSCoder *)coder 
{
    self = [super init];
    [[self undoManager] disableUndoRegistration];
    crateNumber           = [coder decodeIntForKey: @"crate"];
    card            = [coder decodeIntForKey: @"card"];
    channel         = [coder decodeIntForKey: @"channel"];
    [self setGate         : [coder decodeObjectForKey: @"gate"]];
    [self setDecoderTarget: [coder decodeObjectForKey: @"decoderTarget"]];


    [[self undoManager] enableUndoRegistration];
    return self;
}

@end

