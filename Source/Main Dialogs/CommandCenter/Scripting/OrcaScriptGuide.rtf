{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf430
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\i\b\fs22 \cf0 \

\i0\b0 Tip: you can cut and paste from this guide. Also note that, for the most part, the syntax is just like 'C'.
\i\b \

\i0\b0 Tip: you can drag an object from the configuration into the script view to get the id text that is used by the find command.
\i\b \

\i0 \
Program Structure\

\b0 function main(args)\
\{\
....\
\}\
function <name> (args)\
\{\
\}\
Note: There must be a 'main' function. Additional functions are, of course, optional.
\b \
\
Functions
\b0 \
function <name> (args)	
\i //declaration
\i0 \
<fuction>(args);			
\i //calling
\i0 \
return <result>;			
\i //return
\i0 \
exit;					//quit script and exit\
\

\b Special Function Arguments
\b0 \
The arguments in the ScriptTask dialog are special hidden arguments. They should not be listed in the argument list of any function, but can be accessed by name (i.e. $1,$2, etc...) in the body of the main function.
\fs24 \

\fs22 \

\b Loops
\b0 \
for(<exp>;<exp>;<exp>) \{\
	<statements>\
\}\
\
do \{\
	<statements>\
\} while(<exp>);\
\
while(<exp>)\{\
	<statements>\
\}\
\
break;		
\i //exit loop early
\i0 \
continue;		
\i //goto next iteration
\i0 \
exit;			//quit script and exit\
\

\b Logic\

\b0 if(<condition>)\{\
	<statements>\
\}\
\
if(<condition>)\{\
	<statements>\
\}\
else \{\
	<statements>\
\}\
\
unless(<condition>) \{\
	<statements>\
\}\
\

\b Switch Statements\

\b0 switch(<condition>)\{\
	case <val>: <statements> break;\
	case <val>: <statements> break;\
	..\
	default: <statements> break;\
\}\
\

\b Conditional\

\b0 var = <expression>?<stmt>:<stmt>\
\

\b ORCA Interface\

\b0 obj = find(<className>);			//tag defaults to 0\
obj = find(<className>,<tag or slot>); 	//crate defauts to 0\
obj = find(<className>,<crate>,<tag or slot>);\
obj = find(<className>,<crate>,<slot>,<carrier slot>);\
obj = find(<className>,<slot>,<carrier slot>); //crate defauts to 0\
result = [obj <selector>];\
x = pointx([obj <selectorReturnsPoint>]);\
\

\b Special ObjC functions\

\b0 point(x,y) 			   
\i //makes a NSPoint object
\i0 \
rect(x,y,w,h) 		   
\i //makes a NSRect object
\i0 \
pointx(<point structure>) 
\i //returns x value
\i0 \
pointy(<point structure>) 
\i //returns y value
\i0 \
rectx(<rect structure>)   
\i //returns x value
\i0 \
recty(<rect structure>)   
\i //returns y value
\i0 \
recth(<rect structure>)   
\i //returns h value
\i0 \
rectw(<rect structure>)  
\i //returns w value
\i0 \
\

\b Output
\b0 \
print(<var,var,...>);\
print <var,var,...>;\
outputfile (<var,var,...>); //output logged to file\
outputfile <var,var,...>;   //output logged to file\
display("label", <exp>); //value is logged to dialog outputs\
\
Note the 'display' is a 
\i\b very
\i0\b0  expensive operation. \
\

\b Special
\b0 \
waituntil (<true>)		       //returns true always\
waituntil (<true>,<timeout>) //returns false if timed-out, true otherwise.\
sleep(<# seconds>);\
hex(<var>)		                
\i //convert to hex string
\i0 \
string(<var,var,...>)	      
\i //produce a string for printing or an argument
\i0 \
postalarm(<alarmName>, <alarmSeverity> [,<alarmHelp>]);  //the help string is optional\
clearalarm(<alarmName>);\

\b \
Array Declaration
\b0 \
array varName[<size>];\
array varName[<size>] = \{<var>,<var>, ... <var>\};\
\
Note: Arrays can not be used just anywhere. i.e. a[i]++ will pass the syntax checker but will cause a run-time exception. Other operators that do not work with arrays include, +=, -=,*=, etc...\
\

\b Standard Library Functions\

\b0 pow(), sqrt(), ceil(), floor(), round(), cos(), acos()\
sin(), asin(), tan(), atan(), abs(), exp(), log(), log10()\
\

\b Operators
\b0 \
+	-	/	*	%	++	--	+=	-=\
*=	/=	&=	^=	&= 	!= 	!	&	&&\
|	||	==	>=	<=	<<	>>	^	<\
>	~\
\

\b Predefined Constants\

\b0 true, false, TRUE, FALSE\
yes, no, YES, NO\
nil, NUL
\b \

\b0 \

\b Special Notes\

\b0 Arrays and vars are passed by value. \
}